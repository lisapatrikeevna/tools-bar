{"version":3,"sources":["ui/views/user/user.module.css","ui/views/groupUsers/groupUsers.module.css","ui/common/EditableSpan.tsx","ui/views/user/user.tsx","ui/views/groups/group.tsx","ui/views/groups/groups.tsx","ui/views/groupUsers/groupsUsers.tsx"],"names":["module","exports","EditableSpan","React","memo","props","console","log","useState","editMode","setEditMode","value","item","setItem","TextField","onChange","e","currentTarget","autoFocus","onBlur","onDoubleClick","User","dispatch","useDispatch","admin","useSelector","state","users","adminUid","curentUser","userid","groupName","setGroupName","name","setName","email","setEmail","addToo","useCallback","addUserToGroup","uid","className","cl","userBox","date","type","placeholder","onClick","Button","variant","payload","nickName","updateUserTC","removeUser","group","listTasks","Group","user","map","u","id","Groups","useEffect","getGroupsTC","groups","g","nGroup","setNumGroup","addGroupsTC","GroupsUsers","setUsersTC","action","removeUserTC","tokensValidAfterTime","setUserOnGroupTC","wrap"],"mappings":"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","file":"static/js/5.ed750026.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"userBox\":\"user_userBox__8ygG-\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"wrap\":\"groupUsers_wrap__14uOM\"};","import React, {ChangeEvent, useState} from 'react';\r\nimport {TextField} from '@material-ui/core';\r\n\r\ntype EditableSpanPropsType = {\r\n    value: string\r\n    onChange: (newValue: string) => void\r\n}\r\n\r\nexport const EditableSpan = React.memo(function (props: EditableSpanPropsType) {\r\n    console.log(\"EditableSpan called\");\r\n    let [editMode, setEditMode] = useState(false);\r\n    let [item, setItem] = useState(props.value);\r\n\r\n    const activateEditMode = () => {\r\n        setEditMode(true);\r\n        setItem(props.value);\r\n    }\r\n    const activateViewMode = () => {\r\n        setEditMode(false);\r\n        props.onChange(item);\r\n    }\r\n    const changeItem = (e: ChangeEvent<HTMLInputElement>) => {\r\n        setItem(e.currentTarget.value)\r\n    }\r\n\r\n    return editMode\r\n        ? <TextField value={item} onChange={changeItem} autoFocus onBlur={activateViewMode}/>\r\n        : <span onDoubleClick={activateEditMode}>{props.value}</span>\r\n});\r\n","import React, {ChangeEvent, useCallback, useEffect, useState} from 'react';\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {AppRootStateType} from \"../../../bll/store\";\r\nimport {setUserOnGroupAC, setUserOnGroupTC, updateUserTC, userType} from \"../../../bll/userReduser\";\r\nimport cl from './user.module.css'\r\nimport {Button} from \"@material-ui/core\";\r\nimport {EditableSpan} from \"../../common/EditableSpan\";\r\n\r\ntype propsType = {\r\n    uid: string\r\n    name?: string | undefined\r\n    date: string\r\n    email: string\r\n    group?: string | undefined\r\n    listTasks?: {} | undefined\r\n    removeUser: (uid: string) => void\r\n    addUserToGroup: (uid: string) => void\r\n}\r\nconst User = (props: propsType) => {\r\n    const dispatch = useDispatch()\r\n    const admin = useSelector<AppRootStateType, string>(state => state.users.adminUid)\r\n    const curentUser = useSelector<AppRootStateType, string>(state => state.users.userid)\r\n    console.log(admin,' ',curentUser);\r\n    let [groupName, setGroupName] = useState<string>('')\r\n    let [name, setName] = useState<string>(props.name ? props.name : 'not a name')\r\n    let [email, setEmail] = useState<string>(props.email)\r\n    const changeEmail = (email: string) => {\r\n        setEmail(email)\r\n    }\r\n    const changeName = (name: string) => {\r\n        setName(name)\r\n    }\r\n    const removeUser = () => {\r\n        props.removeUser(props.uid)\r\n    }\r\n    // const changePropUser = useCallback((title: string) => {\r\n    //     props.somefunction(props.id, title)\r\n    // }, [props.id, props.somefunction])\r\n    const update = () => {\r\n        let nickName = name\r\n        let payload = {email, nickName}\r\n        debugger\r\n        dispatch(updateUserTC(props.uid, payload))\r\n    }\r\n    const addToo = useCallback(() => {\r\n        debugger\r\n        // let payload = {id, groupName}\r\n        // dispatch(setUserOnGroupAC(payload))\r\n       props.addUserToGroup(props.uid)\r\n        setGroupName('')\r\n    },[])\r\n    const onChaneNameGroup = (e: ChangeEvent<HTMLInputElement>) => {\r\n        setGroupName(e.currentTarget.value)\r\n    }\r\n\r\n\r\n    return (\r\n        <div key={props.uid} className={cl.userBox}>\r\n            <p>uid:{props.uid}</p>\r\n            <p>date :{props.date}</p>\r\n            {admin !== curentUser && <div>\r\n                <p>name:{name ? name : 'no name'}</p>\r\n                <p>email:{props.email}</p>\r\n            </div>}\r\n\r\n            {admin === curentUser &&\r\n            <div>\r\n                <p>email:<EditableSpan onChange={changeEmail} value={email}/></p>\r\n                <p>name:<EditableSpan onChange={changeName} value={name}/></p>\r\n                <hr/>\r\n                <input type=\"text\" value={groupName} placeholder={'add groupName'} onChange={onChaneNameGroup}/>\r\n                <button onClick={addToo}>add to group</button>\r\n                <hr/>\r\n                <Button variant=\"contained\" onClick={update}>update</Button>\r\n                <Button variant=\"contained\" onClick={removeUser}>delete</Button>\r\n            </div>\r\n            }\r\n            <p>group:{props.group ? props.group : 'no group'}</p>\r\n            <p>listTasks:{props.listTasks ? props.listTasks : 'no tasks'}</p>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default User;\r\n\r\n","import React from 'react';\r\n\r\ntype propsType = {\r\n    id: string\r\n    name: string\r\n    users: [{ uid: string }]\r\n}\r\nconst Group = (props: propsType) => {\r\n    const update = () => {\r\n\r\n    }\r\n    const deleteGroup = () => {\r\n\r\n    }\r\n    let user = props.users?.map(u => <p key={u.uid}>{u.uid}</p>)\r\n    return (\r\n        <div key={props.id}>\r\n            <div><p>names group: {props.name}</p>\r\n                <button onClick={update}>update</button>\r\n                <button onClick={deleteGroup}>delete</button>\r\n            </div>\r\n            {user && <p>list users:{user}</p>}\r\n            <p>content for group:</p>\r\n            <hr/>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default Group;","import React, {ChangeEvent, useEffect, useState} from 'react';\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {addGroupsTC, getGroupsTC, groupType, setUsersTC} from \"../../../bll/userReduser\";\r\nimport {AppRootStateType} from \"../../../bll/store\";\r\nimport Group from \"./group\";\r\n\r\nconst Groups = () => {\r\n    const dispatch = useDispatch()\r\n    useEffect(() => {\r\n        dispatch(getGroupsTC())\r\n    }, [dispatch])\r\n    const allGroups = useSelector<AppRootStateType, Array<any>>(state => state.users.groups)\r\n    const group = allGroups.map(g => <Group key={g.id} id={g.id} name={g.group}\r\n                                            users={g.users}\r\n    />)\r\n    let [nGroup, setNumGroup] = useState<string>('')\r\n    const setNewGroup = (e: ChangeEvent<HTMLInputElement>) => {\r\n        setNumGroup(e.currentTarget.value)\r\n    }\r\n    const createGroup = () => {\r\n        dispatch(addGroupsTC(nGroup))\r\n        setNumGroup('')\r\n    }\r\n    return (\r\n        <>\r\n            <p>GroupsUsers:\r\n                <input type=\"text\" value={nGroup} onChange={setNewGroup}/>\r\n                <button onClick={createGroup}>create group</button>\r\n            </p>\r\n            {/*<p className={cl.wrap}>{group}</p>*/}\r\n        </>\r\n    );\r\n};\r\n\r\nexport default Groups;","import React, {ChangeEvent, useCallback, useEffect, useState} from 'react';\nimport {useDispatch, useSelector} from \"react-redux\";\nimport {removeUserTC, setUserOnGroupTC, setUsersTC, userType} from \"../../../bll/userReduser\";\nimport {AppRootStateType} from \"../../../bll/store\";\nimport User from \"../user/user\";\nimport Group from \"../groups/group\";\nimport cl from './groupUsers.module.css';\nimport Groups from \"../groups/groups\";\n\nconst GroupsUsers = () => {\n    const dispatch = useDispatch()\n    useEffect(() => {\n        // debugger\n        dispatch(setUsersTC())\n        // const db = admin.database();\n        // const ref = db.ref(\"restricted_access/secret_document\");\n        // ref.once(\"value\", function(snapshot) {\n        //     console.log(snapshot.val());\n        // });\n    }, [dispatch])\n    const removeUser = useCallback(function (uid: string) {\n        const action = removeUserTC(uid);\n        dispatch(action);\n    }, []);\n    const allUsers = useSelector<AppRootStateType, Array<userType>>(state => state.users.users)\n    const user = allUsers.map(u => <User key={u.uid} group={u.group} name={u.name} date={u.tokensValidAfterTime}\n                                         email={u.email} listTasks={u.listTasks} uid={u.uid} removeUser={removeUser}\n                                         addUserToGroup={addUserToGroup}/>)\nconst addUserToGroup=(uid:string)=>{\n    dispatch(setUserOnGroupTC(uid,\" idgoup\"))\n}\n    return (\n        <div>\n            <h5>all users: </h5>\n            <div className={cl.wrap}>{user}</div>\n            <Groups/>\n        </div>\n    );\n};\n\nexport default GroupsUsers;\n"],"sourceRoot":""}