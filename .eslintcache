[{"E:\\react\\dragan wrap\\new-node\\tools-bar\\src\\index.tsx":"1","E:\\react\\dragan wrap\\new-node\\tools-bar\\src\\reportWebVitals.ts":"2","E:\\react\\dragan wrap\\new-node\\tools-bar\\src\\bll\\store.ts":"3","E:\\react\\dragan wrap\\new-node\\tools-bar\\src\\App.jsx":"4","E:\\react\\dragan wrap\\new-node\\tools-bar\\src\\bll\\appReduserOld.js":"5","E:\\react\\dragan wrap\\new-node\\tools-bar\\src\\bll\\userReduser.ts":"6","E:\\react\\dragan wrap\\new-node\\tools-bar\\src\\bll\\app-reducer.ts":"7","E:\\react\\dragan wrap\\new-node\\tools-bar\\src\\bll\\tasksReduser.ts":"8","E:\\react\\dragan wrap\\new-node\\tools-bar\\src\\bll\\authReducer.ts":"9","E:\\react\\dragan wrap\\new-node\\tools-bar\\src\\bll\\todolists-reducer.ts":"10","E:\\react\\dragan wrap\\new-node\\tools-bar\\src\\bll\\groupReduser.ts":"11","E:\\react\\dragan wrap\\new-node\\tools-bar\\src\\ui\\views\\pages\\login\\Login.js":"12","E:\\react\\dragan wrap\\new-node\\tools-bar\\src\\ui\\views\\pages\\register\\Register.js":"13","E:\\react\\dragan wrap\\new-node\\tools-bar\\src\\ui\\components\\dashboard\\Dashboard.jsx":"14","E:\\react\\dragan wrap\\new-node\\tools-bar\\src\\bll\\Api.ts":"15","E:\\react\\dragan wrap\\new-node\\tools-bar\\src\\ui\\route.ts":"16","E:\\react\\dragan wrap\\new-node\\tools-bar\\src\\ui\\views\\groups\\groups.tsx":"17","E:\\react\\dragan wrap\\new-node\\tools-bar\\src\\ui\\views\\groups\\groupPage.tsx":"18","E:\\react\\dragan wrap\\new-node\\tools-bar\\src\\ui\\views\\users\\users.tsx":"19","E:\\react\\dragan wrap\\new-node\\tools-bar\\src\\ui\\views\\groupUsers\\groupsUsers.tsx":"20","E:\\react\\dragan wrap\\new-node\\tools-bar\\src\\ui\\components\\dashboard\\listItems.jsx":"21","E:\\react\\dragan wrap\\new-node\\tools-bar\\src\\ui\\views\\starting.jsx":"22","E:\\react\\dragan wrap\\new-node\\tools-bar\\src\\ui\\views\\pages\\page404\\Page404.jsx":"23","E:\\react\\dragan wrap\\new-node\\tools-bar\\src\\ui\\views\\users\\user.tsx":"24","E:\\react\\dragan wrap\\new-node\\tools-bar\\src\\ui\\views\\todo\\todoList.tsx":"25","E:\\react\\dragan wrap\\new-node\\tools-bar\\src\\ui\\views\\todo\\todo.tsx":"26","E:\\react\\dragan wrap\\new-node\\tools-bar\\src\\ui\\components\\dashboard\\Orders.jsx":"27","E:\\react\\dragan wrap\\new-node\\tools-bar\\src\\ui\\components\\dashboard\\Deposits.jsx":"28","E:\\react\\dragan wrap\\new-node\\tools-bar\\src\\ui\\components\\dashboard\\Chart.jsx":"29","E:\\react\\dragan wrap\\new-node\\tools-bar\\src\\ui\\components\\dashboard\\Title.jsx":"30","E:\\react\\dragan wrap\\new-node\\tools-bar\\src\\ui\\views\\groups\\group.tsx":"31","E:\\react\\dragan wrap\\new-node\\tools-bar\\src\\utils\\error-utils.ts":"32","E:\\react\\dragan wrap\\new-node\\tools-bar\\src\\ui\\views\\todo\\task.tsx":"33","E:\\react\\dragan wrap\\new-node\\tools-bar\\src\\ui\\components\\common\\AddItemForm.tsx":"34","E:\\react\\dragan wrap\\new-node\\tools-bar\\src\\ui\\components\\common\\EditableSpan.tsx":"35","E:\\react\\dragan wrap\\new-node\\tools-bar\\src\\ui\\components\\common\\SmalAlert.tsx":"36","E:\\react\\dragan wrap\\new-node\\tools-bar\\src\\ui\\views\\pages\\page500\\Page500.jsx":"37"},{"size":1183,"mtime":1614441416029,"results":"38","hashOfConfig":"39"},{"size":425,"mtime":1612565314468,"results":"40","hashOfConfig":"39"},{"size":851,"mtime":1615932671057,"results":"41","hashOfConfig":"39"},{"size":1735,"mtime":1616966862289,"results":"42","hashOfConfig":"39"},{"size":227,"mtime":1617321503550,"results":"43","hashOfConfig":"39"},{"size":6756,"mtime":1617129616799,"results":"44","hashOfConfig":"39"},{"size":2383,"mtime":1613449007035,"results":"45","hashOfConfig":"39"},{"size":7738,"mtime":1617397884987,"results":"46","hashOfConfig":"39"},{"size":1999,"mtime":1613449590988,"results":"47","hashOfConfig":"39"},{"size":5370,"mtime":1617134905406,"results":"48","hashOfConfig":"39"},{"size":3378,"mtime":1617131045748,"results":"49","hashOfConfig":"39"},{"size":3822,"mtime":1615124439273,"results":"50","hashOfConfig":"39"},{"size":3525,"mtime":1614524390187,"results":"51","hashOfConfig":"39"},{"size":8250,"mtime":1617383007699,"results":"52","hashOfConfig":"39"},{"size":8398,"mtime":1617397994386,"results":"53","hashOfConfig":"39"},{"size":397,"mtime":1615894274958,"results":"54","hashOfConfig":"39"},{"size":2791,"mtime":1616889025143,"results":"55","hashOfConfig":"39"},{"size":2620,"mtime":1617051404713,"results":"56","hashOfConfig":"39"},{"size":4038,"mtime":1616528788359,"results":"57","hashOfConfig":"39"},{"size":624,"mtime":1614771098200,"results":"58","hashOfConfig":"39"},{"size":3728,"mtime":1615127732352,"results":"59","hashOfConfig":"39"},{"size":1533,"mtime":1612630345203,"results":"60","hashOfConfig":"39"},{"size":1294,"mtime":1612304335247,"results":"61","hashOfConfig":"39"},{"size":5276,"mtime":1617064450928,"results":"62","hashOfConfig":"39"},{"size":4284,"mtime":1617377925715,"results":"63","hashOfConfig":"39"},{"size":4125,"mtime":1617130294042,"results":"64","hashOfConfig":"39"},{"size":2351,"mtime":1612111362000,"results":"65","hashOfConfig":"39"},{"size":847,"mtime":1612111362000,"results":"66","hashOfConfig":"39"},{"size":1429,"mtime":1612623836152,"results":"67","hashOfConfig":"39"},{"size":356,"mtime":1612625632421,"results":"68","hashOfConfig":"39"},{"size":1420,"mtime":1616967532546,"results":"69","hashOfConfig":"39"},{"size":801,"mtime":1613449702523,"results":"70","hashOfConfig":"39"},{"size":1815,"mtime":1617130294048,"results":"71","hashOfConfig":"39"},{"size":1573,"mtime":1617321736630,"results":"72","hashOfConfig":"39"},{"size":943,"mtime":1614533567650,"results":"73","hashOfConfig":"39"},{"size":1900,"mtime":1616945554218,"results":"74","hashOfConfig":"39"},{"size":1313,"mtime":1612304335247,"results":"75","hashOfConfig":"39"},{"filePath":"76","messages":"77","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"78"},"zqq5rk",{"filePath":"79","messages":"80","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"78"},{"filePath":"81","messages":"82","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"78"},{"filePath":"83","messages":"84","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"85","messages":"86","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"87","messages":"88","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"89","messages":"90","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"91","usedDeprecatedRules":"78"},{"filePath":"92","messages":"93","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"94","messages":"95","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"96","usedDeprecatedRules":"78"},{"filePath":"97","messages":"98","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"99","messages":"100","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"101","messages":"102","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"103","usedDeprecatedRules":"104"},{"filePath":"105","messages":"106","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"107","usedDeprecatedRules":"104"},{"filePath":"108","messages":"109","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"110","messages":"111","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"112","messages":"113","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"78"},{"filePath":"114","messages":"115","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"116","usedDeprecatedRules":"78"},{"filePath":"117","messages":"118","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"119","usedDeprecatedRules":"78"},{"filePath":"120","messages":"121","errorCount":0,"warningCount":9,"fixableErrorCount":0,"fixableWarningCount":0,"source":"122","usedDeprecatedRules":"78"},{"filePath":"123","messages":"124","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"78"},{"filePath":"125","messages":"126","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"104"},{"filePath":"127","messages":"128","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"129","usedDeprecatedRules":"104"},{"filePath":"130","messages":"131","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"104"},{"filePath":"132","messages":"133","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"134","usedDeprecatedRules":"78"},{"filePath":"135","messages":"136","errorCount":0,"warningCount":9,"fixableErrorCount":0,"fixableWarningCount":0,"source":"137","usedDeprecatedRules":"78"},{"filePath":"138","messages":"139","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"140","usedDeprecatedRules":"78"},{"filePath":"141","messages":"142","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"104"},{"filePath":"143","messages":"144","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"104"},{"filePath":"145","messages":"146","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"104"},{"filePath":"147","messages":"148","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"104"},{"filePath":"149","messages":"150","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"151","usedDeprecatedRules":"78"},{"filePath":"152","messages":"153","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"78"},{"filePath":"154","messages":"155","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"156","usedDeprecatedRules":"78"},{"filePath":"157","messages":"158","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"78"},{"filePath":"159","messages":"160","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"78"},{"filePath":"161","messages":"162","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"163","usedDeprecatedRules":"78"},{"filePath":"164","messages":"165","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"E:\\react\\dragan wrap\\new-node\\tools-bar\\src\\index.tsx",[],["166","167"],"E:\\react\\dragan wrap\\new-node\\tools-bar\\src\\reportWebVitals.ts",[],"E:\\react\\dragan wrap\\new-node\\tools-bar\\src\\bll\\store.ts",[],"E:\\react\\dragan wrap\\new-node\\tools-bar\\src\\App.jsx",["168","169"],"E:\\react\\dragan wrap\\new-node\\tools-bar\\src\\bll\\appReduserOld.js",[],"E:\\react\\dragan wrap\\new-node\\tools-bar\\src\\bll\\userReduser.ts",[],"E:\\react\\dragan wrap\\new-node\\tools-bar\\src\\bll\\app-reducer.ts",["170","171"],"import {Dispatch} from \"redux\";\r\nimport {handleServerAppError} from \"../utils/error-utils\";\r\n\r\nconst initialState: InitialStateType = {\r\n    status: 'idle',\r\n    error: null,\r\n    isInitialized: false\r\n}\r\n\r\nexport const appReducer = (state: InitialStateType = initialState, action: ActionsType): InitialStateType => {\r\n    switch (action.type) {\r\n        case 'APP/SET-STATUS':\r\n            return {...state, status: action.status}\r\n        case 'APP/SET-ERROR':\r\n            return {...state, error: action.error}\r\n        case 'IS-INIT':\r\n            return {...state, isInitialized: action.isInitialized}\r\n        default:\r\n            return {...state}\r\n    }\r\n}\r\n\r\nexport type RequestStatusType = 'idle' | 'loading' | 'succeeded' | 'failed'\r\nexport type InitialStateType = {\r\n    // происходит ли сейчас взаимодействие с сервером\r\n    status: RequestStatusType\r\n    // если ошибка какая-то глобальная произойдёт - мы запишем текст ошибки сюда\r\n    error: string | null\r\n    isInitialized: boolean\r\n}\r\n\r\nexport const setAppErrorAC = (error: string | null) => ({type: 'APP/SET-ERROR', error} as const)\r\nexport const setAppStatusAC = (status: RequestStatusType) => ({type: 'APP/SET-STATUS', status} as const)\r\nexport const setIsInitializedAC = (isInitialized: boolean) => ({type: 'IS-INIT', isInitialized} as const)\r\nexport type SetAppErrorActionType = ReturnType<typeof setAppErrorAC>\r\nexport type SetAppStatusActionType = ReturnType<typeof setAppStatusAC>\r\nexport type setIsInitializedACType = ReturnType<typeof setIsInitializedAC>\r\n\r\n\r\n// export const initializeAppTC = () => (dispatch: Dispatch) => {\r\n//     authAPI.me()\r\n//         .then(res => {\r\n//         // debugger\r\n//         if (res.data.resultCode === 0) {\r\n//             dispatch(setIsLoggedInAC(true));\r\n//\r\n//          }\r\n//         else {\r\n//             // debugger\r\n//             // // handleServerAppError(err, dispatch);\r\n//         }\r\n//     })\r\n//         .catch((err) => {\r\n//             handleServerAppError(err, dispatch);\r\n//             dispatch(setIsInitializedAC(true))\r\n//             // throw new Error(err.message)\r\n//         })\r\n//     dispatch(setIsInitializedAC(true))\r\n// }\r\n\r\ntype ActionsType =\r\n    | SetAppErrorActionType\r\n    | SetAppStatusActionType\r\n    | setIsInitializedACType\r\n","E:\\react\\dragan wrap\\new-node\\tools-bar\\src\\bll\\tasksReduser.ts",["172","173"],"E:\\react\\dragan wrap\\new-node\\tools-bar\\src\\bll\\authReducer.ts",["174","175"],"import { Dispatch } from 'redux'\r\nimport {handleServerAppError, handleServerNetworkError} from \"../utils/error-utils\"\r\nimport {LoginParamsType} from \"./Api\";\r\nimport {SetAppErrorActionType, setAppStatusAC, SetAppStatusActionType} from \"./app-reducer\";\r\n\r\nconst initialState = {\r\n    isLoggedIn: false\r\n}\r\ntype InitialStateType = typeof initialState\r\n\r\nexport const authReducer = (state: InitialStateType = initialState, action: ActionsType): InitialStateType => {\r\n    switch (action.type) {\r\n        case 'login/SET-IS-LOGGED-IN':\r\n            return {...state, isLoggedIn: action.value}\r\n        default:\r\n            return state\r\n    }\r\n}\r\n// actions\r\nexport const setIsLoggedInAC = (value: boolean) =>\r\n    ({type: 'login/SET-IS-LOGGED-IN', value} as const)\r\n\r\n// thunks\r\nexport const loginTC = (data: LoginParamsType) => (dispatch: Dispatch<ActionsType>) => {\r\n    dispatch(setAppStatusAC('loading'))\r\n    // authAPI.login(data).\r\n    //     then(res=>{\r\n    //     if (res.data.resultCode === 0) {\r\n    //         dispatch(setIsLoggedInAC(true))\r\n    //         dispatch(setAppStatusAC('succeeded'))\r\n    //     } else {\r\n    //         handleServerAppError(res.data, dispatch);\r\n    //     }\r\n    // })\r\n    //     .catch((error) => {\r\n    //         handleServerNetworkError(error, dispatch)\r\n    //     })\r\n\r\n}\r\n\r\n// export const logoutTC = () => (dispatch: Dispatch<ActionsType>) => {\r\n//     dispatch(setAppStatusAC('loading'))\r\n//     authAPI.logout()\r\n//         .then(res => {\r\n//             if (res.data.resultCode === 0) {\r\n//                 dispatch(setIsLoggedInAC(false))\r\n//                 dispatch(setAppStatusAC('succeeded'))\r\n//             } else {\r\n//                 handleServerAppError(res.data, dispatch)\r\n//             }\r\n//         })\r\n//         .catch((error) => {\r\n//             handleServerNetworkError(error, dispatch)\r\n//         })\r\n// }\r\n\r\n// types\r\ntype ActionsType = ReturnType<typeof setIsLoggedInAC> | SetAppStatusActionType | SetAppErrorActionType\r\n","E:\\react\\dragan wrap\\new-node\\tools-bar\\src\\bll\\todolists-reducer.ts",["176","177"],"E:\\react\\dragan wrap\\new-node\\tools-bar\\src\\bll\\groupReduser.ts",["178","179","180"],"E:\\react\\dragan wrap\\new-node\\tools-bar\\src\\ui\\views\\pages\\login\\Login.js",["181","182"],"import React, {useState} from 'react'\nimport {Link, Redirect} from 'react-router-dom'\nimport {\n  CButton, CCard, CCardBody, CCardGroup, CCol, CContainer, CForm, CInput,\n  CInputGroup, CInputGroupPrepend, CInputGroupText, CRow\n} from '@coreui/react'\nimport CIcon from '@coreui/icons-react'\nimport {createUserTC, loginUserTC} from \"../../../../bll/userReduser\";\nimport {useDispatch, useSelector} from \"react-redux\";\n\nconst Login = () => {\n  console.log('login');\n  debugger\n  const status = useSelector(state => state.users.status)\n  const dispatch = useDispatch()\n  let [email, setEmail] = useState('lisa15.08patrikeevana@gmail.com')\n  let [password, setPassword] = useState('lisa15')\n  const createEmail = (e) => {setEmail(e.currentTarget.value)}\n  const createPassword = (e) => {setPassword(e.currentTarget.value)}\n  const HandleLogin = ()=>{\n    dispatch(loginUserTC(email,password))\n    setEmail('')\n    setPassword('')\n  }\n  // if(status){return <Redirect to='/groupsUsers' />}\n  // console.log('login page:', status);\n\n  return (\n    <div className=\"c-app c-default-layout flex-row align-items-center\">\n      <CContainer>\n        <CRow className=\"justify-content-center\">\n          <CCol md=\"8\">\n            <CCardGroup>\n              <CCard className=\"p-4\">\n                <CCardBody>\n                  <CForm>\n                    <h1>Login</h1>\n                    <p className=\"text-muted\">Sign In to your account</p>\n                    <CInputGroup className=\"mb-3\">\n                      <CInputGroupPrepend>\n                        <CInputGroupText>\n                          <CIcon name=\"cil-user\" />\n                        </CInputGroupText>\n                      </CInputGroupPrepend>\n                      <CInput type=\"text\" placeholder=\"Email\" autoComplete=\"email\" onChange={createEmail} value={email}/>\n                    </CInputGroup>\n                    <CInputGroup className=\"mb-4\">\n                      <CInputGroupPrepend>\n                        <CInputGroupText>\n                          <CIcon name=\"cil-lock-locked\" />\n                        </CInputGroupText>\n                      </CInputGroupPrepend>\n                      <CInput type=\"password\" placeholder=\"Password\" autoComplete=\"current-password\"  value={password} onChange={createPassword}/>\n                    </CInputGroup>\n                    <CRow>\n                      <CCol xs=\"6\">\n                        <CButton color=\"primary\" className=\"px-5\" onClick={HandleLogin}>Login</CButton>\n                      </CCol>\n                      {status &&\n                      <CCol xs=\"6\"> <Link to=\"/groupsUsers\">\n                        <CButton color=\"primary\" className=\"px-4\">main</CButton>\n                      </Link> </CCol>}\n                      {/*<CCol xs=\"6\" className=\"text-right\">*/}\n                      {/*  <CButton color=\"link\" className=\"px-0\">Forgot password?</CButton>*/}\n                      {/*</CCol>*/}\n                    </CRow>\n                  </CForm>\n                </CCardBody>\n              </CCard>\n              <CCard className=\"text-white bg-primary py-5 d-md-down-none\" style={{ width: '44%' , margin: '10px auto'}}>\n                <CCardBody className=\"text-center\">\n                  <div>\n                    <h2>Sign up</h2>\n                    <p>Lorem ipsum dolor sit amet, consectetur adipisicing elit, sed do eiusmod tempor incididunt ut\n                      labore et dolore magna aliqua.</p>\n                    <Link to=\"/register\">\n                      <CButton color=\"primary\" className=\"mt-3\" active tabIndex={-1}>Register Now!</CButton>\n                    </Link>\n                  </div>\n                </CCardBody>\n              </CCard>\n            </CCardGroup>\n          </CCol>\n        </CRow>\n      </CContainer>\n    </div>\n  )\n}\n\nexport default Login\n",["183","184"],"E:\\react\\dragan wrap\\new-node\\tools-bar\\src\\ui\\views\\pages\\register\\Register.js",["185","186"],"import React, {useState} from 'react'\nimport {\n  CButton,\n  CCard,\n  CCardBody,\n  CCardFooter,\n  CCol,\n  CContainer,\n  CForm,\n  CInput,\n  CInputGroup,\n  CInputGroupPrepend,\n  CInputGroupText,\n  CRow\n} from '@coreui/react'\nimport CIcon from '@coreui/icons-react'\nimport {useDispatch, useSelector} from \"react-redux\";\nimport {createUserTC} from \"../../../../bll/userReduser\";\nimport {Redirect} from \"react-router-dom\";\nimport Dashboard from \"../../../components/dashboard/Dashboard\";\n\nconst Register = () => {\n\n  const userRecord = useSelector(state => state.users.userRecord)\n  const dispatch = useDispatch()\n  let [username,setUsername]=useState('')\n  let [email, setEmail] = useState('')\n  let [password, setPassword] = useState('lisa15')\n  const createUsername = (e) => {\n    setUsername(e.currentTarget.value)\n  }\n  const createEmail = (e) => {\n    setEmail(e.currentTarget.value)\n  }\n  const createPassword = (e) => {\n    setPassword(e.currentTarget.value)\n  }\n  const HandleRegister = ()=>{\n    dispatch(createUserTC(email,password,username))\n    setUsername('')\n    setEmail('')\n    setPassword('')\n  }\n  console.log(userRecord);\n\n  if(userRecord){return <Redirect to='/login' />}\n\n  return (\n    <div className=\"c-app c-default-layout flex-row align-items-center\">\n      <CContainer>\n        <CRow className=\"justify-content-center\">\n          <CCol md=\"9\" lg=\"7\" xl=\"6\">\n            <CCard className=\"mx-4\">\n              <CCardBody className=\"p-4\">\n                <CForm>\n                  <h1>Register</h1>\n                  <p className=\"text-muted\">Create your account</p>\n                  <CInputGroup className=\"mb-3\">\n                    <CInputGroupPrepend>\n                      <CInputGroupText>\n                        <CIcon name=\"cil-user\" />\n                      </CInputGroupText>\n                    </CInputGroupPrepend>\n                    <CInput type=\"text\" placeholder=\"Username\" autoComplete=\"username\" value={username} onChange={createUsername}/>\n                  </CInputGroup>\n                  <CInputGroup className=\"mb-3\">\n                    <CInputGroupPrepend>\n                      <CInputGroupText>@</CInputGroupText>\n                    </CInputGroupPrepend>\n                    <CInput type=\"text\" placeholder=\"Email\" autoComplete=\"email\" onChange={createEmail} value={email}/>\n                  </CInputGroup>\n                  <CInputGroup className=\"mb-3\">\n                    <CInputGroupPrepend>\n                      <CInputGroupText>\n                        <CIcon name=\"cil-lock-locked\" />\n                      </CInputGroupText>\n                    </CInputGroupPrepend>\n                    <CInput type=\"password\" placeholder=\"Password\" autoComplete=\"new-password\" value={password} onChange={createPassword}/>\n                  </CInputGroup>\n                  {/*<CInputGroup className=\"mb-4\">*/}\n                  {/*  <CInputGroupPrepend>*/}\n                  {/*    <CInputGroupText>*/}\n                  {/*      <CIcon name=\"cil-lock-locked\" />*/}\n                  {/*    </CInputGroupText>*/}\n                  {/*  </CInputGroupPrepend>*/}\n                  {/*  <CInput type=\"password\" placeholder=\"Repeat password\" autoComplete=\"new-password\" />*/}\n                  {/*</CInputGroup>*/}\n                  <CButton color=\"success\" block onClick={HandleRegister}>Create Account</CButton>\n                </CForm>\n              </CCardBody>\n            </CCard>\n          </CCol>\n        </CRow>\n      </CContainer>\n    </div>\n  )\n}\n\nexport default Register\n","E:\\react\\dragan wrap\\new-node\\tools-bar\\src\\ui\\components\\dashboard\\Dashboard.jsx",["187","188","189"],"E:\\react\\dragan wrap\\new-node\\tools-bar\\src\\bll\\Api.ts",["190"],"E:\\react\\dragan wrap\\new-node\\tools-bar\\src\\ui\\route.ts",[],"E:\\react\\dragan wrap\\new-node\\tools-bar\\src\\ui\\views\\groups\\groups.tsx",["191","192"],"import React, {ChangeEvent, useEffect, useState} from 'react';\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {AppRootStateType} from \"../../../bll/store\";\r\nimport Group from \"./group\";\r\nimport {GroupType} from \"../../../bll/Api\";\r\nimport cl from \"../groupUsers/groupUsers.module.css\";\r\nimport {addGroupsTC, getGroupsTC} from \"../../../bll/groupReduser\";\r\nimport DenseTable from \"./tableGroup\";\r\nimport TableContainer from \"@material-ui/core/TableContainer\";\r\nimport Paper from \"@material-ui/core/Paper\";\r\nimport Table from \"@material-ui/core/Table\";\r\nimport TableHead from \"@material-ui/core/TableHead\";\r\nimport TableRow from \"@material-ui/core/TableRow\";\r\nimport TableCell from \"@material-ui/core/TableCell\";\r\nimport TableBody from \"@material-ui/core/TableBody\";\r\nimport {makeStyles} from \"@material-ui/core/styles\";\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n    head: {\r\n        backgroundColor: theme.palette.common.black,\r\n        color: theme.palette.common.white,\r\n    },\r\n    table: {\r\n        minWidth: 650,\r\n    },\r\n}));\r\nconst Groups = () => {\r\n    const dispatch = useDispatch()\r\n    useEffect(() => {\r\n        dispatch(getGroupsTC())\r\n    }, [dispatch])\r\n    const allGroups = useSelector<AppRootStateType, Array<GroupType>>(state => state.groups.groups)\r\n    let [nGroup, setNumGroup] = useState<string>('')\r\n    const setNewGroup = (e: ChangeEvent<HTMLInputElement>) => {\r\n        setNumGroup(e.currentTarget.value)\r\n    }\r\n    const createGroup = () => {\r\n        dispatch(addGroupsTC(nGroup.trim()))\r\n        setNumGroup('')\r\n    }\r\n    const group = allGroups.map(g => <Group key={g.id} id={g.id} name={g.data.group}\r\n                                                  users={g.data.users}/>)\r\n    const classes = useStyles();\r\n    return (\r\n        <>\r\n            <p>GroupsUsers:\r\n                <input type=\"text\" value={nGroup} onChange={setNewGroup}/>\r\n                <button onClick={createGroup}>create group</button>\r\n            </p>\r\n            <TableContainer component={Paper}>\r\n                <Table className={classes.table} size=\"small\" aria-label=\"a dense table\">\r\n                    <TableHead>\r\n                        <TableRow>\r\n                            <TableCell >Users (lists)</TableCell>\r\n                            <TableCell align=\"right\">Names group</TableCell>\r\n                            {/*<TableCell align=\"right\">Fat&nbsp;(g)</TableCell>*/}\r\n                            <TableCell align=\"right\">buttons group&nbsp;</TableCell>\r\n                        </TableRow>\r\n                    </TableHead>\r\n                    <TableBody>\r\n                        {group}\r\n                    </TableBody>\r\n                </Table>\r\n            </TableContainer>\r\n            {/*<div className={cl.wrap}>{group}</div>*/}\r\n            {/*<DenseTable/>*/}\r\n        </>\r\n    );\r\n};\r\n\r\n\r\nexport default Groups;\r\n\r\n","E:\\react\\dragan wrap\\new-node\\tools-bar\\src\\ui\\views\\groups\\groupPage.tsx",["193","194","195","196"],"import React, {useCallback, useEffect} from 'react';\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {useParams} from 'react-router-dom';\r\nimport cl from \"../groupUsers/groupUsers.module.css\";\r\nimport {AppRootStateType} from \"../../../bll/store\";\r\nimport {GroupType} from \"../../../bll/Api\";\r\nimport {\r\n    getGroupByIdTC,\r\n    groupUsersType,\r\n    removeGroupsTC,\r\n    removeTodolistFromGroupTC,\r\n    removeUserFromGroupTC\r\n} from \"../../../bll/groupReduser\";\r\nimport {TodolistsList} from \"../todo/todoList\";\r\nimport DeleteIcon from \"@material-ui/icons/Delete\";\r\nimport {addTodolistTC, removeTodolistTC} from \"../../../bll/todolists-reducer\";\r\nimport {removeGroupFromUserDataTC} from \"../../../bll/userReduser\";\r\n\r\n\r\nconst GroupPage = React.memo(() => {\r\n    const dispatch = useDispatch()\r\n    const {id}: any = useParams()\r\n    useEffect(() => {dispatch(getGroupByIdTC(id))},[dispatch, id])\r\n\r\n    const group = useSelector<AppRootStateType, GroupType>(state => state.groups.activeGroup)\r\n    const deleteGroup = () => {\r\n        dispatch(removeGroupsTC(id))\r\n    }\r\n    let user = group.data.users?.map((u: groupUsersType) => {\r\n        const removeUser = () => {\r\n            const user = {uid: u.uid, name: u.name}\r\n            dispatch(removeUserFromGroupTC(id, {uid: u.uid, name: u.name}))\r\n            dispatch(removeGroupFromUserDataTC(u.uid))\r\n        }\r\n        return (\r\n            <div key={u.uid}>\r\n                {/*<p>{u.uid}</p>*/}\r\n                <span>{u.name}</span>\r\n                <DeleteIcon onClick={removeUser} color='primary'/>\r\n            </div>\r\n        )\r\n    })\r\n    const addTodolist = useCallback((title: string) => {\r\n        dispatch(addTodolistTC(title, id))\r\n    }, [dispatch])\r\n    const removeTodolist = useCallback(function (todolistId: string) {\r\n        dispatch(removeTodolistTC(todolistId))\r\n        dispatch(removeTodolistFromGroupTC(id, todolistId))\r\n    }, [dispatch])\r\n    return (\r\n        <>\r\n            <div style={{display: 'flex'}}>\r\n                <p>name groups:</p><h2> {group.data.group}</h2>\r\n            </div>\r\n            <div className={cl.box}>\r\n                {/*<Button onClick={deleteGroup}>delete</Button>*/}\r\n                {user && <><h5>list users:</h5>\r\n                    <div style={{display: 'flex'}}>{user}</div>\r\n                </>}\r\n                <h5>content for group: </h5>\r\n                <TodolistsList addTodolist={addTodolist} todolistFromGroup={group.data.todoLists}\r\n                               removeTodolist={removeTodolist}/>\r\n            </div>\r\n        </>\r\n    );\r\n});\r\n\r\nexport default GroupPage;","E:\\react\\dragan wrap\\new-node\\tools-bar\\src\\ui\\views\\users\\users.tsx",["197","198","199","200","201","202","203","204","205"],"import React, {useCallback, useEffect} from 'react';\nimport {useDispatch, useSelector} from \"react-redux\";\nimport {\n    removeUserTC,\n    setUserOnGroupTC,\n    setUsersTC,\n    userType\n} from \"../../../bll/userReduser\";\nimport {AppRootStateType} from \"../../../bll/store\";\nimport User from \"../users/user\";\nimport cl from './user.module.css';\nimport {GroupType} from \"../../../bll/Api\";\nimport {getGroupsTC, groupUsersType} from \"../../../bll/groupReduser\";\nimport TableContainer from \"@material-ui/core/TableContainer\";\nimport Paper from \"@material-ui/core/Paper\";\nimport Table from \"@material-ui/core/Table\";\nimport TableHead from \"@material-ui/core/TableHead\";\nimport TableRow from \"@material-ui/core/TableRow\";\nimport TableCell from \"@material-ui/core/TableCell\";\nimport TableBody from \"@material-ui/core/TableBody\";\nimport {makeStyles} from \"@material-ui/core/styles\";\n\n\nconst useStyles = makeStyles((theme) => ({\n    head: {\n        backgroundColor: theme.palette.common.black,\n        color: theme.palette.common.white,\n    },\n    table: {\n        minWidth: 650,\n    },\n}));\nconst Users = () => {\n    const dispatch = useDispatch()\n    useEffect(() => {\n        dispatch(setUsersTC())\n        dispatch(getGroupsTC())\n    }, [dispatch])\n    const removeUser = useCallback(function (uid: string) {\n        const action = removeUserTC(uid)\n        dispatch(action)\n    }, [])\n    const addUserToGroup = (id: string, uid: string, userName: string, user: groupUsersType) => {\n        // dispatch(setUserOnGroupTC(id,uid, userName))\n        dispatch(setUserOnGroupTC(id, uid, userName, user))\n    }\n    const allUsers = useSelector<AppRootStateType, Array<userType>>(state => state.users.users)\n    const allGroups = useSelector<AppRootStateType, Array<GroupType>>(state => state.groups.groups)\n    const user = allUsers.map(u => <User key={u.uid} groupName={u.groupName} groupId={u.groupId} name={u.displayName} date={u.tokensValidAfterTime}\n                                         email={u.email} listTasks={u.listTasks} uid={u.uid} removeUser={removeUser}\n                                         addUserToGroup={addUserToGroup} phoneNumber={u.phoneNumber}\n                                         listGroup={allGroups}/>)\n    return (\n        <div>\n            <input type=\"text\"/>\n            <h5>all users: </h5>\n            <p>пс. чтоб обновить поля( email и name ) даблклик и апдейт</p>\n            {/*<div className={cl.wrap}>{user}</div>*/}\n            <div>\n                <div className={cl.table} aria-label=\"a dense table\">\n                    <div className={cl.TableHead}>\n                        <div className={cl.TableRow}>\n                            <div className={cl.large}>\n                                <h4>Users (data)</h4>\n                                <span className={cl.wrap}>\n                                    <p>email</p>\n                                    <p>name</p>\n                                    <p>phoneNumber</p>\n                                </span>\n                            </div>\n                            <div className={cl.medium}>\n                                <h4>buttons group</h4>\n                                <span className={cl.wrap}>\n                                    <p>change/add group</p>\n                                    <p>change/delet user</p>\n                                </span>\n                            </div>\n                            <div className={cl.small}>\n                                <h4>Users (info)</h4>\n                                <span className={cl.wrap}>\n                                    <p>group</p>\n                                    <p>task</p>\n                                </span>\n                            </div>\n                        </div>\n                    </div>\n                    <div className={cl.TableBody}>\n                        {user}\n                    </div>\n                </div>\n            </div>\n        </div>\n    );\n};\n\nexport default Users;\n","E:\\react\\dragan wrap\\new-node\\tools-bar\\src\\ui\\views\\groupUsers\\groupsUsers.tsx",[],"E:\\react\\dragan wrap\\new-node\\tools-bar\\src\\ui\\components\\dashboard\\listItems.jsx",[],"E:\\react\\dragan wrap\\new-node\\tools-bar\\src\\ui\\views\\starting.jsx",["206"],"import React from 'react';\r\nimport Grid from \"@material-ui/core/Grid\";\r\nimport Paper from \"@material-ui/core/Paper\";\r\nimport Chart from \"../components/dashboard/Chart\";\r\nimport Deposits from \"../components/dashboard/Deposits\";\r\nimport Orders from \"../components/dashboard/Orders\";\r\nimport Container from \"@material-ui/core/Container\";\r\nimport clsx from \"clsx\";\r\nimport {makeStyles} from \"@material-ui/core/styles\";\r\n\r\n\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n    paper: {\r\n        padding: theme.spacing(2),\r\n        display: 'flex',\r\n        overflow: 'auto',\r\n        flexDirection: 'column',\r\n    },\r\n    fixedHeight: {\r\n        height: 240,\r\n    },\r\n}));\r\n\r\n\r\nconst Starting = () => {\r\n    const classes = useStyles();\r\n    const fixedHeightPaper = clsx(classes.paper, classes.fixedHeight);\r\n    return (\r\n        <Grid container spacing={3}>\r\n            {/* Chart */}\r\n            <Grid item xs={12} md={8} lg={9}>\r\n                <Paper className={fixedHeightPaper}>\r\n                    <Chart />\r\n                </Paper>\r\n            </Grid>\r\n            {/* Recent Deposits */}\r\n            <Grid item xs={12} md={4} lg={3}>\r\n                <Paper className={fixedHeightPaper}>\r\n                    <Deposits />\r\n                </Paper>\r\n            </Grid>\r\n            {/* Recent Orders */}\r\n            <Grid item xs={12}>\r\n                <Paper className={classes.paper}>\r\n                    <Orders />\r\n                </Paper>\r\n            </Grid>\r\n        </Grid>\r\n    );\r\n};\r\n\r\nexport default Starting;","E:\\react\\dragan wrap\\new-node\\tools-bar\\src\\ui\\views\\pages\\page404\\Page404.jsx",[],"E:\\react\\dragan wrap\\new-node\\tools-bar\\src\\ui\\views\\users\\user.tsx",["207","208"],"import React, {ChangeEvent, useCallback, useState} from 'react';\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {AppRootStateType} from \"../../../bll/store\";\r\nimport {updateUserTC} from \"../../../bll/userReduser\";\r\nimport cl from './user.module.css'\r\nimport { createStyles, FormControl, FormHelperText, Select, Theme} from \"@material-ui/core\";\r\nimport {EditableSpan} from \"../../components/common/EditableSpan\";\r\nimport makeStyles from \"@material-ui/core/styles/makeStyles\";\r\nimport {GroupType} from \"../../../bll/Api\";\r\nimport {groupUsersType, removeUserFromGroupTC} from \"../../../bll/groupReduser\";\r\nimport DeleteIcon from \"@material-ui/icons/Delete\";\r\nimport UpdateIcon from '@material-ui/icons/Update';\r\nimport AddBoxIcon from '@material-ui/icons/AddBox';\r\n\r\nconst useStyles = makeStyles((theme: Theme) =>\r\n    createStyles({\r\n        formControl: {\r\n            margin: theme.spacing(1),\r\n            minWidth: 150,\r\n        },\r\n        selectEmpty: {\r\n            marginTop: theme.spacing(2),\r\n        },\r\n    }),\r\n);\r\ntype propsType = {\r\n    uid: string\r\n    name?: string | undefined\r\n    phoneNumber?: string\r\n    date: string\r\n    email: string\r\n    groupName: string | null\r\n    groupId: string | null\r\n    listTasks?: {} | undefined\r\n    removeUser: (uid: string) => void\r\n    addUserToGroup: (uid: string, groupName: string, name: string, user: groupUsersType) => void\r\n    listGroup: Array<GroupType>\r\n}\r\nconst User = (props: propsType) => {\r\n    const classes = useStyles();\r\n    const dispatch = useDispatch()\r\n    const admin = useSelector<AppRootStateType, string>(state => state.users.adminUid)\r\n    const curentUser = useSelector<AppRootStateType, string>(state => state.users.userid)\r\n    let [groupID, setGroupID] = useState<string>('')\r\n    let [name, setName] = useState<string>(props.name ? props.name : 'not a name')\r\n    let [email, setEmail] = useState<string>(props.email)\r\n    let [phone, setPhone] = useState<string>(props.phoneNumber ? props.phoneNumber : 'not a phoneNumber')\r\n    const changeEmail = (email: string) => {\r\n        setEmail(email)\r\n    }\r\n    const changeName = (name: string) => {\r\n        setName(name)\r\n    }\r\n    const changePhone = (phone: string) => {\r\n        setPhone(phone)\r\n    }\r\n    const removeUser = () => {\r\n        const user = {uid: props.uid, name}\r\n        if(props.groupId){\r\n            dispatch(removeUserFromGroupTC(props.groupId,user))\r\n        }\r\n        props.removeUser(props.uid)\r\n    }\r\n    const update = useCallback(() => {\r\n        let payload = {email, name, phone}\r\n        dispatch(updateUserTC(props.uid, payload))\r\n    }, [email, name, phone])\r\n    const addToo = () => {\r\n        const user = {uid: props.uid, name}\r\n        if(props.groupId){\r\n            // debugger\r\n            dispatch(removeUserFromGroupTC(props.groupId,user))\r\n        }\r\n        props.addUserToGroup(groupID, props.uid, name, user)\r\n    }\r\n    const styles = {\r\n        // display:!admin  ?  'block' : 'none'\r\n    }\r\n    const handleChange = (event: React.ChangeEvent<{ value: unknown }>) => {\r\n        setGroupID(event.target.value as string);\r\n    };\r\n// debugger\r\n    return (\r\n        <div key={props.uid} >\r\n            {/*<p>uid:{props.uid}</p>*/}\r\n            {admin !== curentUser && <>\r\n                <div className={cl.spanWrap}><span>name:</span><h5>{name ? name : 'no name'}</h5></div>\r\n                <div className={cl.spanWrap}><span>email:</span><h5>{props.email}</h5></div>\r\n            </>}\r\n            {admin === curentUser &&\r\n            <div className={cl.TableRow} style={styles}>\r\n                <div className={`${cl.large} ${cl.wrap}`}>\r\n                    <EditableSpan onChange={changeEmail} value={email}/>\r\n                    <EditableSpan onChange={changeName} value={name}/>\r\n                    <EditableSpan onChange={changePhone} value={phone}/>\r\n                </div>\r\n                <div className={`${cl.medium} ${cl.wrap}`}>\r\n                    <UpdateIcon onClick={update} color='primary' />\r\n                    <DeleteIcon onClick={removeUser} color='primary'/>\r\n                <div className={cl.spaceBetween}>\r\n                    <FormControl className={classes.formControl}>\r\n                        <Select labelId=\"demo-simple-select-label\" id=\"demo-simple-select\"\r\n                                value={groupID} onChange={handleChange}>\r\n                            {props.listGroup.map(g => {\r\n                                return <option value={g.id} key={g.id}>{g.data.group}</option>\r\n                            })}\r\n                        </Select>\r\n                        <FormHelperText>select group</FormHelperText>\r\n                    </FormControl>\r\n                    {/*<Button onClick={addToo}>add to group</Button>*/}\r\n                    <AddBoxIcon onClick={addToo} color='primary'/>\r\n                </div>\r\n                </div>\r\n                <div className={`${cl.small} ${cl.wrap}`}>\r\n                    {/*<p>date :{props.date}</p>*/}\r\n                    <p>{props.groupName ? props.groupName : 'no group'}</p>\r\n                    <p>{props.listTasks ? props.listTasks : 'no tasks'}</p>\r\n                </div>\r\n            </div>\r\n            }\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default User;\r\n\r\n","E:\\react\\dragan wrap\\new-node\\tools-bar\\src\\ui\\views\\todo\\todoList.tsx",["209","210","211","212","213","214","215","216","217"],"import React, {useCallback, useEffect} from 'react'\r\nimport {useDispatch, useSelector} from 'react-redux'\r\nimport {Grid, Paper} from '@material-ui/core'\r\nimport {Redirect} from \"react-router-dom\";\r\nimport {AppRootStateType} from \"../../../bll/store\";\r\nimport {\r\n    addTodolistTC, changeTodolistTitleTC,\r\n    fetchTodolistsTC,\r\n    FilterValuesType,\r\n    removeTodolistTC,\r\n    TodolistDomainType\r\n} from \"../../../bll/todolists-reducer\";\r\nimport {addTaskTC, removeTaskTC, TasksStateType, updateTaskTC} from \"../../../bll/tasksReduser\";\r\nimport {TaskStatuses, TaskType} from \"../../../bll/Api\";\r\nimport {AddItemForm} from \"../../components/common/AddItemForm\";\r\nimport {Todolist} from \"./todo\";\r\n\r\ntype PropsType = {\r\n    addTodolist: (title: string) => void\r\n    removeTodolist: (todolistId: string) => void\r\n    todolistFromGroup: Array<string>\r\n}\r\n\r\nexport const TodolistsList: React.FC<PropsType> = (props: PropsType) => {\r\n    const dispatch = useDispatch()\r\n    useEffect(() => {\r\n        dispatch(fetchTodolistsTC())\r\n    }, [dispatch])\r\n    const todolists = useSelector<AppRootStateType, Array<TodolistDomainType>>(state => state.todoList)\r\n    const isLoggedIn = useSelector<AppRootStateType, boolean>(state => state.auth.isLoggedIn);\r\n    const tasks = useSelector<AppRootStateType, TasksStateType>(state => state.tasks)\r\n    const groupTodo = props.todolistFromGroup && props.todolistFromGroup?.map(tlG => {\r\n        const currentTodo = todolists.find((todo:TodolistDomainType) =>  tlG === todo.id)\r\n        return currentTodo\r\n    })\r\n\r\n    const removeTask = useCallback(function (id: string, todolistId: string,task: TaskType) {\r\n        dispatch(removeTaskTC(id, todolistId,task))\r\n        // dispatch(removeTaskTC(id, todolistId))\r\n    }, [])\r\n    const addTask = (title: string, todolistId: string) => {\r\n        dispatch(addTaskTC(title, todolistId))\r\n    }\r\n    const changeStatus = useCallback(function (id: string, status: TaskStatuses, todolistId: string) {\r\n        // dispatch(updateTaskTC(id, {status}, todolistId))\r\n    }, [])\r\n    const changeTaskTitle = useCallback(function (id: string, newTitle: string, todolistId: string) {\r\n       debugger\r\n        dispatch(updateTaskTC(id, {title: newTitle}, todolistId))\r\n    }, [])\r\n    const changeFilter = useCallback(function (value: FilterValuesType, todolistId: string) {\r\n        // dispatch(changeTodolistFilterAC(todolistId, value))\r\n    }, [])\r\n    const changeTodolistTitle = useCallback(function (id: string, title: string) {\r\n        dispatch(changeTodolistTitleTC(id, title))\r\n    }, [])\r\n    const removeTodolist = useCallback(function (id: string) {\r\n        //todolistId\r\n       // dispatch(removeTodolistTC(id))\r\n        props.removeTodolist(id)\r\n    }, [])\r\n    const addTodolist = useCallback((title: string) => {\r\n        // dispatch(addTodolistTC(title))\r\n        props.addTodolist(title)\r\n    }, [dispatch])\r\n\r\n     // console.log('groupTodo' ,groupTodo);\r\n\r\n    return <>\r\n        <Grid container style={{padding: '20px'}}>\r\n            <AddItemForm addItem={addTodolist}/>\r\n        </Grid>\r\n        {/*{groupTodo.length!==0 &&  <Grid container spacing={3}>*/}\r\n        {groupTodo.length>0 &&  <Grid container spacing={3}>\r\n            {\r\n                // todolists.map(tl => {\r\n                groupTodo.map((tl: any) => {\r\n                    let allTodolistTasks = tasks[tl.id]\r\n\r\n                    return <Grid item key={tl.id}>\r\n                        <Paper style={{padding: '10px'}}>\r\n                            <Todolist\r\n                                todolist={tl}\r\n                                tasks={allTodolistTasks}\r\n                                removeTask={removeTask}\r\n                                changeFilter={changeFilter}\r\n                                addTask={addTask}\r\n                                changeTaskStatus={changeStatus}\r\n                                removeTodolist={removeTodolist}\r\n                                changeTaskTitle={changeTaskTitle}\r\n                                changeTodolistTitle={changeTodolistTitle}\r\n                                // demo={demo}\r\n                            />\r\n                        </Paper>\r\n                    </Grid>\r\n                })\r\n            }\r\n        </Grid>}\r\n    </>\r\n}\r\n","E:\\react\\dragan wrap\\new-node\\tools-bar\\src\\ui\\views\\todo\\todo.tsx",["218","219","220","221","222"],"import React, {useCallback, useEffect} from 'react'\r\nimport {Button, IconButton} from '@material-ui/core'\r\nimport {Delete} from '@material-ui/icons'\r\nimport {useDispatch} from 'react-redux'\r\nimport {FilterValuesType, TodolistDomainType} from \"../../../bll/todolists-reducer\";\r\nimport {TaskStatuses, TaskType} from \"../../../bll/Api\";\r\nimport {EditableSpan} from \"../../components/common/EditableSpan\";\r\nimport {AddItemForm} from \"../../components/common/AddItemForm\";\r\nimport {Task} from \"./task\";\r\nimport { fetchTasksTC } from '../../../bll/tasksReduser';\r\n\r\ntype PropsType = {\r\n    todolist: TodolistDomainType\r\n    tasks: Array<TaskType>\r\n    changeFilter: (value: FilterValuesType, todolistId: string) => void\r\n    addTask: (title: string, todolistId: string) => void\r\n    changeTaskStatus: (id: string, status: TaskStatuses, todolistId: string) => void\r\n    changeTaskTitle: (taskId: string, newTitle: string, todolistId: string) => void\r\n    removeTask: (taskId: string, todolistId: string,task: TaskType) => void\r\n    removeTodolist: (id: string) => void\r\n    changeTodolistTitle: (id: string, newTitle: string) => void\r\n}\r\n\r\nexport const Todolist = React.memo(function ({ ...props}: PropsType) {\r\n    // console.log('Todolist called')\r\n\r\n    const dispatch = useDispatch()\r\n\r\n    useEffect(() => {\r\n        dispatch(fetchTasksTC(props.todolist.id))\r\n    }, [dispatch,props.todolist.id])\r\n\r\n    const addTask = useCallback((title: string) => {\r\n        props.addTask(title, props.todolist.id)\r\n    }, [props.addTask, props.todolist.id])\r\n\r\n    const removeTodolist = () => {\r\n        props.removeTodolist(props.todolist.id)\r\n    }\r\n    const changeTodolistTitle = useCallback((title: string) => {\r\n        props.changeTodolistTitle(props.todolist.id, title)\r\n    }, [props.todolist.id, props.changeTodolistTitle])\r\n\r\n    const onAllClickHandler = useCallback(() => props.changeFilter('all', props.todolist.id), [props.todolist.id, props.changeFilter])\r\n    const onActiveClickHandler = useCallback(() => props.changeFilter('active', props.todolist.id), [props.todolist.id, props.changeFilter])\r\n    const onCompletedClickHandler = useCallback(() => props.changeFilter('completed', props.todolist.id), [props.todolist.id, props.changeFilter])\r\n\r\n\r\n    let tasksForTodolist = props.tasks\r\n\r\n    if (props.todolist.filter === 'active') {\r\n        tasksForTodolist = props.tasks.filter(t => t.status === TaskStatuses.New)\r\n    }\r\n    if (props.todolist.filter === 'completed') {\r\n        tasksForTodolist = props.tasks.filter(t => t.status === TaskStatuses.Completed)\r\n    }\r\n    // console.log(props.tasks);\r\n    return <div>\r\n        <h3><EditableSpan value={props.todolist.title} onChange={changeTodolistTitle}/>\r\n            <IconButton onClick={removeTodolist} disabled={props.todolist.entityStatus === 'loading'}>\r\n                <Delete/>\r\n            </IconButton>\r\n        </h3>\r\n        <AddItemForm addItem={addTask} disabled={props.todolist.entityStatus === 'loading'}/>\r\n        <div>\r\n            {tasksForTodolist && tasksForTodolist.map(t => {\r\n\r\n                return(\r\n                <Task key={t.id} task={t} todolistId={props.todolist.id}\r\n                      removeTask={props.removeTask}\r\n                      changeTaskTitle={props.changeTaskTitle}\r\n                      changeTaskStatus={props.changeTaskStatus}\r\n                />)\r\n            }) }\r\n        </div>\r\n        <div style={{paddingTop: '10px'}}>\r\n            <Button variant={props.todolist.filter === 'all' ? 'outlined' : 'text'}\r\n                    onClick={onAllClickHandler}\r\n                    color={'default'}\r\n            >All\r\n            </Button>\r\n            <Button variant={props.todolist.filter === 'active' ? 'outlined' : 'text'}\r\n                    onClick={onActiveClickHandler}\r\n                    color={'primary'}>Active\r\n            </Button>\r\n            <Button variant={props.todolist.filter === 'completed' ? 'outlined' : 'text'}\r\n                    onClick={onCompletedClickHandler}\r\n                    color={'secondary'}>Completed\r\n            </Button>\r\n        </div>\r\n    </div>\r\n})\r\n\r\n\r\n","E:\\react\\dragan wrap\\new-node\\tools-bar\\src\\ui\\components\\dashboard\\Orders.jsx",[],"E:\\react\\dragan wrap\\new-node\\tools-bar\\src\\ui\\components\\dashboard\\Deposits.jsx",[],"E:\\react\\dragan wrap\\new-node\\tools-bar\\src\\ui\\components\\dashboard\\Chart.jsx",[],"E:\\react\\dragan wrap\\new-node\\tools-bar\\src\\ui\\components\\dashboard\\Title.jsx",[],"E:\\react\\dragan wrap\\new-node\\tools-bar\\src\\ui\\views\\groups\\group.tsx",["223"],"import React, {useCallback} from 'react';\r\nimport {useDispatch} from \"react-redux\";\r\nimport {NavLink} from \"react-router-dom\";\r\nimport {PATH} from \"../../route\";\r\nimport {groupUsersType, removeGroupsTC} from \"../../../bll/groupReduser\";\r\nimport TableCell from \"@material-ui/core/TableCell\";\r\nimport TableRow from \"@material-ui/core/TableRow\";\r\nimport BorderColorIcon from '@material-ui/icons/BorderColor';\r\nimport DeleteIcon from '@material-ui/icons/Delete';\r\n\r\n\r\ntype propsType = {\r\n    id: string\r\n    name: string\r\n    users?: groupUsersType[]\r\n}\r\nconst Group = React.memo((props: propsType) => {\r\n    const dispatch = useDispatch()\r\n    const deleteGroup = useCallback(() => {\r\n        dispatch(removeGroupsTC(props.id))\r\n    }, [props.id])\r\n    let user = props.users?.map(u => <div key={u.uid}>\r\n        {/*<p>{u.uid}</p>*/}\r\n        <span>{u.name}</span></div>)\r\n    return (<>\r\n            <TableRow key={props.id}>\r\n                <TableCell component=\"th\" scope=\"row\">{user}</TableCell>\r\n                <TableCell align=\"right\">\r\n                    {props.name}\r\n                </TableCell>\r\n                <TableCell align=\"right\">\r\n                    <NavLink to={PATH.PAGEGROUP.getUrl(props.id)}><BorderColorIcon/></NavLink>\r\n                    <DeleteIcon onClick={deleteGroup} color='primary'/>\r\n                </TableCell>\r\n            </TableRow>\r\n        </>\r\n    )\r\n})\r\n\r\nexport default Group;","E:\\react\\dragan wrap\\new-node\\tools-bar\\src\\utils\\error-utils.ts",[],"E:\\react\\dragan wrap\\new-node\\tools-bar\\src\\ui\\views\\todo\\task.tsx",["224","225","226"],"import React, {ChangeEvent, useCallback} from 'react'\r\nimport {Checkbox, IconButton} from '@material-ui/core'\r\nimport {Delete} from '@material-ui/icons'\r\nimport {EditableSpan} from \"../../components/common/EditableSpan\";\r\nimport {TaskStatuses, TaskType} from \"../../../bll/Api\";\r\n\r\ntype TaskPropsType = {\r\n    task: TaskType\r\n    todolistId: string\r\n    changeTaskStatus: (id: string, status: TaskStatuses, todolistId: string) => void\r\n    changeTaskTitle: (taskId: string, newTitle: string, todolistId: string) => void\r\n    removeTask: (taskId: string, todolistId: string,task: TaskType) => void\r\n}\r\nexport const Task = React.memo((props: TaskPropsType) => {\r\n    const onClickHandler = useCallback(() => {\r\n        debugger\r\n    return props.removeTask(props.task.id, props.todolistId,props.task)}, [props.task.id, props.todolistId]\r\n    );\r\n\r\n    const onChangeHandler = useCallback((e: ChangeEvent<HTMLInputElement>) => {\r\n        let newIsDoneValue = e.currentTarget.checked\r\n        props.changeTaskStatus(props.task.id, newIsDoneValue ? TaskStatuses.Completed : TaskStatuses.New, props.todolistId)\r\n    }, [props.task.id, props.todolistId]);\r\n\r\n    const onTitleChangeHandler = useCallback((newValue: string) => {\r\n        props.changeTaskTitle(props.task.id, newValue, props.todolistId)\r\n    }, [props.task.id, props.todolistId]);\r\n\r\n    return <div key={props.task.id} className={props.task.status === TaskStatuses.Completed ? 'is-done' : ''}>\r\n        <Checkbox\r\n            checked={props.task.status === TaskStatuses.Completed}\r\n            color=\"primary\"\r\n            onChange={onChangeHandler}\r\n        />\r\n\r\n        <EditableSpan value={props.task.title} onChange={onTitleChangeHandler}/>\r\n        <IconButton onClick={onClickHandler}>\r\n            <Delete/>\r\n        </IconButton>\r\n    </div>\r\n})\r\n","E:\\react\\dragan wrap\\new-node\\tools-bar\\src\\ui\\components\\common\\AddItemForm.tsx",[],"E:\\react\\dragan wrap\\new-node\\tools-bar\\src\\ui\\components\\common\\EditableSpan.tsx",[],"E:\\react\\dragan wrap\\new-node\\tools-bar\\src\\ui\\components\\common\\SmalAlert.tsx",["227"],"import React from 'react';\r\nimport Button from '@material-ui/core/Button';\r\nimport Snackbar from '@material-ui/core/Snackbar';\r\nimport MuiAlert, {AlertProps} from '@material-ui/lab/Alert';\r\nimport {makeStyles, Theme} from '@material-ui/core/styles';\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {AppRootStateType} from \"../../../bll/store\";\r\nimport {setAppErrorAC} from \"../../../bll/app-reducer\";\r\n\r\nfunction Alert(props: AlertProps) {\r\n    return <MuiAlert elevation={6} variant=\"filled\" {...props} />;\r\n}\r\n\r\nconst useStyles = makeStyles((theme: Theme) => ({\r\n    root: {\r\n        width: '100%',\r\n        '& > * + *': {\r\n            marginTop: theme.spacing(2),\r\n        },\r\n    },\r\n}));\r\n\r\nexport function SmallAlert() {\r\n    const message = useSelector<AppRootStateType, string | null>(state => state.app.error)\r\n    const dispatch = useDispatch()\r\n    const classes = useStyles()\r\n    const open = message !== null\r\n    // const [open, setOpen] = React.useState(false);\r\n    //\r\n    // const handleClick = () => {\r\n    //     setOpen(true);\r\n    // };\r\n    const handleClose = (event?: React.SyntheticEvent, reasons?: string) => {\r\n        if (reasons === 'clickaway') {\r\n            return\r\n        }\r\n        dispatch(setAppErrorAC(null))\r\n    }\r\n    return (\r\n        <div className={classes.root}>\r\n            <Snackbar open={open} autoHideDuration={6000} onClose={handleClose}>\r\n                <Alert onClose={handleClose} severity=\"success\">\r\n                    {message}\r\n                </Alert>\r\n            </Snackbar>\r\n            {/*<Alert severity=\"error\">This is an error message!</Alert>*/}\r\n            {/*<Alert severity=\"warning\">This is a warning message!</Alert>*/}\r\n            {/*<Alert severity=\"info\">This is an information message!</Alert>*/}\r\n            {/*<Alert severity=\"success\">This is a success message!</Alert>*/}\r\n        </div>\r\n    );\r\n}","E:\\react\\dragan wrap\\new-node\\tools-bar\\src\\ui\\views\\pages\\page500\\Page500.jsx",[],{"ruleId":"228","replacedBy":"229"},{"ruleId":"230","replacedBy":"231"},{"ruleId":"232","severity":1,"message":"233","line":4,"column":9,"nodeType":"234","messageId":"235","endLine":4,"endColumn":17},{"ruleId":"232","severity":1,"message":"236","line":21,"column":11,"nodeType":"234","messageId":"235","endLine":21,"endColumn":17},{"ruleId":"237","severity":1,"message":"238","line":1,"column":9,"nodeType":"234","messageId":"235","endLine":1,"endColumn":17},{"ruleId":"237","severity":1,"message":"239","line":2,"column":9,"nodeType":"234","messageId":"235","endLine":2,"endColumn":29},{"ruleId":"237","severity":1,"message":"240","line":2,"column":63,"nodeType":"234","messageId":"235","endLine":2,"endColumn":82},{"ruleId":"237","severity":1,"message":"241","line":106,"column":10,"nodeType":"234","messageId":"235","endLine":106,"endColumn":19},{"ruleId":"237","severity":1,"message":"239","line":2,"column":9,"nodeType":"234","messageId":"235","endLine":2,"endColumn":29},{"ruleId":"237","severity":1,"message":"242","line":2,"column":31,"nodeType":"234","messageId":"235","endLine":2,"endColumn":55},{"ruleId":"237","severity":1,"message":"243","line":1,"column":9,"nodeType":"234","messageId":"235","endLine":1,"endColumn":18},{"ruleId":"244","severity":1,"message":"245","line":25,"column":45,"nodeType":"246","messageId":"247","endLine":25,"endColumn":47},{"ruleId":"237","severity":1,"message":"243","line":1,"column":9,"nodeType":"234","messageId":"235","endLine":1,"endColumn":18},{"ruleId":"237","severity":1,"message":"248","line":2,"column":20,"nodeType":"234","messageId":"235","endLine":2,"endColumn":25},{"ruleId":"237","severity":1,"message":"249","line":4,"column":9,"nodeType":"234","messageId":"235","endLine":4,"endColumn":31},{"ruleId":"232","severity":1,"message":"233","line":2,"column":15,"nodeType":"234","messageId":"235","endLine":2,"endColumn":23},{"ruleId":"232","severity":1,"message":"250","line":8,"column":9,"nodeType":"234","messageId":"235","endLine":8,"endColumn":21},{"ruleId":"228","replacedBy":"229"},{"ruleId":"230","replacedBy":"231"},{"ruleId":"232","severity":1,"message":"251","line":6,"column":3,"nodeType":"234","messageId":"235","endLine":6,"endColumn":14},{"ruleId":"232","severity":1,"message":"252","line":20,"column":8,"nodeType":"234","messageId":"235","endLine":20,"endColumn":17},{"ruleId":"232","severity":1,"message":"253","line":32,"column":9,"nodeType":"234","messageId":"235","endLine":32,"endColumn":25},{"ruleId":"232","severity":1,"message":"254","line":33,"column":9,"nodeType":"234","messageId":"235","endLine":33,"endColumn":26},{"ruleId":"232","severity":1,"message":"255","line":131,"column":7,"nodeType":"234","messageId":"235","endLine":131,"endColumn":18},{"ruleId":"237","severity":1,"message":"256","line":3,"column":9,"nodeType":"234","messageId":"235","endLine":3,"endColumn":24},{"ruleId":"237","severity":1,"message":"257","line":6,"column":8,"nodeType":"234","messageId":"235","endLine":6,"endColumn":10},{"ruleId":"237","severity":1,"message":"258","line":8,"column":8,"nodeType":"234","messageId":"235","endLine":8,"endColumn":18},{"ruleId":"237","severity":1,"message":"259","line":26,"column":11,"nodeType":"234","messageId":"235","endLine":26,"endColumn":22},{"ruleId":"237","severity":1,"message":"260","line":31,"column":19,"nodeType":"234","messageId":"235","endLine":31,"endColumn":23},{"ruleId":"261","severity":1,"message":"262","line":45,"column":8,"nodeType":"263","endLine":45,"endColumn":18,"suggestions":"264"},{"ruleId":"261","severity":1,"message":"262","line":49,"column":8,"nodeType":"263","endLine":49,"endColumn":18,"suggestions":"265"},{"ruleId":"237","severity":1,"message":"266","line":14,"column":8,"nodeType":"234","messageId":"235","endLine":14,"endColumn":22},{"ruleId":"237","severity":1,"message":"267","line":15,"column":8,"nodeType":"234","messageId":"235","endLine":15,"endColumn":13},{"ruleId":"237","severity":1,"message":"268","line":16,"column":8,"nodeType":"234","messageId":"235","endLine":16,"endColumn":13},{"ruleId":"237","severity":1,"message":"269","line":17,"column":8,"nodeType":"234","messageId":"235","endLine":17,"endColumn":17},{"ruleId":"237","severity":1,"message":"270","line":18,"column":8,"nodeType":"234","messageId":"235","endLine":18,"endColumn":16},{"ruleId":"237","severity":1,"message":"271","line":19,"column":8,"nodeType":"234","messageId":"235","endLine":19,"endColumn":17},{"ruleId":"237","severity":1,"message":"272","line":20,"column":8,"nodeType":"234","messageId":"235","endLine":20,"endColumn":17},{"ruleId":"237","severity":1,"message":"273","line":24,"column":7,"nodeType":"234","messageId":"235","endLine":24,"endColumn":16},{"ruleId":"261","severity":1,"message":"274","line":42,"column":8,"nodeType":"263","endLine":42,"endColumn":10,"suggestions":"275"},{"ruleId":"232","severity":1,"message":"276","line":7,"column":8,"nodeType":"234","messageId":"235","endLine":7,"endColumn":17},{"ruleId":"237","severity":1,"message":"277","line":1,"column":16,"nodeType":"234","messageId":"235","endLine":1,"endColumn":27},{"ruleId":"261","severity":1,"message":"278","line":67,"column":8,"nodeType":"263","endLine":67,"endColumn":28,"suggestions":"279"},{"ruleId":"237","severity":1,"message":"233","line":4,"column":9,"nodeType":"234","messageId":"235","endLine":4,"endColumn":17},{"ruleId":"237","severity":1,"message":"280","line":7,"column":5,"nodeType":"234","messageId":"235","endLine":7,"endColumn":18},{"ruleId":"237","severity":1,"message":"281","line":10,"column":5,"nodeType":"234","messageId":"235","endLine":10,"endColumn":21},{"ruleId":"237","severity":1,"message":"282","line":30,"column":11,"nodeType":"234","messageId":"235","endLine":30,"endColumn":21},{"ruleId":"261","severity":1,"message":"274","line":40,"column":8,"nodeType":"263","endLine":40,"endColumn":10,"suggestions":"283"},{"ruleId":"261","severity":1,"message":"274","line":50,"column":8,"nodeType":"263","endLine":50,"endColumn":10,"suggestions":"284"},{"ruleId":"261","severity":1,"message":"274","line":56,"column":8,"nodeType":"263","endLine":56,"endColumn":10,"suggestions":"285"},{"ruleId":"261","severity":1,"message":"286","line":61,"column":8,"nodeType":"263","endLine":61,"endColumn":10,"suggestions":"287"},{"ruleId":"261","severity":1,"message":"286","line":65,"column":8,"nodeType":"263","endLine":65,"endColumn":18,"suggestions":"288"},{"ruleId":"261","severity":1,"message":"286","line":35,"column":8,"nodeType":"263","endLine":35,"endColumn":42,"suggestions":"289"},{"ruleId":"261","severity":1,"message":"286","line":42,"column":8,"nodeType":"263","endLine":42,"endColumn":54,"suggestions":"290"},{"ruleId":"261","severity":1,"message":"286","line":44,"column":95,"nodeType":"263","endLine":44,"endColumn":134,"suggestions":"291"},{"ruleId":"261","severity":1,"message":"286","line":45,"column":101,"nodeType":"263","endLine":45,"endColumn":140,"suggestions":"292"},{"ruleId":"261","severity":1,"message":"286","line":46,"column":107,"nodeType":"263","endLine":46,"endColumn":146,"suggestions":"293"},{"ruleId":"261","severity":1,"message":"274","line":21,"column":8,"nodeType":"263","endLine":21,"endColumn":18,"suggestions":"294"},{"ruleId":"261","severity":1,"message":"286","line":17,"column":64,"nodeType":"263","endLine":17,"endColumn":97,"suggestions":"295"},{"ruleId":"261","severity":1,"message":"286","line":23,"column":8,"nodeType":"263","endLine":23,"endColumn":41,"suggestions":"296"},{"ruleId":"261","severity":1,"message":"286","line":27,"column":8,"nodeType":"263","endLine":27,"endColumn":41,"suggestions":"297"},{"ruleId":"237","severity":1,"message":"298","line":2,"column":8,"nodeType":"234","messageId":"235","endLine":2,"endColumn":14},"no-native-reassign",["299"],"no-negated-in-lhs",["300"],"no-unused-vars","'Redirect' is defined but never used.","Identifier","unusedVar","'status' is assigned a value but never used.","@typescript-eslint/no-unused-vars","'Dispatch' is defined but never used.","'handleServerAppError' is defined but never used.","'UpdateTaskModelType' is defined but never used.","'completed' is assigned a value but never used.","'handleServerNetworkError' is defined but never used.","'AnyAction' is defined but never used.","eqeqeq","Expected '!==' and instead saw '!='.","BinaryExpression","unexpected","'Users' is defined but never used.","'getAllUsersFirestoreTC' is defined but never used.","'createUserTC' is defined but never used.","'CCardFooter' is defined but never used.","'Dashboard' is defined but never used.","'AppRootStateType' is defined but never used.","'RequestStatusType' is defined but never used.","'GroupsUsers' is assigned a value but never used.","'UpdatedTaskType' is defined but never used.","'cl' is defined but never used.","'DenseTable' is defined but never used.","'deleteGroup' is assigned a value but never used.","'user' is assigned a value but never used.","react-hooks/exhaustive-deps","React Hook useCallback has a missing dependency: 'id'. Either include it or remove the dependency array.","ArrayExpression",["301"],["302"],"'TableContainer' is defined but never used.","'Paper' is defined but never used.","'Table' is defined but never used.","'TableHead' is defined but never used.","'TableRow' is defined but never used.","'TableCell' is defined but never used.","'TableBody' is defined but never used.","'useStyles' is assigned a value but never used.","React Hook useCallback has a missing dependency: 'dispatch'. Either include it or remove the dependency array.",["303"],"'Container' is defined but never used.","'ChangeEvent' is defined but never used.","React Hook useCallback has missing dependencies: 'dispatch' and 'props.uid'. Either include them or remove the dependency array.",["304"],"'addTodolistTC' is defined but never used.","'removeTodolistTC' is defined but never used.","'isLoggedIn' is assigned a value but never used.",["305"],["306"],["307"],"React Hook useCallback has a missing dependency: 'props'. Either include it or remove the dependency array. However, 'props' will change when *any* prop changes, so the preferred fix is to destructure the 'props' object outside of the useCallback call and refer to those specific props inside useCallback.",["308"],["309"],["310"],["311"],["312"],["313"],["314"],["315"],["316"],["317"],["318"],"'Button' is defined but never used.","no-global-assign","no-unsafe-negation",{"desc":"319","fix":"320"},{"desc":"319","fix":"321"},{"desc":"322","fix":"323"},{"desc":"324","fix":"325"},{"desc":"322","fix":"326"},{"desc":"322","fix":"327"},{"desc":"322","fix":"328"},{"desc":"329","fix":"330"},{"desc":"329","fix":"331"},{"desc":"329","fix":"332"},{"desc":"329","fix":"333"},{"desc":"329","fix":"334"},{"desc":"329","fix":"335"},{"desc":"329","fix":"336"},{"desc":"337","fix":"338"},{"desc":"329","fix":"339"},{"desc":"329","fix":"340"},{"desc":"329","fix":"341"},"Update the dependencies array to be: [dispatch, id]",{"range":"342","text":"343"},{"range":"344","text":"343"},"Update the dependencies array to be: [dispatch]",{"range":"345","text":"346"},"Update the dependencies array to be: [dispatch, email, name, phone, props.uid]",{"range":"347","text":"348"},{"range":"349","text":"346"},{"range":"350","text":"346"},{"range":"351","text":"346"},"Update the dependencies array to be: [props]",{"range":"352","text":"353"},{"range":"354","text":"353"},{"range":"355","text":"353"},{"range":"356","text":"353"},{"range":"357","text":"353"},{"range":"358","text":"353"},{"range":"359","text":"353"},"Update the dependencies array to be: [dispatch, props.id]",{"range":"360","text":"361"},{"range":"362","text":"353"},{"range":"363","text":"353"},{"range":"364","text":"353"},[1723,1733],"[dispatch, id]",[1924,1934],[1376,1378],"[dispatch]",[2625,2645],"[dispatch, email, name, phone, props.uid]",[1756,1758],[2249,2251],[2568,2570],[2742,2744],"[props]",[2889,2899],[1508,1542],[1773,1819],[1918,1957],[2060,2099],[2208,2247],[733,743],"[dispatch, props.id]",[775,808],[1087,1120],[1277,1310]]