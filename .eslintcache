[{"E:\\react\\dragan wrap\\new-node\\tools-bar\\src\\index.tsx":"1","E:\\react\\dragan wrap\\new-node\\tools-bar\\src\\reportWebVitals.ts":"2","E:\\react\\dragan wrap\\new-node\\tools-bar\\src\\bll\\store.ts":"3","E:\\react\\dragan wrap\\new-node\\tools-bar\\src\\App.jsx":"4","E:\\react\\dragan wrap\\new-node\\tools-bar\\src\\bll\\appReduserOld.js":"5","E:\\react\\dragan wrap\\new-node\\tools-bar\\src\\bll\\userReduser.ts":"6","E:\\react\\dragan wrap\\new-node\\tools-bar\\src\\bll\\app-reducer.ts":"7","E:\\react\\dragan wrap\\new-node\\tools-bar\\src\\bll\\tasksReduser.ts":"8","E:\\react\\dragan wrap\\new-node\\tools-bar\\src\\bll\\authReducer.ts":"9","E:\\react\\dragan wrap\\new-node\\tools-bar\\src\\bll\\todolists-reducer.ts":"10","E:\\react\\dragan wrap\\new-node\\tools-bar\\src\\bll\\groupReduser.ts":"11","E:\\react\\dragan wrap\\new-node\\tools-bar\\src\\ui\\views\\pages\\login\\Login.js":"12","E:\\react\\dragan wrap\\new-node\\tools-bar\\src\\ui\\views\\pages\\register\\Register.js":"13","E:\\react\\dragan wrap\\new-node\\tools-bar\\src\\ui\\components\\dashboard\\Dashboard.jsx":"14","E:\\react\\dragan wrap\\new-node\\tools-bar\\src\\bll\\Api.ts":"15","E:\\react\\dragan wrap\\new-node\\tools-bar\\src\\ui\\route.ts":"16","E:\\react\\dragan wrap\\new-node\\tools-bar\\src\\ui\\views\\groups\\groups.tsx":"17","E:\\react\\dragan wrap\\new-node\\tools-bar\\src\\ui\\views\\groups\\groupPage.tsx":"18","E:\\react\\dragan wrap\\new-node\\tools-bar\\src\\ui\\views\\users\\users.tsx":"19","E:\\react\\dragan wrap\\new-node\\tools-bar\\src\\ui\\views\\groupUsers\\groupsUsers.tsx":"20","E:\\react\\dragan wrap\\new-node\\tools-bar\\src\\ui\\components\\dashboard\\listItems.jsx":"21","E:\\react\\dragan wrap\\new-node\\tools-bar\\src\\ui\\views\\starting.jsx":"22","E:\\react\\dragan wrap\\new-node\\tools-bar\\src\\ui\\views\\pages\\page404\\Page404.jsx":"23","E:\\react\\dragan wrap\\new-node\\tools-bar\\src\\ui\\views\\users\\user.tsx":"24","E:\\react\\dragan wrap\\new-node\\tools-bar\\src\\ui\\views\\todo\\todoList.tsx":"25","E:\\react\\dragan wrap\\new-node\\tools-bar\\src\\ui\\views\\todo\\todo.tsx":"26","E:\\react\\dragan wrap\\new-node\\tools-bar\\src\\ui\\common\\AddItemForm.tsx":"27","E:\\react\\dragan wrap\\new-node\\tools-bar\\src\\ui\\common\\EditableSpan.tsx":"28","E:\\react\\dragan wrap\\new-node\\tools-bar\\src\\ui\\components\\dashboard\\Orders.jsx":"29","E:\\react\\dragan wrap\\new-node\\tools-bar\\src\\ui\\components\\dashboard\\Deposits.jsx":"30","E:\\react\\dragan wrap\\new-node\\tools-bar\\src\\ui\\components\\dashboard\\Chart.jsx":"31","E:\\react\\dragan wrap\\new-node\\tools-bar\\src\\ui\\components\\dashboard\\Title.jsx":"32","E:\\react\\dragan wrap\\new-node\\tools-bar\\src\\ui\\views\\groups\\group.tsx":"33"},{"size":1183,"mtime":1614441416029,"results":"34","hashOfConfig":"35"},{"size":425,"mtime":1612565314468,"results":"36","hashOfConfig":"35"},{"size":851,"mtime":1615932671057,"results":"37","hashOfConfig":"35"},{"size":1740,"mtime":1615935048771,"results":"38","hashOfConfig":"35"},{"size":301,"mtime":1612639101681,"results":"39","hashOfConfig":"35"},{"size":6556,"mtime":1616251967847,"results":"40","hashOfConfig":"35"},{"size":2383,"mtime":1613449007035,"results":"41","hashOfConfig":"35"},{"size":6716,"mtime":1616195065760,"results":"42","hashOfConfig":"35"},{"size":1999,"mtime":1613449590988,"results":"43","hashOfConfig":"35"},{"size":5840,"mtime":1616201374435,"results":"44","hashOfConfig":"35"},{"size":3423,"mtime":1616178412760,"results":"45","hashOfConfig":"35"},{"size":3822,"mtime":1615124439273,"results":"46","hashOfConfig":"35"},{"size":3525,"mtime":1614524390187,"results":"47","hashOfConfig":"35"},{"size":7853,"mtime":1615899140131,"results":"48","hashOfConfig":"35"},{"size":7419,"mtime":1616200374546,"results":"49","hashOfConfig":"35"},{"size":397,"mtime":1615894274958,"results":"50","hashOfConfig":"35"},{"size":2882,"mtime":1616247642949,"results":"51","hashOfConfig":"35"},{"size":1371,"mtime":1616185695786,"results":"52","hashOfConfig":"35"},{"size":1887,"mtime":1615985065150,"results":"53","hashOfConfig":"35"},{"size":624,"mtime":1614771098200,"results":"54","hashOfConfig":"35"},{"size":3728,"mtime":1615127732352,"results":"55","hashOfConfig":"35"},{"size":1533,"mtime":1612630345203,"results":"56","hashOfConfig":"35"},{"size":1294,"mtime":1612304335247,"results":"57","hashOfConfig":"35"},{"size":5502,"mtime":1615947609544,"results":"58","hashOfConfig":"35"},{"size":4021,"mtime":1616182572307,"results":"59","hashOfConfig":"35"},{"size":4213,"mtime":1616190883763,"results":"60","hashOfConfig":"35"},{"size":1595,"mtime":1615741479860,"results":"61","hashOfConfig":"35"},{"size":943,"mtime":1614533567650,"results":"62","hashOfConfig":"35"},{"size":2351,"mtime":1612111362000,"results":"63","hashOfConfig":"35"},{"size":847,"mtime":1612111362000,"results":"64","hashOfConfig":"35"},{"size":1429,"mtime":1612623836152,"results":"65","hashOfConfig":"35"},{"size":356,"mtime":1612625632421,"results":"66","hashOfConfig":"35"},{"size":1602,"mtime":1616249457203,"results":"67","hashOfConfig":"35"},{"filePath":"68","messages":"69","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"70"},"zqq5rk",{"filePath":"71","messages":"72","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"70"},{"filePath":"73","messages":"74","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"70"},{"filePath":"75","messages":"76","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"77","usedDeprecatedRules":"78"},{"filePath":"79","messages":"80","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"81","usedDeprecatedRules":"78"},{"filePath":"82","messages":"83","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"70"},{"filePath":"84","messages":"85","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"86","usedDeprecatedRules":"70"},{"filePath":"87","messages":"88","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"89","usedDeprecatedRules":"70"},{"filePath":"90","messages":"91","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"92","usedDeprecatedRules":"70"},{"filePath":"93","messages":"94","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"95","usedDeprecatedRules":"70"},{"filePath":"96","messages":"97","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"98","usedDeprecatedRules":"70"},{"filePath":"99","messages":"100","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"101","usedDeprecatedRules":"78"},{"filePath":"102","messages":"103","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"104","usedDeprecatedRules":"78"},{"filePath":"105","messages":"106","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"107","usedDeprecatedRules":"78"},{"filePath":"108","messages":"109","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"110","usedDeprecatedRules":"70"},{"filePath":"111","messages":"112","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"70"},{"filePath":"113","messages":"114","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"115","usedDeprecatedRules":"70"},{"filePath":"116","messages":"117","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"118","usedDeprecatedRules":"70"},{"filePath":"119","messages":"120","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"121","usedDeprecatedRules":"70"},{"filePath":"122","messages":"123","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"70"},{"filePath":"124","messages":"125","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"78"},{"filePath":"126","messages":"127","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"128","usedDeprecatedRules":"78"},{"filePath":"129","messages":"130","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"78"},{"filePath":"131","messages":"132","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"133","usedDeprecatedRules":"70"},{"filePath":"134","messages":"135","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"136","usedDeprecatedRules":"70"},{"filePath":"137","messages":"138","errorCount":0,"warningCount":8,"fixableErrorCount":0,"fixableWarningCount":0,"source":"139","usedDeprecatedRules":"70"},{"filePath":"140","messages":"141","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"142","usedDeprecatedRules":"70"},{"filePath":"143","messages":"144","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"70"},{"filePath":"145","messages":"146","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"147","messages":"148","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"149","messages":"150","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"151","messages":"152","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"153","messages":"154","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"E:\\react\\dragan wrap\\new-node\\tools-bar\\src\\index.tsx",[],["155","156"],"E:\\react\\dragan wrap\\new-node\\tools-bar\\src\\reportWebVitals.ts",[],"E:\\react\\dragan wrap\\new-node\\tools-bar\\src\\bll\\store.ts",[],"E:\\react\\dragan wrap\\new-node\\tools-bar\\src\\App.jsx",["157","158"],"import React, {useEffect} from 'react'\nimport './App.css'\nimport Dashboard from \"./ui/components/dashboard/Dashboard\";\nimport {Redirect, Route, Switch} from \"react-router-dom\"\nimport {useDispatch, useSelector} from \"react-redux\";\nimport {authTC} from \"./bll/userReduser\";\n// import Login from \"./ui/views/pages/login/Login\";\n\n\n// Pages\nconst Login = React.lazy(() => import('./ui/views/pages/login/Login'));\nconst Register = React.lazy(() => import('./ui/views/pages/register/Register'));\n// const Page404 = React.lazy(() => import('./views/pages/page404/Page404'));\n// const Page500 = React.lazy(() => import('./views/pages/page500/Page500'));\nfunction App() {\n\n    const dispatch = useDispatch()\n    useEffect(() => {\n        dispatch(authTC())\n    }, [dispatch])\n    const status = useSelector(state => state.users.status)\n   // if (!status) {return <Redirect to={'/login'}/>}\n    // else {return <Redirect to={'/groupsUsers'}/>}\n\n    return (\n        <div className=\"App\">\n            <React.Suspense fallback={'...loading'}>\n                <Switch>\n                    <Route exact path=\"/login\" render={() => <Login/>}/>\n                    <Route exact path=\"/register\" render={() => <Register/>}/>\n                    <Route exact path=\"/dashboard\" render={() => <Dashboard/>}/>\n                    {/*<Route exact path=\"/404\" name=\"Page 404\" render={props => <Page404 {...props}/>} />*/}\n                    {/*<Route exact path=\"/500\" name=\"Page 500\" render={props => <Page500 {...props}/>} />*/}\n                    {/*<Route path=\"/\" name=\"Home\" render={props => <TheLayout {...props}/>} />*/}\n                    <Dashboard/>\n                </Switch>\n            </React.Suspense>\n        </div>\n    )\n}\n\nexport default App;\n",["159","160"],"E:\\react\\dragan wrap\\new-node\\tools-bar\\src\\bll\\appReduserOld.js",["161"],"import {Dispatch} from \"redux\";\n//import * as admin from 'firebase-admin';\n\nconst initialState = {\n  token: ''\n}\n\nexport const changeStateReducer = (state = initialState, { type, ...rest }) => {\n  switch (type) {\n    case 'set':\n      return {...state, ...rest }\n    default:\n      return state\n  }\n}\n","E:\\react\\dragan wrap\\new-node\\tools-bar\\src\\bll\\userReduser.ts",[],"E:\\react\\dragan wrap\\new-node\\tools-bar\\src\\bll\\app-reducer.ts",["162","163"],"import {Dispatch} from \"redux\";\r\nimport {handleServerAppError} from \"../utils/error-utils\";\r\n\r\nconst initialState: InitialStateType = {\r\n    status: 'idle',\r\n    error: null,\r\n    isInitialized: false\r\n}\r\n\r\nexport const appReducer = (state: InitialStateType = initialState, action: ActionsType): InitialStateType => {\r\n    switch (action.type) {\r\n        case 'APP/SET-STATUS':\r\n            return {...state, status: action.status}\r\n        case 'APP/SET-ERROR':\r\n            return {...state, error: action.error}\r\n        case 'IS-INIT':\r\n            return {...state, isInitialized: action.isInitialized}\r\n        default:\r\n            return {...state}\r\n    }\r\n}\r\n\r\nexport type RequestStatusType = 'idle' | 'loading' | 'succeeded' | 'failed'\r\nexport type InitialStateType = {\r\n    // происходит ли сейчас взаимодействие с сервером\r\n    status: RequestStatusType\r\n    // если ошибка какая-то глобальная произойдёт - мы запишем текст ошибки сюда\r\n    error: string | null\r\n    isInitialized: boolean\r\n}\r\n\r\nexport const setAppErrorAC = (error: string | null) => ({type: 'APP/SET-ERROR', error} as const)\r\nexport const setAppStatusAC = (status: RequestStatusType) => ({type: 'APP/SET-STATUS', status} as const)\r\nexport const setIsInitializedAC = (isInitialized: boolean) => ({type: 'IS-INIT', isInitialized} as const)\r\nexport type SetAppErrorActionType = ReturnType<typeof setAppErrorAC>\r\nexport type SetAppStatusActionType = ReturnType<typeof setAppStatusAC>\r\nexport type setIsInitializedACType = ReturnType<typeof setIsInitializedAC>\r\n\r\n\r\n// export const initializeAppTC = () => (dispatch: Dispatch) => {\r\n//     authAPI.me()\r\n//         .then(res => {\r\n//         // debugger\r\n//         if (res.data.resultCode === 0) {\r\n//             dispatch(setIsLoggedInAC(true));\r\n//\r\n//          }\r\n//         else {\r\n//             // debugger\r\n//             // // handleServerAppError(err, dispatch);\r\n//         }\r\n//     })\r\n//         .catch((err) => {\r\n//             handleServerAppError(err, dispatch);\r\n//             dispatch(setIsInitializedAC(true))\r\n//             // throw new Error(err.message)\r\n//         })\r\n//     dispatch(setIsInitializedAC(true))\r\n// }\r\n\r\ntype ActionsType =\r\n    | SetAppErrorActionType\r\n    | SetAppStatusActionType\r\n    | setIsInitializedACType\r\n","E:\\react\\dragan wrap\\new-node\\tools-bar\\src\\bll\\tasksReduser.ts",["164","165","166"],"import {Dispatch} from \"redux\";\nimport {TaskPriorities, TaskStatuses, TaskType, todolistsAPI, UpdateTaskModelType, Users} from \"./Api\";\nimport {AddTodolistActionType, RemoveTodolistActionType, SetTodolistsActionType} from \"./todolists-reducer\";\nimport {SetAppErrorActionType, setAppStatusAC, SetAppStatusActionType} from \"./app-reducer\";\n\n\nexport type UpdateDomainTaskModelType = {\n    title?: string\n    description?: string\n    status?: TaskStatuses\n    priority?: TaskPriorities\n    startDate?: string\n    deadline?: string\n}\nexport type TasksStateType = {\n    [key: string]: Array<TaskType>\n}\ntype ActionsType =\n    | ReturnType<typeof removeTaskAC>\n    | ReturnType<typeof addTaskAC>\n    | ReturnType<typeof updateTaskAC>\n    | AddTodolistActionType\n    | RemoveTodolistActionType\n    | SetTodolistsActionType\n    | ReturnType<typeof setTasksAC>\ntype ThunkDispatch = Dispatch<ActionsType | SetAppStatusActionType | SetAppErrorActionType>\n\n\nconst initialState: TasksStateType = {}\n\nexport const tasksReducer = (state: TasksStateType = initialState, action: ActionsType): TasksStateType => {\n    switch (action.type) {\n        case 'REMOVE-TASK':\n            return {...state, [action.todolistId]: state[action.todolistId].filter(t => t.id != action.taskId)}\n        case 'ADD-TASK':\n            return {...state, [action.task.todoListId]: [action.task, ...state[action.task.todoListId]]}\n        case 'UPDATE-TASK':\n            return {\n                ...state,\n                [action.todolistId]: state[action.todolistId]\n                    .map(t => t.id === action.taskId ? {...t, ...action.model} : t)\n            }\n        case 'ADD-TODOLIST':\n            // @ts-ignore\n            return {...state, [action.todolist.id]: []}\n        case 'REMOVE-TODOLIST':\n            const copyState = {...state}\n            delete copyState[action.id]\n            return copyState\n        case 'SET-TODOLISTS': {\n            const copyState = {...state}\n            action.todolists.forEach(tl => {\n                copyState[tl.id] = []\n            })\n            return copyState\n        }\n        case 'SET-TASKS':\n            return {...state, [action.todolistId]: action.tasks}\n        default:\n            return state\n    }\n}\n\n// actions\nexport const removeTaskAC = (taskId: string, todolistId: string) =>\n    ({type: 'REMOVE-TASK', taskId, todolistId} as const)\nexport const addTaskAC = (task: TaskType) =>\n    ({type: 'ADD-TASK', task} as const)\nexport const updateTaskAC = (taskId: string, model: UpdateDomainTaskModelType, todolistId: string) =>\n    ({type: 'UPDATE-TASK', model, todolistId, taskId} as const)\nexport const setTasksAC = (tasks: Array<TaskType>, todolistId: string) =>\n    ({type: 'SET-TASKS', tasks, todolistId} as const)\n\n// thunks\nexport const fetchTasksTC = (todolistId: string) => (dispatch: Dispatch<ActionsType | SetAppStatusActionType>) => {\n    dispatch(setAppStatusAC('loading'))\n    todolistsAPI.getTasks(todolistId)\n        .then((res) => {\n            const tasks = res.data.items\n            dispatch(setTasksAC(tasks, todolistId))\n            dispatch(setAppStatusAC('succeeded'))\n        })\n}\n// export const removeTaskTC = (taskId: string, todolistId: string) => (dispatch: Dispatch<ActionsType>) => {\n//     todolistsAPI.deleteTask(todolistId, taskId)\n//         .then(res => {\n//             const action = removeTaskAC(taskId, todolistId)\n//             dispatch(action)\n//         })\n// }\n// export const addTaskTC = (title: string, todolistId: string) => (dispatch: Dispatch<ActionsType | SetAppErrorActionType | SetAppStatusActionType>) => {\n//     dispatch(setAppStatusAC('loading'))\n//     todolistsAPI.createTask(todolistId, title)\n//         .then(res => {\n//             if (res.data.resultCode === 0) {\n//                 const task = res.data.data.item\n//                 const action = addTaskAC(task)\n//                 dispatch(action)\n//                 dispatch(setAppStatusAC('succeeded'))\n//             } else {\n//                 handleServerAppError(res.data, dispatch);\n//             }\n//         })\n//         .catch((error) => {\n//             handleServerNetworkError(error, dispatch)\n//         })\n// }\n// export const updateTaskTC = (taskId: string, domainModel: UpdateDomainTaskModelType, todolistId: string) =>\n//     (dispatch: ThunkDispatch, getState: () => AppRootStateType) => {\n//         const state = getState()\n//         const task = state.tasks[todolistId].find(t => t.id === taskId)\n//         if (!task) {\n//             //throw new Error(\"task not found in the state\");\n//             console.warn('task not found in the state')\n//             return\n//         }\n//\n//         const apiModel: UpdateTaskModelType = {\n//             deadline: task.deadline,\n//             description: task.description,\n//             priority: task.priority,\n//             startDate: task.startDate,\n//             title: task.title,\n//             status: task.status,\n//             ...domainModel\n//         }\n//\n//         todolistsAPI.updateTask(todolistId, taskId, apiModel)\n//             .then(res => {\n//                 if (res.data.resultCode === 0) {\n//                     const action = updateTaskAC(taskId, domainModel, todolistId)\n//                     dispatch(action)\n//                 } else {\n//                     handleServerAppError(res.data, dispatch);\n//                 }\n//             })\n//             .catch((error) => {\n//                 handleServerNetworkError(error, dispatch);\n//             })\n//     }\n\n\nexport const setUsersAC = (payload: any) => ({type: 'SET-USERS', payload} as const)\nexport const setGroupsAC = (payload: any) => ({type: 'SET-GROUPS', payload} as const)\nexport const addGroupsAC = (payload: any) => ({type: 'ADD-GROUPS', payload} as const)\n//export const setUsersTC = (payload:any) =>({type: 'SET-USERS',payload}as const)\n// export const setTasksTC = () => (dispatch:Dispatch) =>{\n//   const tasks =firebase.database().ref('tasks')\n//   tasks.on('value',(el)=>{\n//     dispatch(setUsers(el.val()))\n//     // let aaa = el.val()\n//     // console.log(aaa);\n//   })\n// }\nexport const setUsersTC = () => (dispatch: Dispatch) => {\n    Users.getAllUsers()\n        .then(res => {\n                dispatch(setUsersAC(res.data.users))\n            }\n        )\n}\nexport const setTasksTC = () => (dispatch: Dispatch) => {\n    Users.getAllUsers()\n        .then(res => {\n                dispatch(setUsersAC(res.data.users))\n            }\n        )\n}\n// export const addGroups = (id: string, name: string) => (dispatch: Dispatch) => {\n//     debugger\n//     Users.addGroup(id, name)\n//         .then(res => {\n//             debugger\n//             dispatch(setGroupsAC(res.data))\n//         })\n// }","E:\\react\\dragan wrap\\new-node\\tools-bar\\src\\bll\\authReducer.ts",["167","168"],"import { Dispatch } from 'redux'\r\nimport {handleServerAppError, handleServerNetworkError} from \"../utils/error-utils\"\r\nimport {LoginParamsType} from \"./Api\";\r\nimport {SetAppErrorActionType, setAppStatusAC, SetAppStatusActionType} from \"./app-reducer\";\r\n\r\nconst initialState = {\r\n    isLoggedIn: false\r\n}\r\ntype InitialStateType = typeof initialState\r\n\r\nexport const authReducer = (state: InitialStateType = initialState, action: ActionsType): InitialStateType => {\r\n    switch (action.type) {\r\n        case 'login/SET-IS-LOGGED-IN':\r\n            return {...state, isLoggedIn: action.value}\r\n        default:\r\n            return state\r\n    }\r\n}\r\n// actions\r\nexport const setIsLoggedInAC = (value: boolean) =>\r\n    ({type: 'login/SET-IS-LOGGED-IN', value} as const)\r\n\r\n// thunks\r\nexport const loginTC = (data: LoginParamsType) => (dispatch: Dispatch<ActionsType>) => {\r\n    dispatch(setAppStatusAC('loading'))\r\n    // authAPI.login(data).\r\n    //     then(res=>{\r\n    //     if (res.data.resultCode === 0) {\r\n    //         dispatch(setIsLoggedInAC(true))\r\n    //         dispatch(setAppStatusAC('succeeded'))\r\n    //     } else {\r\n    //         handleServerAppError(res.data, dispatch);\r\n    //     }\r\n    // })\r\n    //     .catch((error) => {\r\n    //         handleServerNetworkError(error, dispatch)\r\n    //     })\r\n\r\n}\r\n\r\n// export const logoutTC = () => (dispatch: Dispatch<ActionsType>) => {\r\n//     dispatch(setAppStatusAC('loading'))\r\n//     authAPI.logout()\r\n//         .then(res => {\r\n//             if (res.data.resultCode === 0) {\r\n//                 dispatch(setIsLoggedInAC(false))\r\n//                 dispatch(setAppStatusAC('succeeded'))\r\n//             } else {\r\n//                 handleServerAppError(res.data, dispatch)\r\n//             }\r\n//         })\r\n//         .catch((error) => {\r\n//             handleServerNetworkError(error, dispatch)\r\n//         })\r\n// }\r\n\r\n// types\r\ntype ActionsType = ReturnType<typeof setIsLoggedInAC> | SetAppStatusActionType | SetAppErrorActionType\r\n","E:\\react\\dragan wrap\\new-node\\tools-bar\\src\\bll\\todolists-reducer.ts",["169"],"import {Dispatch} from 'redux'\r\nimport {todolistsAPI, TodoslistType} from \"./Api\";\r\nimport {RequestStatusType, setAppStatusAC, SetAppStatusActionType} from \"./app-reducer\";\r\nimport * as uuid from \"uuid\";\r\n// types\r\nexport type FilterValuesType = 'all' | 'active' | 'completed';\r\nexport type TodolistType = {\r\n    id: string\r\n    title: string\r\n    addedDate?: string\r\n    order?: number\r\n}\r\nexport type TodolistDomainType = TodolistType & {\r\n    filter: FilterValuesType\r\n    entityStatus: RequestStatusType\r\n}\r\ntype ThunkDispatch = Dispatch<ActionsType | SetAppStatusActionType>\r\nconst initialState: Array<TodolistDomainType> = []\r\n\r\nexport const todolistsReducer = (state: Array<TodolistDomainType> = initialState, action: ActionsType): Array<TodolistDomainType> => {\r\n    switch (action.type) {\r\n        // case 'REMOVE-TODOLIST':\r\n        //     return state.filter(tl => tl.id != action.id)\r\n        case 'ADD-TODOLIST':\r\n            // return [{...action.todolist.data, filter: 'all', entityStatus: 'idle'}, ...state]\r\n        // case 'CHANGE-TODOLIST-TITLE':\r\n        //     return state.map(tl => tl.id === action.id ? {...tl, title: action.title} : tl)\r\n        // case 'CHANGE-TODOLIST-FILTER':\r\n        //     return state.map(tl => tl.id === action.id ? {...tl, filter: action.filter} : tl)\r\n        // case 'CHANGE-TODOLIST-ENTITY-STATUS':\r\n        //     return state.map(tl => tl.id === action.id ? {...tl, entityStatus: action.status} : tl)\r\n        case 'SET-TODOLISTS': {\r\n            // debugger\r\n            // console.log(action.todolists);\r\n            //@ts-ignore\r\n            return  action.todolists.map(tl => ({...tl.data,  filter: 'all', entityStatus: 'idle'}))\r\n            // ({...tl.data, filter: 'all', entityStatus: 'idle'})\r\n        }\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\n// actions\r\nexport const removeTodolistAC = (id: string) => ({type: 'REMOVE-TODOLIST', id} as const)\r\nexport const addTodolistAC = (todolist: TodoslistType) => ({type: 'ADD-TODOLIST', todolist} as const)\r\nexport const changeTodolistTitleAC = (id: string, title: string) => ({\r\n    type: 'CHANGE-TODOLIST-TITLE', id, title} as const)\r\nexport const changeTodolistFilterAC = (id: string, filter: FilterValuesType) => ({\r\n    type: 'CHANGE-TODOLIST-FILTER', id, filter} as const)\r\nexport const changeTodolistEntityStatusAC = (id: string, status: RequestStatusType) => ({\r\n    type: 'CHANGE-TODOLIST-ENTITY-STATUS', id, status } as const)\r\nexport const setTodolistsAC = (todolists: Array<TodoslistType>) => ({type: 'SET-TODOLISTS', todolists} as const)\r\n// export const setTodolistsAC = (todolists: Array<TodoslistType>) => ({type: 'SET-TODOLISTS', todolists} as const)\r\n\r\n// thunks\r\nexport const fetchTodolistsTC = () => {\r\n    return (dispatch: ThunkDispatch) => {\r\n        dispatch(setAppStatusAC('loading'))\r\n        debugger\r\n        todolistsAPI.getTodolists()\r\n            .then((res) => {\r\n                //@ts-ignore\r\n                console.log('getTodolists: '+res);\r\n                dispatch(setTodolistsAC(res))\r\n                dispatch(setAppStatusAC('succeeded'))\r\n            })\r\n    }\r\n    // 0:\r\n    // data: {title: \" test title\", order: 1}\r\n    // id: \"Wf5jrMHWmpWnOveyeqAY\"\r\n    // __proto__: Object\r\n    // 1:\r\n    // data:\r\n    //     ttt:\r\n    //         \" addedDate\": \"uuuuuuuuuuuuu\"\r\n    // \" id: \": \"ggggggggg\"\r\n    // order: 2\r\n    // title:: \"yyyyyyyyyyy\"\r\n}\r\n// export const removeTodolistTC = (todolistId: string) => {\r\n//     return (dispatch: ThunkDispatch) => {\r\n//         //изменим глобальный статус приложения, чтобы вверху полоса побежала\r\n//         dispatch(setAppStatusAC('loading'))\r\n//         //изменим статус конкретного тудулиста, чтобы он мог задизеблить что надо\r\n//         dispatch(changeTodolistEntityStatusAC(todolistId, 'loading'))\r\n//         todolistsAPI.deleteTodolist(todolistId)\r\n//             .then((res) => {\r\n//                 dispatch(removeTodolistAC(todolistId))\r\n//                 //скажем глобально приложению, что асинхронная операция завершена\r\n//                 dispatch(setAppStatusAC('succeeded'))\r\n//             })\r\n//     }\r\n// }\r\nexport const addTodolistTC = (title: string) => {\r\n    return (dispatch: ThunkDispatch) => {\r\n        dispatch(setAppStatusAC('loading'))\r\n        let id = uuid.v1()\r\n        let addedDate= new Date().toDateString()\r\n        let order= 0\r\n        debugger\r\n        todolistsAPI.createTodolist(id,title,addedDate,order)\r\n            .then((res) => {\r\n                console.log(res.data);\r\n                // dispatch(addTodolistAC(res.data.data.item))\r\n                dispatch(setAppStatusAC('succeeded'))\r\n            })\r\n    }\r\n}\r\n// export const changeTodolistTitleTC = (id: string, title: string) => {\r\n//     return (dispatch: Dispatch<ActionsType>) => {\r\n//         todolistsAPI.updateTodolist(id, title)\r\n//             .then((res) => {\r\n//                 dispatch(changeTodolistTitleAC(id, title))\r\n//             })\r\n//     }\r\n// }\r\n\r\nexport type AddTodolistActionType = ReturnType<typeof addTodolistAC>;\r\nexport type RemoveTodolistActionType = ReturnType<typeof removeTodolistAC>;\r\nexport type SetTodolistsActionType = ReturnType<typeof setTodolistsAC>;\r\nexport type changeTodolistTitleACType = ReturnType<typeof changeTodolistTitleAC>;\r\nexport type changeTodolistEntityStatusACType = ReturnType<typeof changeTodolistEntityStatusAC>;\r\nexport type changeTodolistFilterACType = ReturnType<typeof changeTodolistFilterAC> ;\r\ntype ActionsType =  RemoveTodolistActionType | AddTodolistActionType\r\n    | changeTodolistTitleACType | changeTodolistEntityStatusACType\r\n    | changeTodolistFilterACType | SetTodolistsActionType\r\n\r\n","E:\\react\\dragan wrap\\new-node\\tools-bar\\src\\bll\\groupReduser.ts",["170","171"],"import {Dispatch} from \"redux\";\nimport { GroupType, Users, GroupsApi} from \"./Api\";\nimport * as uuid from 'uuid';\nimport {getAllUsersFirestoreTC} from \"./userReduser\";\n\nexport type setGroupsACType = ReturnType<typeof setGroupsAC>\ntype addGroupsACType = ReturnType<typeof addGroupsAC>\ntype deleteGroupsACType = ReturnType<typeof deleteGroupsAC>\ntype getGroupByIdACType = ReturnType<typeof getGroupByIdAC>\ntype actionType =  setGroupsACType | addGroupsACType | deleteGroupsACType | getGroupByIdACType\nexport type  groupUsersType = {\n    uid: string\n    name?: string\n}\n\ntype initStateType = {\n    groups: GroupType[]\n    activeGroup:GroupType\n    status: boolean\n    userRecord: string\n    message: string\n}\n\nexport let initState: initStateType = {\n    groups: [],\n    activeGroup: {id:'ggggggg',data:{ group: 'string', users: []}},\n    // activeGroup: {} as GroupType,\n    status: false,\n    userRecord: '',\n    message: '',\n}\n\nexport const groupReducer = (state = initState, action: actionType) => {\n    switch (action.type) {\n        case 'GROUP/SET-GROUPS':\n            return {...state, groups: action.payload}\n        case 'GROUP/ADD-GROUP':\n            return {...state, groups: [...state.groups, action.payload]}\n        case 'GROUP/DELETE-GROUP':\n            return {...state, groups: [state.groups.filter(g => g.id !== action.payload)]}\n        case \"GROUP/GET-GROUP-WITH-ID\": {\n            // debugger\n            return {...state,\n                activeGroup: action.payload}\n        }\n        default:\n            return {...state}\n    }\n}\nexport const setGroupsAC = (payload: any) => ({type: 'GROUP/SET-GROUPS', payload} as const)\nexport const addGroupsAC = (payload: any) => ({type: 'GROUP/ADD-GROUP', payload} as const)\nexport const deleteGroupsAC = (payload: any) => ({type: 'GROUP/DELETE-GROUP', payload} as const)\nexport const getGroupByIdAC = (payload: GroupType) => ({type: 'GROUP/GET-GROUP-WITH-ID', payload} as const)\n\n//TC\nexport const getGroupsTC = () => (dispatch: Dispatch) => {\n    GroupsApi.getGroups()\n        .then(res => {\n                // console.log('Users.getGroups;' + res);\n                dispatch(setGroupsAC(res))\n            }\n        )\n}\nexport const getGroupByIdACTC = (id:string) => (dispatch: Dispatch) => {\n    // debugger\n    GroupsApi.getGroupById(id)\n        .then(res => {\n                console.log('group.getGroupByIdAC;' + parseInt(res));\n                dispatch(getGroupByIdAC({data:res, id}))\n            }\n        )\n}\nexport const removeGroupsTC = (id: string) => (dispatch: any) => {\n    GroupsApi.groupRemove(id).then(res => {\n        dispatch(getGroupsTC())\n        console.log(res);\n    })\n}\nexport const addGroupsTC = (group: string) => (dispatch: any) => {\n    let id = uuid.v1()\n    GroupsApi.addGroup(id, group)\n        .then(res => {\n            dispatch(getGroupsTC())\n            console.log(res);\n        })\n}\n// export const setUserOnGroupTC = (id: string, uid: string, userName: string, user: groupUsersType) =>\n//     (dispatch: any) => {\n//         debugger\n//         // Users.addUserOnGroup(id, uid, userName).then(res => {\n//         Users.addUserOnGroup(id, user).then(res => {\n//             dispatch(getGroupsTC())\n//         })\n//         Users.addUserData(uid, id, userName).then(res => {\n//             console.log(\"setUserOnGroupTC: \", res);\n//             debugger\n//             dispatch(getAllUsersFirestoreTC())\n//         })\n//     }\n","E:\\react\\dragan wrap\\new-node\\tools-bar\\src\\ui\\views\\pages\\login\\Login.js",["172","173"],"import React, {useState} from 'react'\nimport {Link, Redirect} from 'react-router-dom'\nimport {\n  CButton, CCard, CCardBody, CCardGroup, CCol, CContainer, CForm, CInput,\n  CInputGroup, CInputGroupPrepend, CInputGroupText, CRow\n} from '@coreui/react'\nimport CIcon from '@coreui/icons-react'\nimport {createUserTC, loginUserTC} from \"../../../../bll/userReduser\";\nimport {useDispatch, useSelector} from \"react-redux\";\n\nconst Login = () => {\n  console.log('login');\n  debugger\n  const status = useSelector(state => state.users.status)\n  const dispatch = useDispatch()\n  let [email, setEmail] = useState('lisa15.08patrikeevana@gmail.com')\n  let [password, setPassword] = useState('lisa15')\n  const createEmail = (e) => {setEmail(e.currentTarget.value)}\n  const createPassword = (e) => {setPassword(e.currentTarget.value)}\n  const HandleLogin = ()=>{\n    dispatch(loginUserTC(email,password))\n    setEmail('')\n    setPassword('')\n  }\n  // if(status){return <Redirect to='/groupsUsers' />}\n  // console.log('login page:', status);\n\n  return (\n    <div className=\"c-app c-default-layout flex-row align-items-center\">\n      <CContainer>\n        <CRow className=\"justify-content-center\">\n          <CCol md=\"8\">\n            <CCardGroup>\n              <CCard className=\"p-4\">\n                <CCardBody>\n                  <CForm>\n                    <h1>Login</h1>\n                    <p className=\"text-muted\">Sign In to your account</p>\n                    <CInputGroup className=\"mb-3\">\n                      <CInputGroupPrepend>\n                        <CInputGroupText>\n                          <CIcon name=\"cil-user\" />\n                        </CInputGroupText>\n                      </CInputGroupPrepend>\n                      <CInput type=\"text\" placeholder=\"Email\" autoComplete=\"email\" onChange={createEmail} value={email}/>\n                    </CInputGroup>\n                    <CInputGroup className=\"mb-4\">\n                      <CInputGroupPrepend>\n                        <CInputGroupText>\n                          <CIcon name=\"cil-lock-locked\" />\n                        </CInputGroupText>\n                      </CInputGroupPrepend>\n                      <CInput type=\"password\" placeholder=\"Password\" autoComplete=\"current-password\"  value={password} onChange={createPassword}/>\n                    </CInputGroup>\n                    <CRow>\n                      <CCol xs=\"6\">\n                        <CButton color=\"primary\" className=\"px-5\" onClick={HandleLogin}>Login</CButton>\n                      </CCol>\n                      {status &&\n                      <CCol xs=\"6\"> <Link to=\"/groupsUsers\">\n                        <CButton color=\"primary\" className=\"px-4\">main</CButton>\n                      </Link> </CCol>}\n                      {/*<CCol xs=\"6\" className=\"text-right\">*/}\n                      {/*  <CButton color=\"link\" className=\"px-0\">Forgot password?</CButton>*/}\n                      {/*</CCol>*/}\n                    </CRow>\n                  </CForm>\n                </CCardBody>\n              </CCard>\n              <CCard className=\"text-white bg-primary py-5 d-md-down-none\" style={{ width: '44%' , margin: '10px auto'}}>\n                <CCardBody className=\"text-center\">\n                  <div>\n                    <h2>Sign up</h2>\n                    <p>Lorem ipsum dolor sit amet, consectetur adipisicing elit, sed do eiusmod tempor incididunt ut\n                      labore et dolore magna aliqua.</p>\n                    <Link to=\"/register\">\n                      <CButton color=\"primary\" className=\"mt-3\" active tabIndex={-1}>Register Now!</CButton>\n                    </Link>\n                  </div>\n                </CCardBody>\n              </CCard>\n            </CCardGroup>\n          </CCol>\n        </CRow>\n      </CContainer>\n    </div>\n  )\n}\n\nexport default Login\n","E:\\react\\dragan wrap\\new-node\\tools-bar\\src\\ui\\views\\pages\\register\\Register.js",["174","175"],"import React, {useState} from 'react'\nimport {\n  CButton,\n  CCard,\n  CCardBody,\n  CCardFooter,\n  CCol,\n  CContainer,\n  CForm,\n  CInput,\n  CInputGroup,\n  CInputGroupPrepend,\n  CInputGroupText,\n  CRow\n} from '@coreui/react'\nimport CIcon from '@coreui/icons-react'\nimport {useDispatch, useSelector} from \"react-redux\";\nimport {createUserTC} from \"../../../../bll/userReduser\";\nimport {Redirect} from \"react-router-dom\";\nimport Dashboard from \"../../../components/dashboard/Dashboard\";\n\nconst Register = () => {\n\n  const userRecord = useSelector(state => state.users.userRecord)\n  const dispatch = useDispatch()\n  let [username,setUsername]=useState('')\n  let [email, setEmail] = useState('')\n  let [password, setPassword] = useState('lisa15')\n  const createUsername = (e) => {\n    setUsername(e.currentTarget.value)\n  }\n  const createEmail = (e) => {\n    setEmail(e.currentTarget.value)\n  }\n  const createPassword = (e) => {\n    setPassword(e.currentTarget.value)\n  }\n  const HandleRegister = ()=>{\n    dispatch(createUserTC(email,password,username))\n    setUsername('')\n    setEmail('')\n    setPassword('')\n  }\n  console.log(userRecord);\n\n  if(userRecord){return <Redirect to='/login' />}\n\n  return (\n    <div className=\"c-app c-default-layout flex-row align-items-center\">\n      <CContainer>\n        <CRow className=\"justify-content-center\">\n          <CCol md=\"9\" lg=\"7\" xl=\"6\">\n            <CCard className=\"mx-4\">\n              <CCardBody className=\"p-4\">\n                <CForm>\n                  <h1>Register</h1>\n                  <p className=\"text-muted\">Create your account</p>\n                  <CInputGroup className=\"mb-3\">\n                    <CInputGroupPrepend>\n                      <CInputGroupText>\n                        <CIcon name=\"cil-user\" />\n                      </CInputGroupText>\n                    </CInputGroupPrepend>\n                    <CInput type=\"text\" placeholder=\"Username\" autoComplete=\"username\" value={username} onChange={createUsername}/>\n                  </CInputGroup>\n                  <CInputGroup className=\"mb-3\">\n                    <CInputGroupPrepend>\n                      <CInputGroupText>@</CInputGroupText>\n                    </CInputGroupPrepend>\n                    <CInput type=\"text\" placeholder=\"Email\" autoComplete=\"email\" onChange={createEmail} value={email}/>\n                  </CInputGroup>\n                  <CInputGroup className=\"mb-3\">\n                    <CInputGroupPrepend>\n                      <CInputGroupText>\n                        <CIcon name=\"cil-lock-locked\" />\n                      </CInputGroupText>\n                    </CInputGroupPrepend>\n                    <CInput type=\"password\" placeholder=\"Password\" autoComplete=\"new-password\" value={password} onChange={createPassword}/>\n                  </CInputGroup>\n                  {/*<CInputGroup className=\"mb-4\">*/}\n                  {/*  <CInputGroupPrepend>*/}\n                  {/*    <CInputGroupText>*/}\n                  {/*      <CIcon name=\"cil-lock-locked\" />*/}\n                  {/*    </CInputGroupText>*/}\n                  {/*  </CInputGroupPrepend>*/}\n                  {/*  <CInput type=\"password\" placeholder=\"Repeat password\" autoComplete=\"new-password\" />*/}\n                  {/*</CInputGroup>*/}\n                  <CButton color=\"success\" block onClick={HandleRegister}>Create Account</CButton>\n                </CForm>\n              </CCardBody>\n            </CCard>\n          </CCol>\n        </CRow>\n      </CContainer>\n    </div>\n  )\n}\n\nexport default Register\n","E:\\react\\dragan wrap\\new-node\\tools-bar\\src\\ui\\components\\dashboard\\Dashboard.jsx",["176","177","178","179","180"],"import React, {useEffect} from 'react';\nimport clsx from 'clsx';\nimport {makeStyles} from '@material-ui/core/styles';\nimport CssBaseline from '@material-ui/core/CssBaseline';\nimport Drawer from '@material-ui/core/Drawer';\nimport Box from '@material-ui/core/Box';\nimport AppBar from '@material-ui/core/AppBar';\nimport Toolbar from '@material-ui/core/Toolbar';\nimport List from '@material-ui/core/List';\nimport Typography from '@material-ui/core/Typography';\nimport Divider from '@material-ui/core/Divider';\nimport IconButton from '@material-ui/core/IconButton';\nimport Badge from '@material-ui/core/Badge';\nimport Container from '@material-ui/core/Container';\nimport Link from '@material-ui/core/Link';\nimport MenuIcon from '@material-ui/icons/Menu';\nimport ChevronLeftIcon from '@material-ui/icons/ChevronLeft';\nimport NotificationsIcon from '@material-ui/icons/Notifications';\nimport {mainListItems, secondaryListItems} from './listItems';\nimport {Switch, Route, Redirect, NavLink} from \"react-router-dom\"\nimport Button from \"@material-ui/core/Button\";\nimport {useDispatch} from \"react-redux\";\nimport {setUsersTC, signOutTC} from \"../../../bll/userReduser\";\nimport HomeIcon from '@material-ui/icons/Home';\nimport Groups from \"../../views/groups/groups\";\nimport {PATH} from \"../../route\";\nimport Users from \"../../views/users/users\";\nimport Page404 from \"../../views/pages/page404/Page404\";\nimport GroupPage from \"../../views/groups/groupPage\";\nimport {getGroupsTC} from \"../../../bll/groupReduser\";\n\n\nfunction Copyright() {\n    return (\n        <Typography variant=\"body2\" color=\"textSecondary\" align=\"center\">\n            {'Copyright © '}\n            <Link color=\"inherit\" href=\"https://material-ui.com/\">\n                Your Website\n            </Link>{' '}\n            {new Date().getFullYear()}\n            {'.'}\n        </Typography>\n    );\n}\n\nconst drawerWidth = 240;\nconst useStyles = makeStyles((theme) => ({\n    root: {\n        display: 'flex',\n    },\n    toolbar: {\n        paddingRight: 24, // keep right padding when drawer closed\n    },\n    toolbarIcon: {\n        display: 'flex',\n        alignItems: 'center',\n        justifyContent: 'flex-end',\n        padding: '0 8px',\n        ...theme.mixins.toolbar,\n    },\n    appBar: {\n        zIndex: theme.zIndex.drawer + 1,\n        transition: theme.transitions.create(['width', 'margin'], {\n            easing: theme.transitions.easing.sharp,\n            duration: theme.transitions.duration.leavingScreen,\n        }),\n    },\n    appBarShift: {\n        marginLeft: drawerWidth,\n        width: `calc(100% - ${drawerWidth}px)`,\n        transition: theme.transitions.create(['width', 'margin'], {\n            easing: theme.transitions.easing.sharp,\n            duration: theme.transitions.duration.enteringScreen,\n        }),\n    },\n    menuButton: {\n        marginRight: 36,\n    },\n    menuButtonHidden: {\n        display: 'none',\n    },\n    title: {\n        flexGrow: 1,\n    },\n    drawerPaper: {\n        position: 'relative',\n        whiteSpace: 'nowrap',\n        width: drawerWidth,\n        transition: theme.transitions.create('width', {\n            easing: theme.transitions.easing.sharp,\n            duration: theme.transitions.duration.enteringScreen,\n        }),\n    },\n    drawerPaperClose: {\n        overflowX: 'hidden',\n        transition: theme.transitions.create('width', {\n            easing: theme.transitions.easing.sharp,\n            duration: theme.transitions.duration.leavingScreen,\n        }),\n        width: theme.spacing(7),\n        [theme.breakpoints.up('sm')]: {\n            width: theme.spacing(9),\n        },\n    },\n    appBarSpacer: theme.mixins.toolbar,\n    content: {\n        flexGrow: 1,\n        // height: '100vh',\n        overflow: 'auto',\n    },\n    container: {\n        paddingTop: theme.spacing(4),\n        paddingBottom: theme.spacing(4),\n    },\n    paper: {\n        padding: theme.spacing(2),\n        display: 'flex',\n        overflow: 'auto',\n        flexDirection: 'column',\n    },\n    fixedHeight: {\n        height: 240,\n    },\n}));\n\n// Pages\nconst Starting = React.lazy(() => import('../../views/starting'));\nconst GroupsUsers = React.lazy(() => import('../../views/groupUsers/groupsUsers'));\n// const Page404 = React.lazy(() => import('./views/pages/page404/Page404'));\n// const Page500 = React.lazy(() => import('./views/pages/page500/Page500'));\n\nexport default function Dashboard() {\n    const dispatch = useDispatch()\n\n    const classes = useStyles();\n    const [open, setOpen] = React.useState(true);\n    const handleDrawerOpen = () => {\n        setOpen(true);\n    };\n    const handleDrawerClose = () => {\n        setOpen(false);\n    };\n    const submitSignOut = () => {\n        dispatch(signOutTC())\n    }\n\n    return (\n        <div className={classes.root}>\n            <CssBaseline/>\n            <AppBar position=\"absolute\" className={clsx(classes.appBar, open && classes.appBarShift)}>\n                <Toolbar className={classes.toolbar}>\n                    <IconButton edge=\"start\" color=\"inherit\" aria-label=\"open drawer\" onClick={handleDrawerOpen}\n                                className={clsx(classes.menuButton, open && classes.menuButtonHidden)}>\n                        <MenuIcon/>\n                    </IconButton>\n                    <Typography component=\"h1\" variant=\"h6\" color=\"inherit\" noWrap className={classes.title}>\n                        Dashboard\n                    </Typography>\n                    <IconButton color=\"inherit\">\n                        <Badge badgeContent={4} color=\"secondary\">\n                            <NotificationsIcon/>\n                        </Badge>\n                    </IconButton>\n                    <Button onClick={submitSignOut}>sign out</Button>\n                    <NavLink to={'https://lisapatrikeevna.github.io/dragan-2/'} title={'to site'}> <HomeIcon/></NavLink>\n                </Toolbar>\n            </AppBar>\n            <Drawer variant=\"permanent\" open={open}\n                    classes={{paper: clsx(classes.drawerPaper, !open && classes.drawerPaperClose),}}>\n                <div className={classes.toolbarIcon}>\n                    <IconButton onClick={handleDrawerClose}>\n                        <ChevronLeftIcon/>\n                    </IconButton>\n                </div>\n                <Divider/>\n                <List>{mainListItems}</List>\n                <Divider/>\n                <List>{secondaryListItems}</List>\n            </Drawer>\n            <main className={classes.content}>\n                <div className={classes.appBarSpacer}/>\n                <Container maxWidth=\"lg\" className={classes.container}>\n                    <React.Suspense fallback={'...loading'}>\n                        <Switch>\n                            {/*<Route path=\"/\"  render={props => <Starting {...props}/>} />*/}\n                            <Route exact path={PATH.GROUPS} render={() => <Groups/>}/>\n                            <Route exact path={PATH.USERS} render={() => <Users/>}/>\n                            <Route path=\"/starting\" render={props => <Starting {...props}/>}/>\n                            {/*<Route path=\"/groupsUsers\" render={props => <GroupsUsers {...props}/>}/>*/}\n                            <Route exact path={PATH.PAGEGROUP.path} render={() => <GroupPage />}/>\n                            <Route exact path={PATH.ERROR404} render={() => <Page404/>}/>\n                            {/*    /!*<Route exact path=\"/404\" name=\"Page 404\" render={props => <Page404 {...props}/>} />*!/*/}\n                            {/*    /!*<Route exact path=\"/500\" name=\"Page 500\" render={props => <Page500 {...props}/>} />*!/*/}\n                        </Switch>\n                    </React.Suspense>\n                    <Box pt={4}>\n                        <Copyright/>\n                    </Box>\n                </Container>\n            </main>\n        </div>\n    );\n}\n","E:\\react\\dragan wrap\\new-node\\tools-bar\\src\\bll\\Api.ts",["181"],"import axios from 'axios'\nimport {groupUsersType} from \"./groupReduser\";\nimport {TodolistType} from \"./todolists-reducer\";\n\nconst instance = axios.create({\n    // baseURL: 'https://dragan.lisa15.ru/',\n    baseURL: 'http://localhost:7563/',\n})\n\nexport type userFirestoreType = {\n    id?: string\n    name: string\n    uid: string\n    listTasks?: any\n}\nexport type GroupDataType = {\n    group: string\n    users: groupUsersType[]\n    todoLists?: Array<string>\n}\nexport type UserType = {\n    user: userFirestoreType\n}\nexport type FireBaseResponse<T> = {\n    id: string\n    data: T\n}\nexport type GroupType = {\n    data: GroupDataType\n    id: string\n}\nexport const GroupsApi = {\n    getGroups() {\n        return instance.get<Array<GroupType>>('api/getGroups').then(r => r.data)\n    },\n    // addGroup(id: string, name: string,idGrUser:string,users:string) {\n    addGroup(id: string, name: string) {\n        return instance.post('api/createGroup', {id, name})\n    },\n    groupRemove(id: string) {\n        return instance.delete(`groupRemove/${id}`)\n    },\n    getGroupById(id: string) {\n        return instance.get(`api/getGroupById/${id}`).then(r => r.data)\n    },\n    // addUserOnGroup(id: string,uid:string,name:string) {\n    addUserOnGroup(id: string, user: groupUsersType) {\n        debugger\n        // return instance.post(`api/addUserOnGroup/${id}`,{uid,name})\n        return instance.post(`api/addUserOnGroup/${id}`, {user})\n    },\n}\nexport const Users = {\n    getAllUsers() {\n        return instance.get('users/1')\n    },\n    getAllUsersFirestore() {\n        return instance.get<Array<FireBaseResponse<UserType>>>('api/getUsers').then(u => u.data)\n    },\n    auth() {\n        return instance.get('auth')\n    },\n    updateUser(uid: string, payload: { email?: string, phoneNumber?: string,disabled?:false, nickName?: string }) {\n        debugger\n        return instance.put(`userUpdate/${uid}`, {payload})\n    },\n    userRemove(uid: string) {\n        // @ts-ignore\n        return instance.delete(`userRemove/${uid}`)\n    },\n    createUser(email: string, password: string, username: string) {\n        return instance.post(`createUser`, {email, password, displayName: username})\n    },\n\n    addUserData(uid: string, id: string, name: string) {\n        return instance.post(`api/addUserData`, {uid, id, name})\n    },\n}\nexport type TodoslistType = {\n    id: string\n    data:{\n        title: string\n        addedDate: string\n        order: number\n    }\n}\nexport const todolistsAPI = {\n    getTodolists() {\n        const promise = instance.get<TodoslistType[]>('api/getTodolists').then(r => r.data);\n        return promise;\n    },\n    createTodolist(id:string,title:string,addedDate:string,order:number) {\n        debugger\n        const promise = instance.post<ResponseType<{ item: TodoslistType }>>('api/todoLists/create', {id,title,addedDate,order});\n        return promise;\n    },\n    deleteTodolist(id: string) {\n        const promise = instance.delete<ResponseType>(`api/deleteTodolist/${id}`);\n        return promise;\n    },\n    // updateTodolist(id: string, title: string) {\n    //     const promise = instance.put<ResponseType>(`api/getTodolists/${id}`, {title: title});\n    //     return promise;\n    // },\n    getTasks(todolistId: string) {\n        return instance.get<GetTasksResponse>(`api/getTodolists/${todolistId}/tasks`);\n    },\n    deleteTask(todolistId: string, taskId: string) {\n        return instance.delete<ResponseType>(`api/getTodolists/${todolistId}/tasks/${taskId}`);\n    },\n    createTask(todolistId: string, taskTitile: string) {\n        return instance.post<ResponseType<{ item: TaskType }>>(`api/todoLists/create/${todolistId}/tasks`, {title: taskTitile});\n    },\n    updateTask(todolistId: string, taskId: string, model: UpdateTaskModelType) {\n        return instance.put<ResponseType<TaskType>>(`todo-lists/${todolistId}/tasks/${taskId}`, model);\n    },\n\n}\nexport const Tasks = {\n    getAllTasks() {\n        // const promise = instance.get('users');\n        // return promise;\n        // debugger\n        return instance.get('users')\n    },\n    getGroups() {\n        // const promise = instance.get('users');\n        // return promise;\n        // debugger\n        return instance.get('/api/get')\n    },\n    addTodo(id: string, name: string) {\n        debugger\n        return instance.post('api/todoLists/create', {id, name})\n    }\n}\n\n// types\nexport type LoginParamsType = {\n    password: string\n    email: string\n    rememberMy?: boolean\n}\nexport type myResponseType = {\n    id: number\n    email: string\n    login: string\n}\n\nexport type ResponseType<D = {}> = {\n    resultCode: number\n    messages: Array<string>\n    fieldsErrors: Array<string>\n    data: D\n}\n\nexport enum TaskStatuses {\n    New = 0,\n    InProgress = 1,\n    Completed = 2,\n    Draft = 3\n}\n\nexport enum TaskPriorities {\n    Low = 0,\n    Middle = 1,\n    Hi = 2,\n    Urgently = 3,\n    Later = 4\n}\n\nexport type TaskType = {\n    description: string\n    title: string\n    status: TaskStatuses\n    priority: TaskPriorities\n    startDate: string\n    deadline: string\n    id: string\n    todoListId: string\n    order: number\n    addedDate: string\n}\nexport type UpdateTaskModelType = {\n    title: string\n    description: string\n    status: TaskStatuses\n    priority: TaskPriorities\n    startDate: string\n    deadline: string\n}\ntype GetTasksResponse = {\n    error: string | null\n    totalCount: number\n    items: TaskType[]\n}\n//import * as admin from 'firebase-admin';\n//const serviceAccount = require(\"../fir-silky-firebase-adminsdk-6l12p-2bc5e41df4.json\");\n\n//const app = admin.initializeApp();\n// admin.initializeApp({\n//     credential: admin.credential.applicationDefault(),\n//   //credential: admin.credential.cert(serviceAccount),\n//   databaseURL: \"https://fir-silky-default-rtdb.europe-west1.firebasedatabase.app\"\n// });\n// const adminId = 'lisa-fox'\n// admin.auth().createCustomToken(adminId)\n//     .then((customToken)=>{\n//       console.log(customToken);\n//     })\n//     .catch((error)=>{\n//       console.log(error);\n//     })\n\n//https://firebase.google.com/docs/cloud-messaging/auth-server\n//!!!!! https://firebase.google.com/docs/auth/admin/manage-users\n//https://firebase.google.com/docs/database/admin/start/?hl=ru-ru#node.js\n// export const listAllUsers = (nextPageToken) => {\n//   // List batch of users, 1000 at a time.\n//   admin\n//       .auth()\n//       .listUsers(1000, nextPageToken)\n//       .then((listUsersResult) => {\n//           debugger\n//         listUsersResult.users.forEach((userRecord) => {\n//           console.log('users', userRecord.toJSON());\n//         });\n//         if (listUsersResult.pageToken) {\n//           // List next batch of users.\n//           listAllUsers(listUsersResult.pageToken);\n//         }\n//       })\n//       .catch((error) => {\n//         console.log('Error listing users:', error);\n//       });\n//};\n// Start listing users from the beginning, 1000 at a time.\n//listAllUsers();\n//delet \"firebase\": \"^8.2.6\",\n\n//const serviceAccount = require(\"path/to/serviceAccountKey.json\");\n// export const firebaseConfig={\n//   apiKey: \"AIzaSyDGqV4nDHMokspRbNj9OufL531PwdNB2sc\",\n//   authDomain: \"fir-silky.firebaseapp.com\",\n//   databaseURL: \"https://fir-silky-default-rtdb.europe-west1.firebasedatabase.app\",\n//   projectId: \"fir-silky\",\n//   storageBucket: \"fir-silky.appspot.com\",\n//   messagingSenderId: \"459950163847\",\n//   appId: \"1:459950163847:web:2f94e0b34b0c77d10cb522\"\n// }\n","E:\\react\\dragan wrap\\new-node\\tools-bar\\src\\ui\\route.ts",[],"E:\\react\\dragan wrap\\new-node\\tools-bar\\src\\ui\\views\\groups\\groups.tsx",["182","183"],"import React, {ChangeEvent, useEffect, useState} from 'react';\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {AppRootStateType} from \"../../../bll/store\";\r\nimport Group from \"./group\";\r\nimport {GroupType} from \"../../../bll/Api\";\r\nimport cl from \"../groupUsers/groupUsers.module.css\";\r\nimport {addGroupsTC, getGroupsTC} from \"../../../bll/groupReduser\";\r\nimport DenseTable from \"./tableGroup\";\r\nimport TableContainer from \"@material-ui/core/TableContainer\";\r\nimport Paper from \"@material-ui/core/Paper\";\r\nimport Table from \"@material-ui/core/Table\";\r\nimport TableHead from \"@material-ui/core/TableHead\";\r\nimport TableRow from \"@material-ui/core/TableRow\";\r\nimport TableCell from \"@material-ui/core/TableCell\";\r\nimport TableBody from \"@material-ui/core/TableBody\";\r\nimport {makeStyles} from \"@material-ui/core/styles\";\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n    head: {\r\n        backgroundColor: theme.palette.common.black,\r\n        color: theme.palette.common.white,\r\n    },\r\n    table: {\r\n        minWidth: 650,\r\n    },\r\n}));\r\nconst Groups = () => {\r\n    const dispatch = useDispatch()\r\n    useEffect(() => {\r\n        dispatch(getGroupsTC())\r\n    }, [dispatch])\r\n    const allGroups = useSelector<AppRootStateType, Array<GroupType>>(state => state.groups.groups)\r\n    let [nGroup, setNumGroup] = useState<string>('')\r\n    const setNewGroup = (e: ChangeEvent<HTMLInputElement>) => {\r\n        setNumGroup(e.currentTarget.value)\r\n    }\r\n    const createGroup = () => {\r\n        dispatch(addGroupsTC(nGroup.trim()))\r\n        setNumGroup('')\r\n    }\r\n    const group = allGroups.map(g => <Group key={g.id} id={g.id} name={g.data.group}\r\n                                                  users={g.data.users}/>)\r\n    const classes = useStyles();\r\n    return (\r\n        <>\r\n            <p>GroupsUsers:\r\n                <input type=\"text\" value={nGroup} onChange={setNewGroup}/>\r\n                <button onClick={createGroup}>create group</button>\r\n            </p>\r\n            <TableContainer component={Paper}>\r\n                <Table className={classes.table} size=\"small\" aria-label=\"a dense table\">\r\n                    <TableHead>\r\n                        <TableRow>\r\n                            <TableCell >Users (lists)</TableCell>\r\n                            <TableCell align=\"right\">Names group</TableCell>\r\n                            {/*<TableCell align=\"right\">Fat&nbsp;(g)</TableCell>*/}\r\n                            <TableCell align=\"right\">buttons group&nbsp;</TableCell>\r\n                        </TableRow>\r\n                    </TableHead>\r\n                    <TableBody>\r\n                        {group}\r\n                    </TableBody>\r\n                </Table>\r\n            </TableContainer>\r\n            {/*<div className={cl.wrap}>{group}</div>*/}\r\n            {/*<DenseTable/>*/}\r\n        </>\r\n    );\r\n};\r\n\r\n\r\nexport default Groups;\r\n\r\n","E:\\react\\dragan wrap\\new-node\\tools-bar\\src\\ui\\views\\groups\\groupPage.tsx",["184","185"],"import React, {useEffect} from 'react';\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {useParams} from 'react-router-dom';\r\nimport cl from \"../groupUsers/groupUsers.module.css\";\r\nimport {AppRootStateType} from \"../../../bll/store\";\r\nimport {GroupDataType, GroupType} from \"../../../bll/Api\";\r\nimport {getGroupByIdACTC, groupUsersType, removeGroupsTC} from \"../../../bll/groupReduser\";\r\nimport {TodolistsList} from \"../todo/todoList\";\r\n\r\n\r\nconst GroupPage = React.memo(() => {\r\n    const dispatch = useDispatch()\r\n    const {id}: any = useParams()\r\n    useEffect(() => {dispatch(getGroupByIdACTC(id))}, [dispatch, id])\r\n\r\n    const group = useSelector<AppRootStateType, GroupType>(state => state.groups.activeGroup)\r\n    const deleteGroup = () => {\r\n        dispatch(removeGroupsTC(id))\r\n    }\r\n    let user = group.data.users?.map(((u: groupUsersType) => <div key={u.uid}>\r\n        {/*<p>{u.uid}</p>*/}\r\n        <span>{u.name}</span></div>))\r\n\r\n\r\n    return (\r\n        <div className={cl.box}>\r\n            <>\r\n                <h5>names group:</h5><p> {group?.data.group}</p>\r\n                {/*<Button onClick={deleteGroup}>delete</Button>*/}\r\n            </>\r\n            {user && <><h5>list users:</h5><p>{user}</p></>}\r\n            <h5>content for group: </h5>\r\n            <TodolistsList />\r\n        </div>\r\n    );\r\n});\r\n\r\nexport default GroupPage;","E:\\react\\dragan wrap\\new-node\\tools-bar\\src\\ui\\views\\users\\users.tsx",["186"],"import React, { useCallback, useEffect} from 'react';\nimport {useDispatch, useSelector} from \"react-redux\";\nimport { removeUserTC,\n    setUserOnGroupTC,\n    setUsersTC,\n    userType\n} from \"../../../bll/userReduser\";\nimport {AppRootStateType} from \"../../../bll/store\";\nimport User from \"../users/user\";\nimport cl from './user.module.css';\nimport {GroupType} from \"../../../bll/Api\";\nimport {getGroupsTC, groupUsersType} from \"../../../bll/groupReduser\";\n\n\nconst Users = () => {\n    const dispatch = useDispatch()\n    useEffect(() => {\n        debugger\n        dispatch(setUsersTC())\n        dispatch(getGroupsTC())\n    }, [dispatch])\n    const removeUser = useCallback(function (uid: string) {\n        const action = removeUserTC(uid)\n        dispatch(action)\n    }, [])\n    const addUserToGroup=(id:string,uid:string,userName:string, user: groupUsersType)=>{\n        // dispatch(setUserOnGroupTC(id,uid, userName))\n        dispatch(setUserOnGroupTC(id,uid, userName,user))\n    }\n    const allUsers = useSelector<AppRootStateType, Array<userType>>(state => state.users.users)\n    const allGroups = useSelector<AppRootStateType, Array<GroupType>>(state => state.groups.groups)\n    const user = allUsers.map(u => <User key={u.uid} group={u.group} name={u.displayName} date={u.tokensValidAfterTime}\n                                         email={u.email} listTasks={u.listTasks} uid={u.uid} removeUser={removeUser}\n                                         addUserToGroup={addUserToGroup} phoneNumber={u.phoneNumber}\n    listGroup={allGroups}/>)\n    console.log('allUsers: '+allUsers);\n\n    return (\n        <div>\n            <input type=\"text\" />\n            <h5>all users: </h5>\n            <p>пс. чтоб обновить поля( email и name ) даблклик и апдейт</p>\n            <div className={cl.wrap}>{user}</div>\n        </div>\n    );\n};\n\nexport default Users;\n","E:\\react\\dragan wrap\\new-node\\tools-bar\\src\\ui\\views\\groupUsers\\groupsUsers.tsx",[],"E:\\react\\dragan wrap\\new-node\\tools-bar\\src\\ui\\components\\dashboard\\listItems.jsx",[],"E:\\react\\dragan wrap\\new-node\\tools-bar\\src\\ui\\views\\starting.jsx",["187"],"import React from 'react';\r\nimport Grid from \"@material-ui/core/Grid\";\r\nimport Paper from \"@material-ui/core/Paper\";\r\nimport Chart from \"../components/dashboard/Chart\";\r\nimport Deposits from \"../components/dashboard/Deposits\";\r\nimport Orders from \"../components/dashboard/Orders\";\r\nimport Container from \"@material-ui/core/Container\";\r\nimport clsx from \"clsx\";\r\nimport {makeStyles} from \"@material-ui/core/styles\";\r\n\r\n\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n    paper: {\r\n        padding: theme.spacing(2),\r\n        display: 'flex',\r\n        overflow: 'auto',\r\n        flexDirection: 'column',\r\n    },\r\n    fixedHeight: {\r\n        height: 240,\r\n    },\r\n}));\r\n\r\n\r\nconst Starting = () => {\r\n    const classes = useStyles();\r\n    const fixedHeightPaper = clsx(classes.paper, classes.fixedHeight);\r\n    return (\r\n        <Grid container spacing={3}>\r\n            {/* Chart */}\r\n            <Grid item xs={12} md={8} lg={9}>\r\n                <Paper className={fixedHeightPaper}>\r\n                    <Chart />\r\n                </Paper>\r\n            </Grid>\r\n            {/* Recent Deposits */}\r\n            <Grid item xs={12} md={4} lg={3}>\r\n                <Paper className={fixedHeightPaper}>\r\n                    <Deposits />\r\n                </Paper>\r\n            </Grid>\r\n            {/* Recent Orders */}\r\n            <Grid item xs={12}>\r\n                <Paper className={classes.paper}>\r\n                    <Orders />\r\n                </Paper>\r\n            </Grid>\r\n        </Grid>\r\n    );\r\n};\r\n\r\nexport default Starting;","E:\\react\\dragan wrap\\new-node\\tools-bar\\src\\ui\\views\\pages\\page404\\Page404.jsx",[],"E:\\react\\dragan wrap\\new-node\\tools-bar\\src\\ui\\views\\users\\user.tsx",["188","189","190","191","192"],"import React, {ChangeEvent, useCallback, useState} from 'react';\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {AppRootStateType} from \"../../../bll/store\";\r\nimport { updateUserTC} from \"../../../bll/userReduser\";\r\nimport cl from './user.module.css'\r\nimport {Button, createStyles, FormControl, FormHelperText, MenuItem, Select, TextField, Theme} from \"@material-ui/core\";\r\nimport {EditableSpan} from \"../../common/EditableSpan\";\r\nimport makeStyles from \"@material-ui/core/styles/makeStyles\";\r\nimport {GroupType} from \"../../../bll/Api\";\r\nimport {groupUsersType} from \"../../../bll/groupReduser\";\r\n\r\nconst useStyles = makeStyles((theme: Theme) =>\r\n    createStyles({\r\n        formControl: {\r\n            margin: theme.spacing(1),\r\n            minWidth: 120,\r\n        },\r\n        selectEmpty: {\r\n            marginTop: theme.spacing(2),\r\n        },\r\n    }),\r\n);\r\ntype propsType = {\r\n    uid: string\r\n    name?: string | undefined\r\n    phoneNumber?: string\r\n    date: string\r\n    email: string\r\n    group: string | null\r\n    listTasks?: {} | undefined\r\n    removeUser: (uid: string) => void\r\n    addUserToGroup: (uid: string, groupName: string, name: string, user: groupUsersType) => void\r\n    listGroup: Array<GroupType>\r\n}\r\nconst User = (props: propsType) => {\r\n    const classes = useStyles();\r\n    const dispatch = useDispatch()\r\n    const admin = useSelector<AppRootStateType, string>(state => state.users.adminUid)\r\n    const curentUser = useSelector<AppRootStateType, string>(state => state.users.userid)\r\n    let [groupID, setGroupID] = useState<string>('')\r\n    let [name, setName] = useState<string>(props.name ? props.name : 'not a name')\r\n    let [email, setEmail] = useState<string>(props.email)\r\n    let [phone, setPhone] = useState<string>(props.phoneNumber ? props.phoneNumber : 'not a phoneNumber')\r\n    const changeEmail = (email: string) => {\r\n        setEmail(email)\r\n    }\r\n    const changeName = (name: string) => {\r\n        setName(name)\r\n    }\r\n    const changePhone = (phone: string) => {\r\n        setPhone(phone)\r\n    }\r\n    const removeUser = () => {\r\n        props.removeUser(props.uid)\r\n    }\r\n    // const changePropUser = useCallback((title: string) => {\r\n    //     props.somefunction(props.id, title)\r\n    // }, [props.id, props.somefunction])\r\n    const update = useCallback(() => {\r\n        let payload = {email, name,phone}\r\n        dispatch(updateUserTC(props.uid, payload))\r\n    }, [email, name,phone])\r\n    const addToo = useCallback(() => {\r\n        // console.log(\"listGroup: \"+props.listGroup);\r\n        const groupWithAllUsers={uid:props.uid, name}\r\n        // props.listGroup.find(g => {\r\n        //     if(g.id===groupID) {\r\n        //         const res=[...g.data.users, {uid:props.uid, name}]\r\n        //         // return [...g.data.users, {uid:props.uid, name}]\r\n        //         // console.log(JSON.stringify(res));\r\n        //         return res\r\n        //     }\r\n        // })\r\n        // props.addUserToGroup( groupID,props.uid, name)\r\n        //@ts-ignore\r\n        props.addUserToGroup( groupID,props.uid, name,groupWithAllUsers)\r\n    }, [groupID])\r\n    const styles = {\r\n        // display:!admin  ?  'block' : 'none'\r\n    }\r\n    const handleChange = (event: React.ChangeEvent<{ value: unknown }>) => {\r\n        setGroupID(event.target.value as string);\r\n    };\r\n\r\n    return (\r\n        <div key={props.uid} className={cl.userBox}>\r\n            {/*<p>uid:{props.uid}</p>*/}\r\n            {admin !== curentUser && <>\r\n                <div className={cl.spanWrap}> <span>name:</span><h5>{name ? name : 'no name'}</h5></div>\r\n                <div className={cl.spanWrap}> <span>email:</span><h5>{props.email}</h5></div>\r\n            </>}\r\n            {admin === curentUser &&\r\n            <div style={styles}>\r\n                <div className={cl.spanWrap}><span>email:</span><EditableSpan onChange={changeEmail} value={email}/>\r\n                </div>\r\n                <div className={cl.spanWrap}><span>name:</span><EditableSpan onChange={changeName} value={name}/></div>\r\n                <div className={cl.spanWrap}><span>phoneNumber :</span><EditableSpan onChange={changePhone}\r\n                                                                                     value={phone}/></div>\r\n                <div className={cl.spaceBetween}>\r\n                    <Button variant=\"contained\" onClick={update}>update</Button>\r\n                    <Button variant=\"contained\" onClick={removeUser}>delete</Button>\r\n                </div>\r\n                <hr/>\r\n                <div className={cl.spaceBetween}>\r\n                    <FormControl className={classes.formControl}>\r\n                        <Select labelId=\"demo-simple-select-label\" id=\"demo-simple-select\"\r\n                                value={groupID} onChange={handleChange}>\r\n                            {props.listGroup.map(g => {\r\n                                return <option value={g.id} key={g.id}>{g.data.group}</option>})}\r\n                        </Select>\r\n                        <FormHelperText>select group</FormHelperText>\r\n                    </FormControl>\r\n                    <Button onClick={addToo}>add to group</Button>\r\n                </div>\r\n                <hr/>\r\n            </div>\r\n            }\r\n            {/*<p>date :{props.date}</p>*/}\r\n            <p>group:{props.group ? props.group : 'no group'}</p>\r\n            <p>listTasks:{props.listTasks ? props.listTasks : 'no tasks'}</p>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default User;\r\n\r\n","E:\\react\\dragan wrap\\new-node\\tools-bar\\src\\ui\\views\\todo\\todoList.tsx",["193","194"],"import React, {useCallback, useEffect} from 'react'\r\nimport {useDispatch, useSelector} from 'react-redux'\r\nimport {Grid, Paper} from '@material-ui/core'\r\nimport {Redirect} from \"react-router-dom\";\r\nimport {AppRootStateType} from \"../../../bll/store\";\r\nimport {addTodolistTC, fetchTodolistsTC, FilterValuesType, TodolistDomainType} from \"../../../bll/todolists-reducer\";\r\nimport {TasksStateType} from \"../../../bll/tasksReduser\";\r\nimport {TaskStatuses} from \"../../../bll/Api\";\r\nimport {AddItemForm} from \"../../common/AddItemForm\";\r\nimport {Todolist} from \"./todo\";\r\n\r\ntype PropsType = {\r\n    demo?: boolean\r\n}\r\n\r\n// export const TodolistsList: React.FC<PropsType> = ({demo = false}) => {\r\nexport const TodolistsList: React.FC<PropsType> = () => {\r\n    const todolists = useSelector<AppRootStateType, Array<TodolistDomainType>>(state => state.todoList)\r\n    const isLoggedIn = useSelector<AppRootStateType, boolean>(state => state.auth.isLoggedIn);\r\n    const tasks = useSelector<AppRootStateType, TasksStateType>(state => state.tasks)\r\n    const dispatch = useDispatch()\r\n    useEffect(() => {\r\n        // if (demo || !isLoggedIn) {\r\n        //     return;\r\n        // }\r\n        const thunk = fetchTodolistsTC()\r\n        dispatch(thunk)\r\n    }, [dispatch])\r\n\r\n    const removeTask = useCallback(function (id: string, todolistId: string) {\r\n        // const thunk = removeTaskTC(id, todolistId)\r\n        // dispatch(thunk)\r\n    }, [])\r\n\r\n    const addTask = useCallback(function (title: string, todolistId: string) {\r\n        // const thunk = addTaskTC(title, todolistId)\r\n        // dispatch(thunk)\r\n    }, [])\r\n\r\n    const changeStatus = useCallback(function (id: string, status: TaskStatuses, todolistId: string) {\r\n        // const thunk = updateTaskTC(id, {status}, todolistId)\r\n        // dispatch(thunk)\r\n    }, [])\r\n\r\n    const changeTaskTitle = useCallback(function (id: string, newTitle: string, todolistId: string) {\r\n        // const thunk = updateTaskTC(id, {title: newTitle}, todolistId)\r\n        // dispatch(thunk)\r\n    }, [])\r\n\r\n    const changeFilter = useCallback(function (value: FilterValuesType, todolistId: string) {\r\n        // const action = changeTodolistFilterAC(todolistId, value)\r\n        // dispatch(action)\r\n    }, [])\r\n\r\n    const removeTodolist = useCallback(function (id: string) {\r\n        // const thunk = removeTodolistTC(id)\r\n        // dispatch(thunk)\r\n    }, [])\r\n\r\n    const changeTodolistTitle = useCallback(function (id: string, title: string) {\r\n        // const thunk = changeTodolistTitleTC(id, title)\r\n        // dispatch(thunk)\r\n    }, [])\r\n\r\n    const addTodolist = useCallback((title: string) => {\r\n        debugger\r\n        dispatch(addTodolistTC(title))\r\n    }, [dispatch])\r\n\r\n    // if(!isLoggedIn){\r\n    //     // debugger\r\n    //     return <Redirect to={'/login'}/>\r\n    // }\r\n    return <>\r\n        <Grid container style={{padding: '20px'}}>\r\n            <AddItemForm addItem={addTodolist}/>\r\n        </Grid>\r\n        <Grid container spacing={3}>\r\n            {\r\n                todolists.map(tl => {\r\n                    let allTodolistTasks = tasks[tl.id]\r\n\r\n                    return <Grid item key={tl.id}>\r\n                        <Paper style={{padding: '10px'}}>\r\n                            <Todolist\r\n                                todolist={tl}\r\n                                tasks={allTodolistTasks}\r\n                                removeTask={removeTask}\r\n                                changeFilter={changeFilter}\r\n                                addTask={addTask}\r\n                                changeTaskStatus={changeStatus}\r\n                                removeTodolist={removeTodolist}\r\n                                changeTaskTitle={changeTaskTitle}\r\n                                changeTodolistTitle={changeTodolistTitle}\r\n                                // demo={demo}\r\n                            />\r\n                        </Paper>\r\n                    </Grid>\r\n                })\r\n            }\r\n        </Grid>\r\n    </>\r\n}\r\n","E:\\react\\dragan wrap\\new-node\\tools-bar\\src\\ui\\views\\todo\\todo.tsx",["195","196","197","198","199","200","201","202"],"import React, {useCallback, useEffect} from 'react'\r\nimport {Button, IconButton} from '@material-ui/core'\r\nimport {Delete} from '@material-ui/icons'\r\nimport {useDispatch} from 'react-redux'\r\nimport {FilterValuesType, TodolistDomainType} from \"../../../bll/todolists-reducer\";\r\nimport {TaskStatuses, TaskType} from \"../../../bll/Api\";\r\nimport {EditableSpan} from \"../../common/EditableSpan\";\r\nimport {AddItemForm} from \"../../common/AddItemForm\";\r\nimport {Task} from \"./task\";\r\nimport { fetchTasksTC } from '../../../bll/tasksReduser';\r\n\r\ntype PropsType = {\r\n    todolist: TodolistDomainType\r\n    tasks: Array<TaskType>\r\n    changeFilter: (value: FilterValuesType, todolistId: string) => void\r\n    addTask: (title: string, todolistId: string) => void\r\n    changeTaskStatus: (id: string, status: TaskStatuses, todolistId: string) => void\r\n    changeTaskTitle: (taskId: string, newTitle: string, todolistId: string) => void\r\n    removeTask: (taskId: string, todolistId: string) => void\r\n    removeTodolist: (id: string) => void\r\n    changeTodolistTitle: (id: string, newTitle: string) => void\r\n    // demo?: boolean\r\n}\r\n\r\nexport const Todolist = React.memo(function ({ ...props}: PropsType) {\r\n    console.log('Todolist called')\r\n\r\n    const dispatch = useDispatch()\r\n\r\n    useEffect(() => {\r\n        // if (demo) {\r\n        //     return\r\n        // }\r\n        const thunk = fetchTasksTC(props.todolist.id)\r\n        dispatch(thunk)\r\n    }, [])\r\n\r\n    const addTask = useCallback((title: string) => {\r\n        props.addTask(title, props.todolist.id)\r\n    }, [props.addTask, props.todolist.id])\r\n\r\n    const removeTodolist = () => {\r\n        props.removeTodolist(props.todolist.id)\r\n    }\r\n    const changeTodolistTitle = useCallback((title: string) => {\r\n        props.changeTodolistTitle(props.todolist.id, title)\r\n    }, [props.todolist.id, props.changeTodolistTitle])\r\n\r\n    const onAllClickHandler = useCallback(() => props.changeFilter('all', props.todolist.id), [props.todolist.id, props.changeFilter])\r\n    const onActiveClickHandler = useCallback(() => props.changeFilter('active', props.todolist.id), [props.todolist.id, props.changeFilter])\r\n    const onCompletedClickHandler = useCallback(() => props.changeFilter('completed', props.todolist.id), [props.todolist.id, props.changeFilter])\r\n\r\n\r\n    let tasksForTodolist = props.tasks\r\n\r\n    if (props.todolist.filter === 'active') {\r\n        tasksForTodolist = props.tasks.filter(t => t.status === TaskStatuses.New)\r\n    }\r\n    if (props.todolist.filter === 'completed') {\r\n        tasksForTodolist = props.tasks.filter(t => t.status === TaskStatuses.Completed)\r\n    }\r\n\r\n    return <div>\r\n        <h3><EditableSpan value={props.todolist.title} onChange={changeTodolistTitle}/>\r\n            <IconButton onClick={removeTodolist} disabled={props.todolist.entityStatus === 'loading'}>\r\n                <Delete/>\r\n            </IconButton>\r\n        </h3>\r\n        <AddItemForm addItem={addTask} disabled={props.todolist.entityStatus === 'loading'}/>\r\n        {/*<div>*/}\r\n        {/*    {*/}\r\n        {/*        tasksForTodolist.map(t => <Task key={t.id} task={t} todolistId={props.todolist.id}*/}\r\n        {/*                                      removeTask={props.removeTask}*/}\r\n        {/*                                     changeTaskTitle={props.changeTaskTitle}*/}\r\n        {/*                                    changeTaskStatus={props.changeTaskStatus}*/}\r\n        {/*         />)*/}\r\n        {/*    }*/}\r\n        {/*</div>*/}\r\n        <div style={{paddingTop: '10px'}}>\r\n            <Button variant={props.todolist.filter === 'all' ? 'outlined' : 'text'}\r\n                    onClick={onAllClickHandler}\r\n                    color={'default'}\r\n            >All\r\n            </Button>\r\n            <Button variant={props.todolist.filter === 'active' ? 'outlined' : 'text'}\r\n                    onClick={onActiveClickHandler}\r\n                    color={'primary'}>Active\r\n            </Button>\r\n            <Button variant={props.todolist.filter === 'completed' ? 'outlined' : 'text'}\r\n                    onClick={onCompletedClickHandler}\r\n                    color={'secondary'}>Completed\r\n            </Button>\r\n        </div>\r\n    </div>\r\n})\r\n\r\n\r\n","E:\\react\\dragan wrap\\new-node\\tools-bar\\src\\ui\\common\\AddItemForm.tsx",["203","204","205"],"import React, {ChangeEvent, KeyboardEvent, useState} from 'react';\r\nimport {Box, Button, FormControl, IconButton, TextField} from '@material-ui/core';\r\nimport {AddBox} from '@material-ui/icons';\r\n\r\ntype AddItemFormPropsType = {\r\n    addItem: (title: string) => void\r\n    disabled?: boolean\r\n}\r\n\r\nexport const AddItemForm = React.memo(function({addItem, disabled = false}: AddItemFormPropsType) {\r\n    console.log(\"AddItemForm called\")\r\n\r\n    let [title, setTitle] = useState(\"\")\r\n    let [error, setError] = useState<string | null>(null)\r\n\r\n    const addItemHandler = () => {\r\n        if (title.trim() !== \"\") {\r\n            addItem(title);\r\n            setTitle(\"\");\r\n        } else {\r\n            setError(\"Title is required\");\r\n        }\r\n    }\r\n\r\n    const onChangeHandler = (e: ChangeEvent<HTMLInputElement>) => {\r\n        setTitle(e.currentTarget.value)\r\n    }\r\n\r\n    const onKeyPressHandler = (e: KeyboardEvent<HTMLInputElement>) => {\r\n        if (error !== null) {\r\n            setError(null);\r\n        }\r\n        if (e.charCode === 13) {\r\n            addItemHandler();\r\n        }\r\n    }\r\n\r\n    return <div>\r\n        <TextField variant=\"outlined\"\r\n                   disabled={disabled}\r\n                   error={!!error}\r\n                   value={title}\r\n                   onChange={onChangeHandler}\r\n                   onKeyPress={onKeyPressHandler}\r\n                   label=\"Title\"\r\n                   helperText={error}\r\n        />\r\n        <IconButton color=\"primary\" onClick={addItemHandler} disabled={disabled}>\r\n            <AddBox />\r\n        </IconButton>\r\n    </div>\r\n})\r\n","E:\\react\\dragan wrap\\new-node\\tools-bar\\src\\ui\\common\\EditableSpan.tsx",[],"E:\\react\\dragan wrap\\new-node\\tools-bar\\src\\ui\\components\\dashboard\\Orders.jsx",[],"E:\\react\\dragan wrap\\new-node\\tools-bar\\src\\ui\\components\\dashboard\\Deposits.jsx",[],"E:\\react\\dragan wrap\\new-node\\tools-bar\\src\\ui\\components\\dashboard\\Chart.jsx",[],"E:\\react\\dragan wrap\\new-node\\tools-bar\\src\\ui\\components\\dashboard\\Title.jsx",[],"E:\\react\\dragan wrap\\new-node\\tools-bar\\src\\ui\\views\\groups\\group.tsx",["206","207","208"],{"ruleId":"209","replacedBy":"210"},{"ruleId":"211","replacedBy":"212"},{"ruleId":"213","severity":1,"message":"214","line":4,"column":9,"nodeType":"215","messageId":"216","endLine":4,"endColumn":17},{"ruleId":"213","severity":1,"message":"217","line":21,"column":11,"nodeType":"215","messageId":"216","endLine":21,"endColumn":17},{"ruleId":"209","replacedBy":"210"},{"ruleId":"211","replacedBy":"212"},{"ruleId":"213","severity":1,"message":"218","line":1,"column":9,"nodeType":"215","messageId":"216","endLine":1,"endColumn":17},{"ruleId":"219","severity":1,"message":"218","line":1,"column":9,"nodeType":"215","messageId":"216","endLine":1,"endColumn":17},{"ruleId":"219","severity":1,"message":"220","line":2,"column":9,"nodeType":"215","messageId":"216","endLine":2,"endColumn":29},{"ruleId":"219","severity":1,"message":"221","line":2,"column":63,"nodeType":"215","messageId":"216","endLine":2,"endColumn":82},{"ruleId":"219","severity":1,"message":"222","line":26,"column":6,"nodeType":"215","messageId":"216","endLine":26,"endColumn":19},{"ruleId":"223","severity":1,"message":"224","line":34,"column":94,"nodeType":"225","messageId":"226","endLine":34,"endColumn":96},{"ruleId":"219","severity":1,"message":"220","line":2,"column":9,"nodeType":"215","messageId":"216","endLine":2,"endColumn":29},{"ruleId":"219","severity":1,"message":"227","line":2,"column":31,"nodeType":"215","messageId":"216","endLine":2,"endColumn":55},{"ruleId":"228","severity":1,"message":"229","line":32,"column":9,"nodeType":"230","messageId":"231","endLine":38,"endColumn":10},{"ruleId":"219","severity":1,"message":"232","line":2,"column":21,"nodeType":"215","messageId":"216","endLine":2,"endColumn":26},{"ruleId":"219","severity":1,"message":"233","line":4,"column":9,"nodeType":"215","messageId":"216","endLine":4,"endColumn":31},{"ruleId":"213","severity":1,"message":"214","line":2,"column":15,"nodeType":"215","messageId":"216","endLine":2,"endColumn":23},{"ruleId":"213","severity":1,"message":"234","line":8,"column":9,"nodeType":"215","messageId":"216","endLine":8,"endColumn":21},{"ruleId":"213","severity":1,"message":"235","line":6,"column":3,"nodeType":"215","messageId":"216","endLine":6,"endColumn":14},{"ruleId":"213","severity":1,"message":"236","line":20,"column":8,"nodeType":"215","messageId":"216","endLine":20,"endColumn":17},{"ruleId":"213","severity":1,"message":"237","line":1,"column":16,"nodeType":"215","messageId":"216","endLine":1,"endColumn":25},{"ruleId":"213","severity":1,"message":"214","line":20,"column":24,"nodeType":"215","messageId":"216","endLine":20,"endColumn":32},{"ruleId":"213","severity":1,"message":"238","line":23,"column":9,"nodeType":"215","messageId":"216","endLine":23,"endColumn":19},{"ruleId":"213","severity":1,"message":"239","line":30,"column":9,"nodeType":"215","messageId":"216","endLine":30,"endColumn":20},{"ruleId":"213","severity":1,"message":"240","line":128,"column":7,"nodeType":"215","messageId":"216","endLine":128,"endColumn":18},{"ruleId":"219","severity":1,"message":"241","line":3,"column":9,"nodeType":"215","messageId":"216","endLine":3,"endColumn":21},{"ruleId":"219","severity":1,"message":"242","line":6,"column":8,"nodeType":"215","messageId":"216","endLine":6,"endColumn":10},{"ruleId":"219","severity":1,"message":"243","line":8,"column":8,"nodeType":"215","messageId":"216","endLine":8,"endColumn":18},{"ruleId":"219","severity":1,"message":"244","line":6,"column":9,"nodeType":"215","messageId":"216","endLine":6,"endColumn":22},{"ruleId":"219","severity":1,"message":"245","line":17,"column":11,"nodeType":"215","messageId":"216","endLine":17,"endColumn":22},{"ruleId":"246","severity":1,"message":"247","line":25,"column":8,"nodeType":"248","endLine":25,"endColumn":10,"suggestions":"249"},{"ruleId":"213","severity":1,"message":"250","line":7,"column":8,"nodeType":"215","messageId":"216","endLine":7,"endColumn":17},{"ruleId":"219","severity":1,"message":"251","line":1,"column":16,"nodeType":"215","messageId":"216","endLine":1,"endColumn":27},{"ruleId":"219","severity":1,"message":"252","line":6,"column":60,"nodeType":"215","messageId":"216","endLine":6,"endColumn":68},{"ruleId":"219","severity":1,"message":"253","line":6,"column":78,"nodeType":"215","messageId":"216","endLine":6,"endColumn":87},{"ruleId":"246","severity":1,"message":"254","line":62,"column":8,"nodeType":"248","endLine":62,"endColumn":27,"suggestions":"255"},{"ruleId":"246","severity":1,"message":"256","line":77,"column":8,"nodeType":"248","endLine":77,"endColumn":17,"suggestions":"257"},{"ruleId":"219","severity":1,"message":"214","line":4,"column":9,"nodeType":"215","messageId":"216","endLine":4,"endColumn":17},{"ruleId":"219","severity":1,"message":"258","line":19,"column":11,"nodeType":"215","messageId":"216","endLine":19,"endColumn":21},{"ruleId":"219","severity":1,"message":"259","line":9,"column":9,"nodeType":"215","messageId":"216","endLine":9,"endColumn":13},{"ruleId":"246","severity":1,"message":"260","line":36,"column":8,"nodeType":"248","endLine":36,"endColumn":10,"suggestions":"261"},{"ruleId":"246","severity":1,"message":"262","line":40,"column":8,"nodeType":"248","endLine":40,"endColumn":42,"suggestions":"263"},{"ruleId":"246","severity":1,"message":"262","line":47,"column":8,"nodeType":"248","endLine":47,"endColumn":54,"suggestions":"264"},{"ruleId":"246","severity":1,"message":"262","line":49,"column":95,"nodeType":"248","endLine":49,"endColumn":134,"suggestions":"265"},{"ruleId":"246","severity":1,"message":"262","line":50,"column":101,"nodeType":"248","endLine":50,"endColumn":140,"suggestions":"266"},{"ruleId":"246","severity":1,"message":"262","line":51,"column":107,"nodeType":"248","endLine":51,"endColumn":146,"suggestions":"267"},{"ruleId":"219","severity":1,"message":"268","line":60,"column":9,"nodeType":"215","messageId":"216","endLine":60,"endColumn":25},{"ruleId":"219","severity":1,"message":"269","line":2,"column":9,"nodeType":"215","messageId":"216","endLine":2,"endColumn":12},{"ruleId":"219","severity":1,"message":"270","line":2,"column":14,"nodeType":"215","messageId":"216","endLine":2,"endColumn":20},{"ruleId":"219","severity":1,"message":"271","line":2,"column":22,"nodeType":"215","messageId":"216","endLine":2,"endColumn":33},{"ruleId":"219","severity":1,"message":"242","line":3,"column":8,"nodeType":"215","messageId":"216","endLine":3,"endColumn":10},{"ruleId":"219","severity":1,"message":"272","line":21,"column":11,"nodeType":"215","messageId":"216","endLine":21,"endColumn":17},{"ruleId":"246","severity":1,"message":"247","line":25,"column":8,"nodeType":"248","endLine":25,"endColumn":18,"suggestions":"273"},"no-native-reassign",["274"],"no-negated-in-lhs",["275"],"no-unused-vars","'Redirect' is defined but never used.","Identifier","unusedVar","'status' is assigned a value but never used.","'Dispatch' is defined but never used.","@typescript-eslint/no-unused-vars","'handleServerAppError' is defined but never used.","'UpdateTaskModelType' is defined but never used.","'ThunkDispatch' is defined but never used.","eqeqeq","Expected '!==' and instead saw '!='.","BinaryExpression","unexpected","'handleServerNetworkError' is defined but never used.","no-fallthrough","Expected a 'break' statement before 'case'.","SwitchCase","case","'Users' is defined but never used.","'getAllUsersFirestoreTC' is defined but never used.","'createUserTC' is defined but never used.","'CCardFooter' is defined but never used.","'Dashboard' is defined but never used.","'useEffect' is defined but never used.","'setUsersTC' is defined but never used.","'getGroupsTC' is defined but never used.","'GroupsUsers' is assigned a value but never used.","'TodolistType' is defined but never used.","'cl' is defined but never used.","'DenseTable' is defined but never used.","'GroupDataType' is defined but never used.","'deleteGroup' is assigned a value but never used.","react-hooks/exhaustive-deps","React Hook useCallback has a missing dependency: 'dispatch'. Either include it or remove the dependency array.","ArrayExpression",["276"],"'Container' is defined but never used.","'ChangeEvent' is defined but never used.","'MenuItem' is defined but never used.","'TextField' is defined but never used.","React Hook useCallback has missing dependencies: 'dispatch' and 'props.uid'. Either include them or remove the dependency array.",["277"],"React Hook useCallback has missing dependencies: 'name' and 'props'. Either include them or remove the dependency array. However, 'props' will change when *any* prop changes, so the preferred fix is to destructure the 'props' object outside of the useCallback call and refer to those specific props inside useCallback.",["278"],"'isLoggedIn' is assigned a value but never used.","'Task' is defined but never used.","React Hook useEffect has missing dependencies: 'dispatch' and 'props.todolist.id'. Either include them or remove the dependency array.",["279"],"React Hook useCallback has a missing dependency: 'props'. Either include it or remove the dependency array. However, 'props' will change when *any* prop changes, so the preferred fix is to destructure the 'props' object outside of the useCallback call and refer to those specific props inside useCallback.",["280"],["281"],["282"],["283"],["284"],"'tasksForTodolist' is assigned a value but never used.","'Box' is defined but never used.","'Button' is defined but never used.","'FormControl' is defined but never used.","'update' is assigned a value but never used.",["285"],"no-global-assign","no-unsafe-negation",{"desc":"286","fix":"287"},{"desc":"288","fix":"289"},{"desc":"290","fix":"291"},{"desc":"292","fix":"293"},{"desc":"294","fix":"295"},{"desc":"294","fix":"296"},{"desc":"294","fix":"297"},{"desc":"294","fix":"298"},{"desc":"294","fix":"299"},{"desc":"300","fix":"301"},"Update the dependencies array to be: [dispatch]",{"range":"302","text":"303"},"Update the dependencies array to be: [dispatch, email, name, phone, props.uid]",{"range":"304","text":"305"},"Update the dependencies array to be: [groupID, name, props]",{"range":"306","text":"307"},"Update the dependencies array to be: [dispatch, props.todolist.id]",{"range":"308","text":"309"},"Update the dependencies array to be: [props]",{"range":"310","text":"311"},{"range":"312","text":"311"},{"range":"313","text":"311"},{"range":"314","text":"311"},{"range":"315","text":"311"},"Update the dependencies array to be: [dispatch, props.id]",{"range":"316","text":"317"},[768,770],"[dispatch]",[2434,2453],"[dispatch, email, name, phone, props.uid]",[3109,3118],"[groupID, name, props]",[1438,1440],"[dispatch, props.todolist.id]",[1555,1589],"[props]",[1820,1866],[1965,2004],[2107,2146],[2255,2294],[842,852],"[dispatch, props.id]"]