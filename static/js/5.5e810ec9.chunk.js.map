{"version":3,"sources":["ui/views/groupUsers/groupUsers.module.css","ui/views/user/user.module.css","ui/common/EditableSpan.tsx","ui/views/user/user.tsx","ui/views/groups/group.tsx","ui/views/groups/groups.tsx","ui/views/groupUsers/groupsUsers.tsx"],"names":["module","exports","EditableSpan","React","memo","props","useState","editMode","setEditMode","value","item","setItem","TextField","onChange","e","currentTarget","autoFocus","onBlur","onDoubleClick","User","dispatch","useDispatch","admin","useSelector","state","users","adminUid","curentUser","userid","console","log","groupName","setGroupName","name","setName","email","setEmail","phoneNumber","phone","setPhone","update","useCallback","payload","updateUserTC","uid","addToo","addUserToGroup","className","cl","userBox","style","spanWrap","spaceBetween","Button","variant","onClick","removeUser","size","type","placeholder","date","group","listTasks","Group","user","map","u","box","removeGroupsTC","id","Groups","useEffect","getGroupsTC","groups","g","data","nGroup","setNumGroup","addGroupsTC","trim","wrap","GroupsUsers","setUsersTC","action","removeUserTC","setUserOnGroupAC","allUsers","displayName","tokensValidAfterTime"],"mappings":"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","file":"static/js/5.5e810ec9.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"wrap\":\"groupUsers_wrap__14uOM\",\"box\":\"groupUsers_box__DfUE8\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"userBox\":\"user_userBox__8ygG-\",\"spaceBetween\":\"user_spaceBetween__1jzCU\",\"spanWrap\":\"user_spanWrap__wYy-I\"};","import React, {ChangeEvent, useState} from 'react';\r\nimport {TextField} from '@material-ui/core';\r\n\r\ntype EditableSpanPropsType = {\r\n    value: string\r\n    onChange: (newValue: string) => void\r\n}\r\n\r\nexport const EditableSpan = React.memo(function (props: EditableSpanPropsType) {\r\n    // console.log(\"EditableSpan called\");\r\n    let [editMode, setEditMode] = useState(false);\r\n    let [item, setItem] = useState(props.value);\r\n\r\n    const activateEditMode = () => {\r\n        setEditMode(true);\r\n        setItem(props.value);\r\n    }\r\n    const activateViewMode = () => {\r\n        setEditMode(false);\r\n        props.onChange(item);\r\n    }\r\n    const changeItem = (e: ChangeEvent<HTMLInputElement>) => {\r\n        setItem(e.currentTarget.value)\r\n    }\r\n\r\n    return editMode\r\n        ? <TextField value={item} onChange={changeItem} autoFocus onBlur={activateViewMode}/>\r\n        : <span onDoubleClick={activateEditMode}>{props.value}</span>\r\n});\r\n","import React, {ChangeEvent, useCallback, useEffect, useState} from 'react';\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {AppRootStateType} from \"../../../bll/store\";\r\nimport {setUserOnGroupAC, setUserOnGroupTC, updateUserTC, userType} from \"../../../bll/userReduser\";\r\nimport cl from './user.module.css'\r\nimport {Button, Input, TextField} from \"@material-ui/core\";\r\nimport {EditableSpan} from \"../../common/EditableSpan\";\r\n\r\ntype propsType = {\r\n    uid: string\r\n    name?: string | undefined\r\n    phoneNumber?:string\r\n    date: string\r\n    email: string\r\n    group?: string | undefined\r\n    listTasks?: {} | undefined\r\n    removeUser: (uid: string) => void\r\n    addUserToGroup: (uid: string,groupName:string,name:string) => void\r\n}\r\nconst User = (props: propsType) => {\r\n    const dispatch = useDispatch()\r\n    const admin = useSelector<AppRootStateType, string>(state => state.users.adminUid)\r\n    const curentUser = useSelector<AppRootStateType, string>(state => state.users.userid)\r\n    console.log(\"isAdmin: \",admin===curentUser);\r\n    let [groupName, setGroupName] = useState<string>('')\r\n    let [name, setName] = useState<string>(props.name ? props.name : 'not a name')\r\n    let [email, setEmail] = useState<string>(props.email)\r\n    let [phone, setPhone] = useState<string>(props.phoneNumber ? props.phoneNumber : 'not a phoneNumber')\r\n    const changeEmail = (email: string) => {setEmail(email)}\r\n    const changeName = (name: string) => {setName(name)}\r\n    const changePhone = (phone: string) => {setPhone(phone)}\r\n    const removeUser = () => {props.removeUser(props.uid)}\r\n    // const changePropUser = useCallback((title: string) => {\r\n    //     props.somefunction(props.id, title)\r\n    // }, [props.id, props.somefunction])\r\n    const update =  useCallback(() => {\r\n        let payload = {email, name}\r\n        dispatch(updateUserTC(props.uid, payload))\r\n    },[email, name])\r\n    const addToo = useCallback(() => {\r\n       props.addUserToGroup(props.uid,groupName,name)\r\n        setGroupName('')\r\n    },[groupName])\r\n    const onChaneNameGroup = (e: ChangeEvent<HTMLInputElement>) => {\r\n        setGroupName(e.currentTarget.value)\r\n    }\r\nconst styles={\r\n        // display:!admin  ?  'block' : 'none'\r\n}\r\n\r\n    return (\r\n        <div key={props.uid} className={cl.userBox} >\r\n            {/*<p>uid:{props.uid}</p>*/}\r\n\r\n            {admin !== curentUser && <>\r\n               <> <span>name:</span><h5>{name ? name : 'no name'}</h5></>\r\n               <> <span>email:</span><h5>{props.email}</h5></>\r\n            </>}\r\n\r\n            {admin === curentUser &&\r\n            <div style={styles}>\r\n                <div className={cl.spanWrap}><span>email:</span><EditableSpan onChange={changeEmail} value={email}/></div>\r\n                <div className={cl.spanWrap}><span>name:</span><EditableSpan onChange={changeName} value={name}/></div>\r\n                <div className={cl.spanWrap}><span>phoneNumber :</span><EditableSpan onChange={changePhone} value={phone}/></div>\r\n                <div className={cl.spaceBetween}>\r\n                <Button variant=\"contained\" onClick={update}>update</Button>\r\n                <Button variant=\"contained\" onClick={removeUser}>delete</Button>\r\n                </div>\r\n                <hr/>\r\n                <div className={cl.spaceBetween}>\r\n                <TextField  variant='filled' size='small' type=\"text\" value={groupName} placeholder={'add groupName'} onChange={onChaneNameGroup}/>\r\n                <Button onClick={addToo}>add to group</Button>\r\n                </div>\r\n                <hr/>\r\n            </div>\r\n            }\r\n            <p>date :{props.date}</p>\r\n            <p>group:{props.group ? props.group : 'no group'}</p>\r\n            <p>listTasks:{props.listTasks ? props.listTasks : 'no tasks'}</p>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default User;\r\n\r\n","import React from 'react';\r\nimport {useDispatch} from \"react-redux\";\r\nimport {removeGroupsTC} from \"../../../bll/userReduser\";\r\nimport cl from \"../groupUsers/groupUsers.module.css\";\r\n\r\ntype userType={\r\n    uid: string\r\n    name:string\r\n}\r\ntype propsType = {\r\n    id: string\r\n    name: string\r\n    users?: userType[]\r\n    // users?: []\r\n}\r\nconst Group = (props: propsType) => {\r\n    const dispatch = useDispatch()\r\n    const update = () => {    }\r\n    const deleteGroup = () => {\r\n        debugger\r\n        dispatch(removeGroupsTC(props.id))\r\n    }\r\n    let user = props.users?.map(u => <div key={u.uid}>\r\n        {/*<p>{u.uid}</p>*/}\r\n        <span >{u?.name}</span></div>)\r\n    return (\r\n        <div className={cl.box}>\r\n            <div><><h5>names group:</h5><p> {props.name}</p></>\r\n                {/*<button onClick={update}>update</button>*/}\r\n                <button onClick={deleteGroup}>delete</button>\r\n            </div>\r\n            {user && <><h5>list users:</h5><p>{user}</p></>}\r\n            <h5>content for group: ...</h5>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default Group;","import React, {ChangeEvent, useEffect, useState} from 'react';\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {addGroupsTC, getGroupsTC, groupType, setUsersTC} from \"../../../bll/userReduser\";\r\nimport {AppRootStateType} from \"../../../bll/store\";\r\nimport Group from \"./group\";\r\nimport {GroupType} from \"../../../bll/Api\";\r\nimport cl from \"../groupUsers/groupUsers.module.css\";\r\n\r\nconst Groups = () => {\r\n    const dispatch = useDispatch()\r\n    useEffect(() => {\r\n        dispatch(getGroupsTC())\r\n    }, [dispatch])\r\n    const allGroups = useSelector<AppRootStateType, Array<GroupType>>(state => state.users.groups)\r\n    const group = allGroups.map(g => <Group key={g.id} id={g.id} name={g.data.group}\r\n                                            users={g.data?.users}\r\n    />)\r\n    let [nGroup, setNumGroup] = useState<string>('')\r\n    const setNewGroup = (e: ChangeEvent<HTMLInputElement>) => {\r\n        setNumGroup(e.currentTarget.value)\r\n    }\r\n    const createGroup = () => {\r\n        dispatch(addGroupsTC(nGroup.trim()))\r\n        setNumGroup('')\r\n    }\r\n    return (\r\n        <>\r\n            <p>GroupsUsers:\r\n                <input type=\"text\" value={nGroup} onChange={setNewGroup}/>\r\n                <button onClick={createGroup}>create group</button>\r\n            </p>\r\n            <div className={cl.wrap}>{group}</div>\r\n        </>\r\n    );\r\n};\r\n\r\nexport default Groups;","import React, {ChangeEvent, useCallback, useEffect, useState} from 'react';\nimport {useDispatch, useSelector} from \"react-redux\";\nimport {removeUserTC, setUserOnGroupAC, setUserOnGroupTC, setUsersTC, userType} from \"../../../bll/userReduser\";\nimport {AppRootStateType} from \"../../../bll/store\";\nimport User from \"../user/user\";\nimport Group from \"../groups/group\";\nimport cl from './groupUsers.module.css';\nimport Groups from \"../groups/groups\";\n\nconst GroupsUsers = () => {\n    const dispatch = useDispatch()\n    useEffect(() => {\n        // debugger\n        dispatch(setUsersTC())\n        // const db = admin.database();\n        // const ref = db.ref(\"restricted_access/secret_document\");\n        // ref.once(\"value\", function(snapshot) {\n        //     console.log(snapshot.val());\n        // });\n    }, [dispatch])\n    const removeUser = useCallback(function (uid: string) {\n        const action = removeUserTC(uid);\n        dispatch(action);\n    }, []);\n    const addUserToGroup=(uid:string,groupName:string)=>{\n        debugger\n        dispatch(setUserOnGroupAC({id:uid, groupName}))\n        // dispatch(setUserOnGroupTC({id:uid, groupName}))\n    }\n\n    const allUsers = useSelector<AppRootStateType, Array<userType>>(state => state.users.users)\n    const user = allUsers.map(u => <User key={u.uid} group={u.group} name={u.displayName} date={u.tokensValidAfterTime}\n                                         email={u.email} listTasks={u.listTasks} uid={u.uid} removeUser={removeUser}\n                                         addUserToGroup={addUserToGroup} phoneNumber={u.phoneNumber}/>)\n    console.log(allUsers);\n\n    return (\n        <div>\n            <h5>all users: </h5>\n            <p>пс. чтоб обновить поля( email и name ) даблклик и апдейт</p>\n            <div className={cl.wrap}>{user}</div>\n            <Groups/>\n        </div>\n    );\n};\n\nexport default GroupsUsers;\n"],"sourceRoot":""}