{"version":3,"sources":["bll/Api.ts","bll/userReduser.ts","App.jsx","reportWebVitals.ts","bll/appReduserOld.js","bll/tasksReduser.ts","bll/todolists-reducer.ts","bll/app-reducer.ts","bll/authReducer.ts","bll/store.ts","index.tsx","ui/components/dashboard/listItems.jsx","ui/components/dashboard/Dashboard.jsx"],"names":["TaskStatuses","TaskPriorities","instance","axios","create","baseURL","Users","getAllUsers","get","getGroups","auth","addGroup","id","name","post","updateUser","uid","payload","put","userRemove","delete","createUser","email","password","username","displayName","initState","groups","users","status","userRecord","adminUid","message","userid","userReducer","state","action","type","console","log","group","filter","g","authAC","setUserOnGroupAC","authTC","dispatch","app","onAuthStateChanged","user","removeUserTC","then","res","setUsersTC","loginUserTC","signInWithEmailAndPassword","catch","er","updateUserTC","createUserTC","data","alert","Login","React","lazy","Register","App","useDispatch","useEffect","useSelector","className","Suspense","fallback","exact","path","render","Dashboard","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","initialState","token","error","isInitialized","isLoggedIn","rootReducer","combineReducers","nav","rest","tasks","todolistId","t","taskId","task","todoListId","map","model","todolist","copyState","todolists","forEach","tl","todoList","entityStatus","title","value","store","createStore","applyMiddleware","thunkMiddleware","firebase","initializeApp","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","ReactDOM","StrictMode","document","getElementById","mainListItems","ListItem","button","to","ListItemIcon","ListItemText","primary","secondaryListItems","ListSubheader","inset","Copyright","Typography","variant","color","align","Link","href","Date","getFullYear","useStyles","makeStyles","theme","root","display","toolbar","paddingRight","toolbarIcon","alignItems","justifyContent","padding","mixins","appBar","zIndex","drawer","transition","transitions","easing","sharp","duration","leavingScreen","appBarShift","marginLeft","width","enteringScreen","menuButton","marginRight","menuButtonHidden","flexGrow","drawerPaper","position","whiteSpace","drawerPaperClose","overflowX","spacing","breakpoints","up","appBarSpacer","content","height","overflow","container","paddingTop","paddingBottom","paper","flexDirection","fixedHeight","Starting","GroupsUsers","classes","useState","open","setOpen","CssBaseline","AppBar","clsx","Toolbar","IconButton","edge","aria-label","onClick","component","noWrap","Badge","badgeContent","Drawer","Divider","List","Container","maxWidth","props","Box","pt"],"mappings":"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","file":"static/js/main.1bb88ea0.chunk.js","sourcesContent":["import axios from 'axios'\n\nconst instance = axios.create({\n    baseURL: 'http://dragan.lisa15.ru/',\n    // baseURL: 'http://localhost:7563/',\n    // baseURL: 'https:/',\n})\nexport const Users = {\n    getAllUsers() {\n        // const promise = instance.get('users');\n        // return promise;\n        return instance.get('users')\n    },\n    getGroups() {\n        return instance.get('api/getGroups')\n    },\n    auth() {\n        return instance.get('auth')\n    },\n    addGroup(id: string, name: string) {\n        // debugger\n        return instance.post('api/createGroup', {id, name})\n    },\n    updateUser(uid: string, payload:{email?:string,nickName?:string}) {\n        // debugger\n        return instance.put(`userUpdate/${uid}`, { payload})\n    },\n    userRemove(uid: string) {\n        // @ts-ignore\n        return instance.delete(`userRemove/${uid}`)\n    },\n    createUser(email:string,password:string,username:string){\n        return instance.post(`createUser`,{email,password,displayName:username})\n    },\n}\nexport const Tasks = {\n    getAllTasks() {\n        // const promise = instance.get('users');\n        // return promise;\n        // debugger\n        return instance.get('users')\n    },\n    getGroups() {\n        // const promise = instance.get('users');\n        // return promise;\n        // debugger\n        return instance.get('/api/get')\n    },\n    addTodo(id: string, name: string) {\n        debugger\n        return instance.post('api/create', {id, name})\n    }\n}\n\n//import * as admin from 'firebase-admin';\n//const serviceAccount = require(\"../fir-silky-firebase-adminsdk-6l12p-2bc5e41df4.json\");\n\n\n//const app = admin.initializeApp();\n// admin.initializeApp({\n//     credential: admin.credential.applicationDefault(),\n//   //credential: admin.credential.cert(serviceAccount),\n//   databaseURL: \"https://fir-silky-default-rtdb.europe-west1.firebasedatabase.app\"\n// });\n// const adminId = 'lisa-fox'\n// admin.auth().createCustomToken(adminId)\n//     .then((customToken)=>{\n//       console.log(customToken);\n//     })\n//     .catch((error)=>{\n//       console.log(error);\n//     })\n\n//https://firebase.google.com/docs/cloud-messaging/auth-server\n//!!!!! https://firebase.google.com/docs/auth/admin/manage-users\n//https://firebase.google.com/docs/database/admin/start/?hl=ru-ru#node.js\n// export const listAllUsers = (nextPageToken) => {\n//   // List batch of users, 1000 at a time.\n//   admin\n//       .auth()\n//       .listUsers(1000, nextPageToken)\n//       .then((listUsersResult) => {\n//           debugger\n//         listUsersResult.users.forEach((userRecord) => {\n//           console.log('user', userRecord.toJSON());\n//         });\n//         if (listUsersResult.pageToken) {\n//           // List next batch of users.\n//           listAllUsers(listUsersResult.pageToken);\n//         }\n//       })\n//       .catch((error) => {\n//         console.log('Error listing users:', error);\n//       });\n//};\n// Start listing users from the beginning, 1000 at a time.\n//listAllUsers();\n//delet \"firebase\": \"^8.2.6\",\n\n//const serviceAccount = require(\"path/to/serviceAccountKey.json\");\n// export const firebaseConfig={\n//   apiKey: \"AIzaSyDGqV4nDHMokspRbNj9OufL531PwdNB2sc\",\n//   authDomain: \"fir-silky.firebaseapp.com\",\n//   databaseURL: \"https://fir-silky-default-rtdb.europe-west1.firebasedatabase.app\",\n//   projectId: \"fir-silky\",\n//   storageBucket: \"fir-silky.appspot.com\",\n//   messagingSenderId: \"459950163847\",\n//   appId: \"1:459950163847:web:2f94e0b34b0c77d10cb522\"\n// }\n\n// types\nexport type LoginParamsType = {\n    password: string\n    email: string\n    rememberMy?: boolean\n}\nexport type myResponseType = {\n    id: number\n    email: string\n    login: string\n}\nexport type TodolistType = {\n    id: string\n    title: string\n    addedDate: string\n    order: number\n}\nexport type ResponseType<D = {}> = {\n    resultCode: number\n    messages: Array<string>\n    fieldsErrors: Array<string>\n    data: D\n}\n\nexport enum TaskStatuses {\n    New = 0,\n    InProgress = 1,\n    Completed = 2,\n    Draft = 3\n}\n\nexport enum TaskPriorities {\n    Low = 0,\n    Middle = 1,\n    Hi = 2,\n    Urgently = 3,\n    Later = 4\n}\n\nexport type TaskType = {\n    description: string\n    title: string\n    status: TaskStatuses\n    priority: TaskPriorities\n    startDate: string\n    deadline: string\n    id: string\n    todoListId: string\n    order: number\n    addedDate: string\n}\nexport type UpdateTaskModelType = {\n    title: string\n    description: string\n    status: TaskStatuses\n    priority: TaskPriorities\n    startDate: string\n    deadline: string\n}\ntype GetTasksResponse = {\n    error: string | null\n    totalCount: number\n    items: TaskType[]\n}\n","import {Dispatch} from \"redux\";\nimport {Users} from \"./Api\";\nimport * as uuid from 'uuid';\nimport firebase from \"firebase\";\nimport {app} from \"../index\";\n// import {listAllUsers} from \"./Api\";\n\ntype setUsersACType = ReturnType<typeof setUsersAC>\ntype authACType = ReturnType<typeof authAC>\ntype setGroupsACType = ReturnType<typeof setGroupsAC>\ntype addGroupsACType = ReturnType<typeof addGroupsAC>\ntype deleteGroupsACType = ReturnType<typeof deleteGroupsAC>\ntype setUserOnGroupACType = ReturnType<typeof setUserOnGroupAC>\ntype setUserRecordACType = ReturnType<typeof setUserRecordAC>\ntype loginUserACType = ReturnType<typeof loginUserAC>\ntype actionType = setUsersACType | setGroupsACType | addGroupsACType | deleteGroupsACType | setUserOnGroupACType |\n    setUserRecordACType | authACType | loginUserACType\ntype providerDataType = {\n    0: { uid: string, email: string, providerId: string }\n    length: number\n    tokensValidAfterTime: string\n}\nexport type userType = {\n    disabled: boolean\n    email: string\n    emailVerified: boolean\n    metadata: { lastSignInTime: string, creationTime: string }\n    passwordHash: string\n    passwordSalt: string\n    providerData: any\n    tokensValidAfterTime: string\n    uid: string\n    name?:string\n    group?:string\n    listTasks?: {}\n}\nexport type groupType = {\n    id:string\n    group:string\n    users?:[{uid:string}]\n}\ntype initStateType = {\n    groups: groupType[]\n    users: Array<userType>\n    status: boolean\n    userRecord:string\n    adminUid:string\n    message:string\n    email:string\n    userid:string\n}\nlet initState: initStateType = {\n    groups: [],\n    users: [],\n    status: false,\n    userRecord: '',\n    adminUid: 'WuVt9TwRQ0grRFpgAKQlB1nJGAm1',\n    message: '',\n    email:'',\n    userid:'',\n}\n\nexport const userReducer = (state = initState, action: actionType) => {\n    switch (action.type) {\n        case \"USERS/LOGIN_USER\":return {...state,email: action.email, userid:action.userid}\n        case \"USERS/AUTH\":\n            console.log(state.status);\n            return {...state, status: action.payload}\n        case \"USERS/SET-USER-RECORD\":\n            return {...state, userRecord:action.payload, status: true}\n        case 'USERS/SET-GROUPS':\n            console.log(action.payload)\n            return {...state, groups: action.payload.group,users:action.payload.uid}\n        case \"USERS/SET-USER-ON-GROUP\": {\n            // debugger\n            console.log(state.groups);\n            return {\n                ...state,\n                // groups: [state.groups.map(g => g.group === action.payload.groupName ? g.users[.uid] : g)]\n            }\n        }\n        case 'USERS/SET-USERS':\n            console.log(action.payload)\n            return {...state, users: action.payload}\n        case 'USERS/ADD-GROUP':\n            return {...state, groups: [...state.groups, action.payload]}\n        case 'USERS/DELETE-GROUP':\n            return {...state, groups:  [state.groups.filter(g=> g.id!==action.payload)] }\n        default:\n            return {...state}\n    }\n}\nexport const authAC = (payload:boolean) =>({type: 'USERS/AUTH',payload}as const)\nexport const setUsersAC = (payload: any) => ({type: 'USERS/SET-USERS', payload} as const)\nexport const setUserRecordAC = (payload: string) => ({type: 'USERS/SET-USER-RECORD', payload} as const)\nexport const setUserOnGroupAC = (payload: {id:string,groupName:string}) => ({type: 'USERS/SET-USER-ON-GROUP', payload} as const)\nexport const setGroupsAC = (payload: any) => ({type: 'USERS/SET-GROUPS', payload} as const)\nexport const addGroupsAC = (payload: any) => ({type: 'USERS/ADD-GROUP', payload} as const)\nexport const deleteGroupsAC = (payload: any) => ({type: 'USERS/DELETE-GROUP', payload} as const)\nexport const loginUserAC = (email:string,userid:string) => ({type: 'USERS/LOGIN_USER', email,userid} as const)\n\nexport const authTC = () => (dispatch: Dispatch) =>{\n    // Users.auth()\n    //     .then(res=>{\n    //     dispatch(authAC(res))\n    // })\n    app.auth().onAuthStateChanged(function (user:any) {\n        console.log('onAuthStateChanged :',user);\n        debugger\n        if (user) {\n            dispatch(authAC(true))\n            dispatch(loginUserAC(user.email, user.uid))\n        } else {\n            dispatch(authAC(false))\n        }\n    })\n}\nexport const removeUserTC = (uid:string) => (dispatch: any) =>{\n    Users.userRemove(uid).then(res=>{\n        dispatch(setUsersTC())\n        console.log(res);\n    })\n}\nexport const loginUserTC = (email:string,password:string) => (dispatch: any) =>{\n    app.auth().signInWithEmailAndPassword(email, password)\n        .then((res) => {\n            dispatch(authAC(true))\n            dispatch(setUsersTC())\n            console.log(res);\n        })\n        .catch(er => {\n            console.log(er);\n        })\n}\nexport const updateUserTC = (uid:string,payload:any) => (dispatch: any) =>{\n    Users.updateUser(uid,payload).then(res=>{\n        dispatch(setUsersTC())\n        console.log(res);\n    })\n}\nexport const createUserTC = (email:string,password:string,username:string) => (dispatch: any) =>{\n    Users.createUser(email,password,username).then(res=>{\n        dispatch(setUserRecordAC(res.data))\n        if(res.data.message){alert(res.data.message)}\n    })\n}\nexport const setUsersTC = () => (dispatch: Dispatch) => {\n    Users.getAllUsers()\n        .then(res => {\n                dispatch(setUsersAC(res.data))\n            }\n        ).catch(er=>\n        alert(er)\n    )\n}\nexport const getGroupsTC = () => (dispatch: Dispatch) => {\n    // Users.getGroupsAll()\n    Users.getGroups()\n        .then(res => {\n                dispatch(setGroupsAC(res.data))\n            }\n        )\n}\nexport const addGroupsTC = ( group: string) => (dispatch: any) => {\n    // debugger\n    let id= uuid.v1()\n    Users.addGroup( id,group)\n        .then(res => {\n            dispatch(getGroupsTC())\n            console.log(res);\n        })\n}\n// export const addItemTC = ( group: string) => (dispatch: Dispatch) => {\n// // export const addGroupsTC = (id: string, group: string) => (dispatch: Dispatch) => {\n//     debugger\n//     // dispatch(setGroupsAC({id,group}))\n//\n//     Users.addGroup(group)\n//         .then(res => {\n//             debugger\n//\n//            dispatch(setGroupsAC(res.data))\n//            // dispatch(setGroupsAC({id,name}))\n//         })\n// }","import React, {useEffect} from 'react'\nimport './App.css'\nimport Dashboard from \"./ui/components/dashboard/Dashboard\";\nimport {Redirect, Route, Switch} from \"react-router-dom\"\nimport {useDispatch, useSelector} from \"react-redux\";\nimport {authTC} from \"./bll/userReduser\";\n// import Login from \"./ui/views/pages/login/Login\";\n\n\n\n// Pages\nconst Login = React.lazy(() => import('./ui/views/pages/login/Login'));\nconst Register = React.lazy(() => import('./ui/views/pages/register/Register'));\n// const Page404 = React.lazy(() => import('./views/pages/page404/Page404'));\n// const Page500 = React.lazy(() => import('./views/pages/page500/Page500'));\nfunction App() {\n\n    const dispatch = useDispatch()\n    useEffect(()=>{\n        dispatch(authTC())\n    },[dispatch])\n    const status = useSelector(state => state.users.status)\n    // if (status) {\n    //     return <Redirect to={'/dashboard'}/>\n    // }else {\n    //     return <Redirect to={'/login'}/>\n    // }\n  return (\n    <div className=\"App\">\n        <React.Suspense fallback={'...loading'}>\n            <Switch>\n                <Route exact path=\"/login\"  render={() => <Login/>} />\n                <Route exact path=\"/register\" render={() => <Register />} />\n                <Route exact path=\"/dashboard\" render=<Dashboard/>/>\n                {/*<Route exact path=\"/404\" name=\"Page 404\" render={props => <Page404 {...props}/>} />*/}\n                {/*<Route exact path=\"/500\" name=\"Page 500\" render={props => <Page500 {...props}/>} />*/}\n                {/*<Route path=\"/\" name=\"Home\" render={props => <TheLayout {...props}/>} />*/}\n                <Dashboard />\n            </Switch>\n        </React.Suspense>\n    </div>\n  );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import {Dispatch} from \"redux\";\n//import * as admin from 'firebase-admin';\n\nconst initialState = {\n  token: ''\n}\n\nexport const changeStateReducer = (state = initialState, { type, ...rest }) => {\n  switch (type) {\n    case 'set':\n      return {...state, ...rest }\n    default:\n      return state\n  }\n}\n","import {Dispatch} from \"redux\";\nimport {TaskPriorities, TaskStatuses, TaskType, UpdateTaskModelType, Users} from \"./Api\";\nimport {AddTodolistActionType, RemoveTodolistActionType, SetTodolistsActionType} from \"./todolists-reducer\";\nimport {SetAppErrorActionType, SetAppStatusActionType} from \"./app-reducer\";\n\n\nexport type UpdateDomainTaskModelType = {\n    title?: string\n    description?: string\n    status?: TaskStatuses\n    priority?: TaskPriorities\n    startDate?: string\n    deadline?: string\n}\nexport type TasksStateType = {\n    [key: string]: Array<TaskType>\n}\ntype ActionsType =\n    | ReturnType<typeof removeTaskAC>\n    | ReturnType<typeof addTaskAC>\n    | ReturnType<typeof updateTaskAC>\n    | AddTodolistActionType\n    | RemoveTodolistActionType\n    | SetTodolistsActionType\n    | ReturnType<typeof setTasksAC>\ntype ThunkDispatch = Dispatch<ActionsType | SetAppStatusActionType | SetAppErrorActionType>\n\n\nconst initialState: TasksStateType = {}\n\nexport const tasksReducer = (state: TasksStateType = initialState, action: ActionsType): TasksStateType => {\n    switch (action.type) {\n        case 'REMOVE-TASK':\n            return {...state, [action.todolistId]: state[action.todolistId].filter(t => t.id != action.taskId)}\n        case 'ADD-TASK':\n            return {...state, [action.task.todoListId]: [action.task, ...state[action.task.todoListId]]}\n        case 'UPDATE-TASK':\n            return {\n                ...state,\n                [action.todolistId]: state[action.todolistId]\n                    .map(t => t.id === action.taskId ? {...t, ...action.model} : t)\n            }\n        case 'ADD-TODOLIST':\n            return {...state, [action.todolist.id]: []}\n        case 'REMOVE-TODOLIST':\n            const copyState = {...state}\n            delete copyState[action.id]\n            return copyState\n        case 'SET-TODOLISTS': {\n            const copyState = {...state}\n            action.todolists.forEach(tl => {\n                copyState[tl.id] = []\n            })\n            return copyState\n        }\n        case 'SET-TASKS':\n            return {...state, [action.todolistId]: action.tasks}\n        default:\n            return state\n    }\n}\n\n// actions\nexport const removeTaskAC = (taskId: string, todolistId: string) =>\n    ({type: 'REMOVE-TASK', taskId, todolistId} as const)\nexport const addTaskAC = (task: TaskType) =>\n    ({type: 'ADD-TASK', task} as const)\nexport const updateTaskAC = (taskId: string, model: UpdateDomainTaskModelType, todolistId: string) =>\n    ({type: 'UPDATE-TASK', model, todolistId, taskId} as const)\nexport const setTasksAC = (tasks: Array<TaskType>, todolistId: string) =>\n    ({type: 'SET-TASKS', tasks, todolistId} as const)\n\n// thunks\n// export const fetchTasksTC = (todolistId: string) => (dispatch: Dispatch<ActionsType | SetAppStatusActionType>) => {\n//     dispatch(setAppStatusAC('loading'))\n//     todolistsAPI.getTasks(todolistId)\n//         .then((res) => {\n//             const tasks = res.data.items\n//             dispatch(setTasksAC(tasks, todolistId))\n//             dispatch(setAppStatusAC('succeeded'))\n//         })\n// }\n// export const removeTaskTC = (taskId: string, todolistId: string) => (dispatch: Dispatch<ActionsType>) => {\n//     todolistsAPI.deleteTask(todolistId, taskId)\n//         .then(res => {\n//             const action = removeTaskAC(taskId, todolistId)\n//             dispatch(action)\n//         })\n// }\n// export const addTaskTC = (title: string, todolistId: string) => (dispatch: Dispatch<ActionsType | SetAppErrorActionType | SetAppStatusActionType>) => {\n//     dispatch(setAppStatusAC('loading'))\n//     todolistsAPI.createTask(todolistId, title)\n//         .then(res => {\n//             if (res.data.resultCode === 0) {\n//                 const task = res.data.data.item\n//                 const action = addTaskAC(task)\n//                 dispatch(action)\n//                 dispatch(setAppStatusAC('succeeded'))\n//             } else {\n//                 handleServerAppError(res.data, dispatch);\n//             }\n//         })\n//         .catch((error) => {\n//             handleServerNetworkError(error, dispatch)\n//         })\n// }\n// export const updateTaskTC = (taskId: string, domainModel: UpdateDomainTaskModelType, todolistId: string) =>\n//     (dispatch: ThunkDispatch, getState: () => AppRootStateType) => {\n//         const state = getState()\n//         const task = state.tasks[todolistId].find(t => t.id === taskId)\n//         if (!task) {\n//             //throw new Error(\"task not found in the state\");\n//             console.warn('task not found in the state')\n//             return\n//         }\n//\n//         const apiModel: UpdateTaskModelType = {\n//             deadline: task.deadline,\n//             description: task.description,\n//             priority: task.priority,\n//             startDate: task.startDate,\n//             title: task.title,\n//             status: task.status,\n//             ...domainModel\n//         }\n//\n//         todolistsAPI.updateTask(todolistId, taskId, apiModel)\n//             .then(res => {\n//                 if (res.data.resultCode === 0) {\n//                     const action = updateTaskAC(taskId, domainModel, todolistId)\n//                     dispatch(action)\n//                 } else {\n//                     handleServerAppError(res.data, dispatch);\n//                 }\n//             })\n//             .catch((error) => {\n//                 handleServerNetworkError(error, dispatch);\n//             })\n//     }\n\n\nexport const setUsersAC = (payload: any) => ({type: 'SET-USERS', payload} as const)\nexport const setGroupsAC = (payload: any) => ({type: 'SET-GROUPS', payload} as const)\nexport const addGroupsAC = (payload: any) => ({type: 'ADD-GROUPS', payload} as const)\n//export const setUsersTC = (payload:any) =>({type: 'SET-USERS',payload}as const)\n// export const setTasksTC = () => (dispatch:Dispatch) =>{\n//   const tasks =firebase.database().ref('tasks')\n//   tasks.on('value',(el)=>{\n//     dispatch(setUsers(el.val()))\n//     // let aaa = el.val()\n//     // console.log(aaa);\n//   })\n// }\nexport const setUsersTC = () => (dispatch: Dispatch) => {\n    Users.getAllUsers()\n        .then(res => {\n                dispatch(setUsersAC(res.data.users))\n            }\n        )\n}\nexport const setTasksTC = () => (dispatch: Dispatch) => {\n    Users.getAllUsers()\n        .then(res => {\n                dispatch(setUsersAC(res.data.users))\n            }\n        )\n}\n// export const addGroups = (id: string, name: string) => (dispatch: Dispatch) => {\n//     debugger\n//     Users.addGroup(id, name)\n//         .then(res => {\n//             debugger\n//             dispatch(setGroupsAC(res.data))\n//         })\n// }","import {Dispatch} from 'redux'\r\nimport {TodolistType} from \"./Api\";\r\nimport {RequestStatusType, setAppStatusAC, SetAppStatusActionType} from \"./app-reducer\";\r\n\r\nconst initialState: Array<TodolistDomainType> = []\r\n\r\nexport const todolistsReducer = (state: Array<TodolistDomainType> = initialState, action: ActionsType): Array<TodolistDomainType> => {\r\n    switch (action.type) {\r\n        case 'REMOVE-TODOLIST':\r\n            return state.filter(tl => tl.id != action.id)\r\n        case 'ADD-TODOLIST':\r\n            return [{...action.todolist, filter: 'all', entityStatus: 'idle'}, ...state]\r\n\r\n        case 'CHANGE-TODOLIST-TITLE':\r\n            return state.map(tl => tl.id === action.id ? {...tl, title: action.title} : tl)\r\n        case 'CHANGE-TODOLIST-FILTER':\r\n            return state.map(tl => tl.id === action.id ? {...tl, filter: action.filter} : tl)\r\n        case 'CHANGE-TODOLIST-ENTITY-STATUS':\r\n            return state.map(tl => tl.id === action.id ? {...tl, entityStatus: action.status} : tl)\r\n        case 'SET-TODOLISTS':\r\n            return action.todolists.map(tl => ({...tl, filter: 'all', entityStatus: 'idle'}))\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\n// actions\r\nexport const removeTodolistAC = (id: string) => ({type: 'REMOVE-TODOLIST', id} as const)\r\nexport const addTodolistAC = (todolist: TodolistType) => ({type: 'ADD-TODOLIST', todolist} as const)\r\nexport const changeTodolistTitleAC = (id: string, title: string) => ({\r\n    type: 'CHANGE-TODOLIST-TITLE',\r\n    id,\r\n    title\r\n} as const)\r\nexport const changeTodolistFilterAC = (id: string, filter: FilterValuesType) => ({\r\n    type: 'CHANGE-TODOLIST-FILTER',\r\n    id,\r\n    filter\r\n} as const)\r\nexport const changeTodolistEntityStatusAC = (id: string, status: RequestStatusType) => ({\r\n    type: 'CHANGE-TODOLIST-ENTITY-STATUS', id, status } as const)\r\nexport const setTodolistsAC = (todolists: Array<TodolistType>) => ({type: 'SET-TODOLISTS', todolists} as const)\r\n\r\n// thunks\r\n// export const fetchTodolistsTC = () => {\r\n//     return (dispatch: ThunkDispatch) => {\r\n//         dispatch(setAppStatusAC('loading'))\r\n//         todolistsAPI.getTodolists()\r\n//             .then((res) => {\r\n//                 dispatch(setTodolistsAC(res.data))\r\n//                 dispatch(setAppStatusAC('succeeded'))\r\n//             })\r\n//     }\r\n// }\r\n// export const removeTodolistTC = (todolistId: string) => {\r\n//     return (dispatch: ThunkDispatch) => {\r\n//         //изменим глобальный статус приложения, чтобы вверху полоса побежала\r\n//         dispatch(setAppStatusAC('loading'))\r\n//         //изменим статус конкретного тудулиста, чтобы он мог задизеблить что надо\r\n//         dispatch(changeTodolistEntityStatusAC(todolistId, 'loading'))\r\n//         todolistsAPI.deleteTodolist(todolistId)\r\n//             .then((res) => {\r\n//                 dispatch(removeTodolistAC(todolistId))\r\n//                 //скажем глобально приложению, что асинхронная операция завершена\r\n//                 dispatch(setAppStatusAC('succeeded'))\r\n//             })\r\n//     }\r\n// }\r\n// export const addTodolistTC = (title: string) => {\r\n//     return (dispatch: ThunkDispatch) => {\r\n//         dispatch(setAppStatusAC('loading'))\r\n//         todolistsAPI.createTodolist(title)\r\n//             .then((res) => {\r\n//                 dispatch(addTodolistAC(res.data.data.item))\r\n//                 dispatch(setAppStatusAC('succeeded'))\r\n//             })\r\n//     }\r\n// }\r\n// export const changeTodolistTitleTC = (id: string, title: string) => {\r\n//     return (dispatch: Dispatch<ActionsType>) => {\r\n//         todolistsAPI.updateTodolist(id, title)\r\n//             .then((res) => {\r\n//                 dispatch(changeTodolistTitleAC(id, title))\r\n//             })\r\n//     }\r\n// }\r\n\r\n// types\r\nexport type AddTodolistActionType = ReturnType<typeof addTodolistAC>;\r\nexport type RemoveTodolistActionType = ReturnType<typeof removeTodolistAC>;\r\nexport type SetTodolistsActionType = ReturnType<typeof setTodolistsAC>;\r\ntype ActionsType =\r\n    | RemoveTodolistActionType\r\n    | AddTodolistActionType\r\n    | ReturnType<typeof changeTodolistTitleAC>\r\n    | ReturnType<typeof changeTodolistFilterAC>\r\n    | SetTodolistsActionType\r\n    | ReturnType<typeof changeTodolistEntityStatusAC>\r\nexport type FilterValuesType = 'all' | 'active' | 'completed';\r\nexport type TodolistDomainType = TodolistType & {\r\n    filter: FilterValuesType\r\n    entityStatus: RequestStatusType\r\n}\r\ntype ThunkDispatch = Dispatch<ActionsType | SetAppStatusActionType>\r\n","import {Dispatch} from \"redux\";\r\nimport {handleServerAppError} from \"../utils/error-utils\";\r\n\r\nconst initialState: InitialStateType = {\r\n    status: 'idle',\r\n    error: null,\r\n    isInitialized: false\r\n}\r\n\r\nexport const appReducer = (state: InitialStateType = initialState, action: ActionsType): InitialStateType => {\r\n    switch (action.type) {\r\n        case 'APP/SET-STATUS':\r\n            return {...state, status: action.status}\r\n        case 'APP/SET-ERROR':\r\n            return {...state, error: action.error}\r\n        case 'IS-INIT':\r\n            return {...state, isInitialized: action.isInitialized}\r\n        default:\r\n            return {...state}\r\n    }\r\n}\r\n\r\nexport type RequestStatusType = 'idle' | 'loading' | 'succeeded' | 'failed'\r\nexport type InitialStateType = {\r\n    // происходит ли сейчас взаимодействие с сервером\r\n    status: RequestStatusType\r\n    // если ошибка какая-то глобальная произойдёт - мы запишем текст ошибки сюда\r\n    error: string | null\r\n    isInitialized: boolean\r\n}\r\n\r\nexport const setAppErrorAC = (error: string | null) => ({type: 'APP/SET-ERROR', error} as const)\r\nexport const setAppStatusAC = (status: RequestStatusType) => ({type: 'APP/SET-STATUS', status} as const)\r\nexport const setIsInitializedAC = (isInitialized: boolean) => ({type: 'IS-INIT', isInitialized} as const)\r\nexport type SetAppErrorActionType = ReturnType<typeof setAppErrorAC>\r\nexport type SetAppStatusActionType = ReturnType<typeof setAppStatusAC>\r\nexport type setIsInitializedACType = ReturnType<typeof setIsInitializedAC>\r\n\r\n\r\n// export const initializeAppTC = () => (dispatch: Dispatch) => {\r\n//     authAPI.me()\r\n//         .then(res => {\r\n//         // debugger\r\n//         if (res.data.resultCode === 0) {\r\n//             dispatch(setIsLoggedInAC(true));\r\n//\r\n//          }\r\n//         else {\r\n//             // debugger\r\n//             // // handleServerAppError(err, dispatch);\r\n//         }\r\n//     })\r\n//         .catch((err) => {\r\n//             handleServerAppError(err, dispatch);\r\n//             dispatch(setIsInitializedAC(true))\r\n//             // throw new Error(err.message)\r\n//         })\r\n//     dispatch(setIsInitializedAC(true))\r\n// }\r\n\r\ntype ActionsType =\r\n    | SetAppErrorActionType\r\n    | SetAppStatusActionType\r\n    | setIsInitializedACType\r\n","import { Dispatch } from 'redux'\r\nimport {handleServerAppError, handleServerNetworkError} from \"../utils/error-utils\"\r\nimport {LoginParamsType} from \"./Api\";\r\nimport {SetAppErrorActionType, setAppStatusAC, SetAppStatusActionType} from \"./app-reducer\";\r\n\r\nconst initialState = {\r\n    isLoggedIn: false\r\n}\r\ntype InitialStateType = typeof initialState\r\n\r\nexport const authReducer = (state: InitialStateType = initialState, action: ActionsType): InitialStateType => {\r\n    switch (action.type) {\r\n        case 'login/SET-IS-LOGGED-IN':\r\n            return {...state, isLoggedIn: action.value}\r\n        default:\r\n            return state\r\n    }\r\n}\r\n// actions\r\nexport const setIsLoggedInAC = (value: boolean) =>\r\n    ({type: 'login/SET-IS-LOGGED-IN', value} as const)\r\n\r\n// thunks\r\nexport const loginTC = (data: LoginParamsType) => (dispatch: Dispatch<ActionsType>) => {\r\n    dispatch(setAppStatusAC('loading'))\r\n    // authAPI.login(data).\r\n    //     then(res=>{\r\n    //     if (res.data.resultCode === 0) {\r\n    //         dispatch(setIsLoggedInAC(true))\r\n    //         dispatch(setAppStatusAC('succeeded'))\r\n    //     } else {\r\n    //         handleServerAppError(res.data, dispatch);\r\n    //     }\r\n    // })\r\n    //     .catch((error) => {\r\n    //         handleServerNetworkError(error, dispatch)\r\n    //     })\r\n\r\n}\r\n\r\n// export const logoutTC = () => (dispatch: Dispatch<ActionsType>) => {\r\n//     dispatch(setAppStatusAC('loading'))\r\n//     authAPI.logout()\r\n//         .then(res => {\r\n//             if (res.data.resultCode === 0) {\r\n//                 dispatch(setIsLoggedInAC(false))\r\n//                 dispatch(setAppStatusAC('succeeded'))\r\n//             } else {\r\n//                 handleServerAppError(res.data, dispatch)\r\n//             }\r\n//         })\r\n//         .catch((error) => {\r\n//             handleServerNetworkError(error, dispatch)\r\n//         })\r\n// }\r\n\r\n// types\r\ntype ActionsType = ReturnType<typeof setIsLoggedInAC> | SetAppStatusActionType | SetAppErrorActionType\r\n","import {applyMiddleware, combineReducers, createStore} from 'redux'\nimport {userReducer} from \"./userReduser\";\nimport thunkMiddleware from \"redux-thunk\";\nimport {changeStateReducer} from \"./appReduserOld\";\nimport {tasksReducer} from \"./tasksReduser\";\nimport {todolistsReducer} from \"./todolists-reducer\";\nimport {appReducer} from \"./app-reducer\";\nimport {authReducer} from \"./authReducer\";\n\nconst rootReducer = combineReducers({\n    users: userReducer,\n    nav: changeStateReducer,\n    //login: loginReducer\n    tasks: tasksReducer,\n    todoList: todolistsReducer,\n    app: appReducer,\n    auth: authReducer,\n});\n\nconst store = createStore(rootReducer, applyMiddleware(thunkMiddleware));\nexport type AppRootStateType = ReturnType<typeof rootReducer>;\n\nexport default store\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport {Provider} from \"react-redux\";\nimport store from \"./bll/store\";\nimport {HashRouter} from \"react-router-dom\";\nimport firebase from \"firebase\"\nimport 'firebase/auth'\n\n\nexport const app=firebase.initializeApp({\n    apiKey: \"AIzaSyDGqV4nDHMokspRbNj9OufL531PwdNB2sc\",\n    authDomain: \"fir-silky.firebaseapp.com\",\n    databaseURL: \"https://fir-silky-default-rtdb.europe-west1.firebasedatabase.app\",\n    projectId: \"fir-silky\",\n    storageBucket: \"fir-silky.appspot.com\",\n    messagingSenderId: \"459950163847\",\n    appId: \"1:459950163847:web:bcbb780902e981920cb522\"\n})\nReactDOM.render(\n    <React.StrictMode>\n        <Provider store={store}>\n            <HashRouter>\n            <App/>\n            </HashRouter>\n        </Provider>\n    </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n","import React from 'react';\nimport ListItem from '@material-ui/core/ListItem';\nimport ListItemIcon from '@material-ui/core/ListItemIcon';\nimport ListItemText from '@material-ui/core/ListItemText';\nimport ListSubheader from '@material-ui/core/ListSubheader';\nimport DashboardIcon from '@material-ui/icons/Dashboard';\nimport ShoppingCartIcon from '@material-ui/icons/ShoppingCart';\nimport PeopleIcon from '@material-ui/icons/People';\nimport BarChartIcon from '@material-ui/icons/BarChart';\nimport LayersIcon from '@material-ui/icons/Layers';\nimport AssignmentIcon from '@material-ui/icons/Assignment';\nimport {NavLink} from \"react-router-dom\";\n\nexport const mainListItems = (\n  <div>\n    <ListItem button>\n        <NavLink to='/starting'>\n      <ListItemIcon>\n        <DashboardIcon />\n      </ListItemIcon>\n      <ListItemText primary=\"Dashboard\" />\n        </NavLink>\n    </ListItem>\n    <ListItem button>\n      <ListItemIcon>\n        <ShoppingCartIcon />\n      </ListItemIcon>\n      <ListItemText primary=\"Orders\" />\n    </ListItem>\n    <ListItem button>\n      <ListItemIcon>\n        <PeopleIcon />\n      </ListItemIcon>\n        <NavLink to='/groupsUsers'>\n            <ListItemText primary=\"GroupsUsers\" />\n        </NavLink>\n    </ListItem>\n    <ListItem button>\n      <ListItemIcon>\n        <BarChartIcon />\n      </ListItemIcon>\n      <ListItemText primary=\"Reports\" />\n    </ListItem>\n    <ListItem button>\n      <ListItemIcon>\n        <LayersIcon />\n      </ListItemIcon>\n      <ListItemText primary=\"Integrations\" />\n    </ListItem>\n  </div>\n);\n\nexport const secondaryListItems = (\n  <div>\n    <ListSubheader inset>Saved reports</ListSubheader>\n    <ListItem button>\n      <ListItemIcon>\n        <AssignmentIcon />\n      </ListItemIcon>\n      <ListItemText primary=\"Current month\" />\n    </ListItem>\n    <ListItem button>\n      <ListItemIcon>\n        <AssignmentIcon />\n      </ListItemIcon>\n      <ListItemText primary=\"Last quarter\" />\n    </ListItem>\n    <ListItem button>\n      <ListItemIcon>\n        <AssignmentIcon />\n      </ListItemIcon>\n      <ListItemText primary=\"Year-end sale\" />\n    </ListItem>\n  </div>\n);\n","import React from 'react';\nimport clsx from 'clsx';\nimport { makeStyles } from '@material-ui/core/styles';\nimport CssBaseline from '@material-ui/core/CssBaseline';\nimport Drawer from '@material-ui/core/Drawer';\nimport Box from '@material-ui/core/Box';\nimport AppBar from '@material-ui/core/AppBar';\nimport Toolbar from '@material-ui/core/Toolbar';\nimport List from '@material-ui/core/List';\nimport Typography from '@material-ui/core/Typography';\nimport Divider from '@material-ui/core/Divider';\nimport IconButton from '@material-ui/core/IconButton';\nimport Badge from '@material-ui/core/Badge';\nimport Container from '@material-ui/core/Container';\nimport Link from '@material-ui/core/Link';\nimport MenuIcon from '@material-ui/icons/Menu';\nimport ChevronLeftIcon from '@material-ui/icons/ChevronLeft';\nimport NotificationsIcon from '@material-ui/icons/Notifications';\nimport { mainListItems, secondaryListItems } from './listItems';\nimport {Switch, Route, Redirect} from \"react-router-dom\"\n// import Route from \"react-router-dom\";\n\nfunction Copyright() {\n  return (\n    <Typography variant=\"body2\" color=\"textSecondary\" align=\"center\">\n      {'Copyright © '}\n      <Link color=\"inherit\" href=\"https://material-ui.com/\">\n        Your Website\n      </Link>{' '}\n      {new Date().getFullYear()}\n      {'.'}\n    </Typography>\n  );\n}\nconst drawerWidth = 240;\nconst useStyles = makeStyles((theme) => ({\n  root: {\n    display: 'flex',\n  },\n  toolbar: {\n    paddingRight: 24, // keep right padding when drawer closed\n  },\n  toolbarIcon: {\n    display: 'flex',\n    alignItems: 'center',\n    justifyContent: 'flex-end',\n    padding: '0 8px',\n    ...theme.mixins.toolbar,\n  },\n  appBar: {\n    zIndex: theme.zIndex.drawer + 1,\n    transition: theme.transitions.create(['width', 'margin'], {\n      easing: theme.transitions.easing.sharp,\n      duration: theme.transitions.duration.leavingScreen,\n    }),\n  },\n  appBarShift: {\n    marginLeft: drawerWidth,\n    width: `calc(100% - ${drawerWidth}px)`,\n    transition: theme.transitions.create(['width', 'margin'], {\n      easing: theme.transitions.easing.sharp,\n      duration: theme.transitions.duration.enteringScreen,\n    }),\n  },\n  menuButton: {\n    marginRight: 36,\n  },\n  menuButtonHidden: {\n    display: 'none',\n  },\n  title: {\n    flexGrow: 1,\n  },\n  drawerPaper: {\n    position: 'relative',\n    whiteSpace: 'nowrap',\n    width: drawerWidth,\n    transition: theme.transitions.create('width', {\n      easing: theme.transitions.easing.sharp,\n      duration: theme.transitions.duration.enteringScreen,\n    }),\n  },\n  drawerPaperClose: {\n    overflowX: 'hidden',\n    transition: theme.transitions.create('width', {\n      easing: theme.transitions.easing.sharp,\n      duration: theme.transitions.duration.leavingScreen,\n    }),\n    width: theme.spacing(7),\n    [theme.breakpoints.up('sm')]: {\n      width: theme.spacing(9),\n    },\n  },\n  appBarSpacer: theme.mixins.toolbar,\n  content: {\n    flexGrow: 1,\n    height: '100vh',\n    overflow: 'auto',\n  },\n  container: {\n    paddingTop: theme.spacing(4),\n    paddingBottom: theme.spacing(4),\n  },\n  paper: {\n    padding: theme.spacing(2),\n    display: 'flex',\n    overflow: 'auto',\n    flexDirection: 'column',\n  },\n  fixedHeight: {\n    height: 240,\n  },\n}));\n\n// Pages\nconst Starting = React.lazy(() => import('../../views/starting'));\nconst GroupsUsers = React.lazy(() => import('../../views/groupUsers/groupsUsers'));\n// const Page404 = React.lazy(() => import('./views/pages/page404/Page404'));\n// const Page500 = React.lazy(() => import('./views/pages/page500/Page500'));\n\nexport default function Dashboard() {\n  const classes = useStyles();\n  const [open, setOpen] = React.useState(true);\n  const handleDrawerOpen = () => {\n    setOpen(true);\n  };\n  const handleDrawerClose = () => {\n    setOpen(false);\n  };\n\n\n  return (\n    <div className={classes.root}>\n      <CssBaseline />\n      <AppBar position=\"absolute\" className={clsx(classes.appBar, open && classes.appBarShift)}>\n        <Toolbar className={classes.toolbar}>\n          <IconButton edge=\"start\" color=\"inherit\" aria-label=\"open drawer\" onClick={handleDrawerOpen}\n                      className={clsx(classes.menuButton, open && classes.menuButtonHidden)} >\n            <MenuIcon />\n          </IconButton>\n          <Typography component=\"h1\" variant=\"h6\" color=\"inherit\" noWrap className={classes.title}>\n            Dashboard\n          </Typography>\n          <IconButton color=\"inherit\">\n            <Badge badgeContent={4} color=\"secondary\">\n              <NotificationsIcon />\n            </Badge>\n          </IconButton>\n        </Toolbar>\n      </AppBar>\n      <Drawer variant=\"permanent\" open={open}\n        classes={{paper: clsx(classes.drawerPaper, !open && classes.drawerPaperClose),}} >\n        <div className={classes.toolbarIcon}>\n          <IconButton onClick={handleDrawerClose}>\n            <ChevronLeftIcon />\n          </IconButton>\n        </div>\n        <Divider />\n        <List>{mainListItems}</List>\n        <Divider />\n        <List>{secondaryListItems}</List>\n      </Drawer>\n      <main className={classes.content}>\n        <div className={classes.appBarSpacer} />\n        <Container maxWidth=\"lg\" className={classes.container}>\n          <React.Suspense fallback={'...loading'}>\n            <Switch>\n                {/*<Route path=\"/\"  render={props => <Starting {...props}/>} />*/}\n                <Route path=\"/starting\" render={props => <Starting {...props}/>} />\n                <Route path=\"/groupsUsers\" render={props => <GroupsUsers {...props}/>} />\n            {/*    /!*<Route exact path=\"/404\" name=\"Page 404\" render={props => <Page404 {...props}/>} />*!/*/}\n            {/*    /!*<Route exact path=\"/500\" name=\"Page 500\" render={props => <Page500 {...props}/>} />*!/*/}\n            </Switch>\n          </React.Suspense>\n          <Box pt={4}>\n            <Copyright />\n          </Box>\n        </Container>\n      </main>\n    </div>\n  );\n}\n"],"sourceRoot":""}