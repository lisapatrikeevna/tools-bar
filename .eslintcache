[{"E:\\react\\dragan wrap\\node-fb-admin\\tools-bar\\src\\index.tsx":"1","E:\\react\\dragan wrap\\node-fb-admin\\tools-bar\\src\\reportWebVitals.ts":"2","E:\\react\\dragan wrap\\node-fb-admin\\tools-bar\\src\\bll\\store.ts":"3","E:\\react\\dragan wrap\\node-fb-admin\\tools-bar\\src\\App.jsx":"4","E:\\react\\dragan wrap\\node-fb-admin\\tools-bar\\src\\bll\\userReduser.ts":"5","E:\\react\\dragan wrap\\node-fb-admin\\tools-bar\\src\\ui\\components\\dashboard\\Dashboard.jsx":"6","E:\\react\\dragan wrap\\node-fb-admin\\tools-bar\\src\\bll\\Api.ts":"7","E:\\react\\dragan wrap\\node-fb-admin\\tools-bar\\src\\ui\\views\\groupUsers\\groupsUsers.tsx":"8","E:\\react\\dragan wrap\\node-fb-admin\\tools-bar\\src\\ui\\components\\dashboard\\listItems.jsx":"9","E:\\react\\dragan wrap\\node-fb-admin\\tools-bar\\src\\ui\\components\\dashboard\\Chart.jsx":"10","E:\\react\\dragan wrap\\node-fb-admin\\tools-bar\\src\\ui\\components\\dashboard\\Deposits.jsx":"11","E:\\react\\dragan wrap\\node-fb-admin\\tools-bar\\src\\ui\\components\\dashboard\\Orders.jsx":"12","E:\\react\\dragan wrap\\node-fb-admin\\tools-bar\\src\\ui\\views\\starting.jsx":"13","E:\\react\\dragan wrap\\node-fb-admin\\tools-bar\\src\\ui\\components\\dashboard\\Title.jsx":"14","E:\\react\\dragan wrap\\node-fb-admin\\tools-bar\\src\\bll\\appReduserOld.js":"15","E:\\react\\dragan wrap\\node-fb-admin\\tools-bar\\src\\bll\\tasksReduser.ts":"16","E:\\react\\dragan wrap\\node-fb-admin\\tools-bar\\src\\bll\\todolists-reducer.ts":"17","E:\\react\\dragan wrap\\node-fb-admin\\tools-bar\\src\\bll\\app-reducer.ts":"18","E:\\react\\dragan wrap\\node-fb-admin\\tools-bar\\src\\bll\\authReducer.ts":"19","E:\\react\\dragan wrap\\node-fb-admin\\tools-bar\\src\\utils\\error-utils.ts":"20","E:\\react\\dragan wrap\\node-fb-admin\\tools-bar\\src\\ui\\views\\user\\user.tsx":"21","E:\\react\\dragan wrap\\node-fb-admin\\tools-bar\\src\\ui\\views\\pages\\login\\Login.js":"22","E:\\react\\dragan wrap\\node-fb-admin\\tools-bar\\src\\ui\\views\\pages\\register\\Register.js":"23","E:\\react\\dragan wrap\\node-fb-admin\\tools-bar\\src\\ui\\common\\EditableSpan.tsx":"24","E:\\react\\dragan wrap\\node-fb-admin\\tools-bar\\src\\ui\\views\\groups\\groups.tsx":"25","E:\\react\\dragan wrap\\node-fb-admin\\tools-bar\\src\\ui\\views\\groups\\group.tsx":"26"},{"size":1183,"mtime":1614441416029,"results":"27","hashOfConfig":"28"},{"size":425,"mtime":1612565314468,"results":"29","hashOfConfig":"28"},{"size":773,"mtime":1613447907106,"results":"30","hashOfConfig":"28"},{"size":1740,"mtime":1614764140156,"results":"31","hashOfConfig":"28"},{"size":7649,"mtime":1614729494442,"results":"32","hashOfConfig":"28"},{"size":7203,"mtime":1614524141831,"results":"33","hashOfConfig":"28"},{"size":5192,"mtime":1614768731358,"results":"34","hashOfConfig":"28"},{"size":1918,"mtime":1614729494457,"results":"35","hashOfConfig":"28"},{"size":2490,"mtime":1614558770291,"results":"36","hashOfConfig":"28"},{"size":1429,"mtime":1612623836152,"results":"37","hashOfConfig":"28"},{"size":847,"mtime":1612111362000,"results":"38","hashOfConfig":"28"},{"size":2351,"mtime":1612111362000,"results":"39","hashOfConfig":"28"},{"size":1533,"mtime":1612630345203,"results":"40","hashOfConfig":"28"},{"size":356,"mtime":1612625632421,"results":"41","hashOfConfig":"28"},{"size":301,"mtime":1612639101681,"results":"42","hashOfConfig":"28"},{"size":6687,"mtime":1613529036574,"results":"43","hashOfConfig":"28"},{"size":4673,"mtime":1613448513302,"results":"44","hashOfConfig":"28"},{"size":2383,"mtime":1613449007035,"results":"45","hashOfConfig":"28"},{"size":1999,"mtime":1613449590988,"results":"46","hashOfConfig":"28"},{"size":761,"mtime":1613449590995,"results":"47","hashOfConfig":"28"},{"size":3848,"mtime":1614767454148,"results":"48","hashOfConfig":"28"},{"size":3819,"mtime":1614673860629,"results":"49","hashOfConfig":"28"},{"size":3525,"mtime":1614524390187,"results":"50","hashOfConfig":"28"},{"size":943,"mtime":1614533567650,"results":"51","hashOfConfig":"28"},{"size":1394,"mtime":1614558024850,"results":"52","hashOfConfig":"28"},{"size":1093,"mtime":1614723485331,"results":"53","hashOfConfig":"28"},{"filePath":"54","messages":"55","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"56"},"1j88pd3",{"filePath":"57","messages":"58","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"56"},{"filePath":"59","messages":"60","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"56"},{"filePath":"61","messages":"62","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"63","usedDeprecatedRules":"64"},{"filePath":"65","messages":"66","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"67","usedDeprecatedRules":"56"},{"filePath":"68","messages":"69","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"70","usedDeprecatedRules":"64"},{"filePath":"71","messages":"72","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"73","usedDeprecatedRules":"56"},{"filePath":"74","messages":"75","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"76","usedDeprecatedRules":"56"},{"filePath":"77","messages":"78","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"64"},{"filePath":"79","messages":"80","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"64"},{"filePath":"81","messages":"82","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"64"},{"filePath":"83","messages":"84","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"64"},{"filePath":"85","messages":"86","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"87","usedDeprecatedRules":"64"},{"filePath":"88","messages":"89","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"90"},{"filePath":"91","messages":"92","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"93","usedDeprecatedRules":"64"},{"filePath":"94","messages":"95","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"96","usedDeprecatedRules":"56"},{"filePath":"97","messages":"98","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"99","usedDeprecatedRules":"56"},{"filePath":"100","messages":"101","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"102","usedDeprecatedRules":"56"},{"filePath":"103","messages":"104","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"105","usedDeprecatedRules":"56"},{"filePath":"106","messages":"107","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"108"},{"filePath":"109","messages":"110","errorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":"111","usedDeprecatedRules":"56"},{"filePath":"112","messages":"113","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"114","usedDeprecatedRules":"64"},{"filePath":"115","messages":"116","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"117","usedDeprecatedRules":"64"},{"filePath":"118","messages":"119","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"56"},{"filePath":"120","messages":"121","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"122","usedDeprecatedRules":"56"},{"filePath":"123","messages":"124","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"125","usedDeprecatedRules":"56"},"E:\\react\\dragan wrap\\node-fb-admin\\tools-bar\\src\\index.tsx",[],["126","127"],"E:\\react\\dragan wrap\\node-fb-admin\\tools-bar\\src\\reportWebVitals.ts",[],"E:\\react\\dragan wrap\\node-fb-admin\\tools-bar\\src\\bll\\store.ts",[],"E:\\react\\dragan wrap\\node-fb-admin\\tools-bar\\src\\App.jsx",["128","129"],"import React, {useEffect} from 'react'\nimport './App.css'\nimport Dashboard from \"./ui/components/dashboard/Dashboard\";\nimport {Redirect, Route, Switch} from \"react-router-dom\"\nimport {useDispatch, useSelector} from \"react-redux\";\nimport {authTC} from \"./bll/userReduser\";\n// import Login from \"./ui/views/pages/login/Login\";\n\n\n// Pages\nconst Login = React.lazy(() => import('./ui/views/pages/login/Login'));\nconst Register = React.lazy(() => import('./ui/views/pages/register/Register'));\n// const Page404 = React.lazy(() => import('./views/pages/page404/Page404'));\n// const Page500 = React.lazy(() => import('./views/pages/page500/Page500'));\nfunction App() {\n\n    const dispatch = useDispatch()\n    useEffect(() => {\n        dispatch(authTC())\n    }, [dispatch])\n    const status = useSelector(state => state.users.status)\n   // if (!status) {return <Redirect to={'/login'}/>}\n    // else {return <Redirect to={'/groupsUsers'}/>}\n\n    return (\n        <div className=\"App\">\n            <React.Suspense fallback={'...loading'}>\n                <Switch>\n                    <Route exact path=\"/login\" render={() => <Login/>}/>\n                    <Route exact path=\"/register\" render={() => <Register/>}/>\n                    <Route exact path=\"/dashboard\" render={() => <Dashboard/>}/>\n                    {/*<Route exact path=\"/404\" name=\"Page 404\" render={props => <Page404 {...props}/>} />*/}\n                    {/*<Route exact path=\"/500\" name=\"Page 500\" render={props => <Page500 {...props}/>} />*/}\n                    {/*<Route path=\"/\" name=\"Home\" render={props => <TheLayout {...props}/>} />*/}\n                    <Dashboard/>\n                </Switch>\n            </React.Suspense>\n        </div>\n    )\n}\n\nexport default App;\n",["130","131"],"E:\\react\\dragan wrap\\node-fb-admin\\tools-bar\\src\\bll\\userReduser.ts",["132","133"],"import {Dispatch} from \"redux\";\nimport {Users} from \"./Api\";\nimport * as uuid from 'uuid';\nimport firebase from \"firebase\";\nimport {app} from \"../index\";\nimport {log} from \"util\";\n// import {listAllUsers} from \"./Api\";\n\ntype setUsersACType = ReturnType<typeof setUsersAC>\ntype authACType = ReturnType<typeof authAC>\ntype setGroupsACType = ReturnType<typeof setGroupsAC>\ntype addGroupsACType = ReturnType<typeof addGroupsAC>\ntype deleteGroupsACType = ReturnType<typeof deleteGroupsAC>\ntype setUserOnGroupACType = ReturnType<typeof setUserOnGroupAC>\ntype setUserRecordACType = ReturnType<typeof setUserRecordAC>\ntype loginUserACType = ReturnType<typeof loginUserAC>\ntype actionType = setUsersACType | setGroupsACType | addGroupsACType | deleteGroupsACType | setUserOnGroupACType |\n    setUserRecordACType | authACType | loginUserACType\nexport type  groupUsersType = {\n    uid: string\n    userName?: string\n}\ntype providerDataType = {\n    0: { uid: string, email: string, providerId: string }\n    length: number\n    tokensValidAfterTime: string\n}\nexport type userType = {\n    disabled: boolean\n    displayName: string\n    email: string\n    emailVerified: boolean\n    metadata: { lastSignInTime: string, creationTime: string }\n    passwordHash: string\n    passwordSalt: string\n    providerData: any\n    tokensValidAfterTime: string\n    uid: string\n    photoURL?: string\n    phoneNumber?: string\n    group?: string\n    listTasks?: {}\n}\nexport type groupType = {\n    id: string\n    group: string\n    users: groupUsersType[]\n}\ntype initStateType = {\n    groups: groupType[]\n    users: Array<userType>\n    status: boolean\n    userRecord: string\n    adminUid: string\n    message: string\n    email: string\n    userid: string\n}\nlet initState: initStateType = {\n    groups: [],\n    users: [],\n    status: false,\n    userRecord: '',\n    adminUid: 'WuVt9TwRQ0grRFpgAKQlB1nJGAm1',\n    message: '',\n    email: '',\n    userid: '',\n}\n\nexport const userReducer = (state = initState, action: actionType) => {\n    switch (action.type) {\n        case \"USERS/LOGIN_USER\":\n            return {...state, email: action.email, userid: action.userid}\n        case \"USERS/AUTH\":\n            return {...state, status: action.payload}\n        case \"USERS/SET-USER-RECORD\":\n            return {...state, userRecord: action.payload, status: true}\n        case 'USERS/SET-GROUPS':\n            return {...state, groups: action.payload}\n        case \"USERS/SET-USER-ON-GROUP\": {\n            // debugger\n            console.log('groups: ', state.groups);\n            return {\n                ...state,\n                // users: state.users.map(u=> {\n                //   if(u.uid === action.payload.id){\n                //       debugger\n                //    if(  state.groups.map(g=>g.group===action.payload.groupName?\n                //        {...g, users: state.groups.users.map(user=> {action.payload.id})}\n                //        : g)) {\n                //        return {}\n                //    }\n                //   }else return u\n                // }),\n                groups: state.groups.map(g => {\n                    if (g.group === action.payload.groupName) return {\n                        ...g, users: [...g.users, action.payload.id]\n                    }\n                    else return g\n                })\n            }\n        }\n        case 'USERS/SET-USERS':\n            // console.log(action.payload)\n            return {...state, users: action.payload}\n        case 'USERS/ADD-GROUP':\n            return {...state, groups: [...state.groups, action.payload]}\n        case 'USERS/DELETE-GROUP':\n            return {...state, groups: [state.groups.filter(g => g.id !== action.payload)]}\n        default:\n            return {...state}\n    }\n}\nexport const authAC = (payload: boolean) => ({type: 'USERS/AUTH', payload} as const)\nexport const setUsersAC = (payload: any) => ({type: 'USERS/SET-USERS', payload} as const)\nexport const setUserRecordAC = (payload: string) => ({type: 'USERS/SET-USER-RECORD', payload} as const)\nexport const setUserOnGroupAC = (payload: { id: string, groupName: string }) => ({\n    type: 'USERS/SET-USER-ON-GROUP', payload\n} as const)\nexport const setGroupsAC = (payload: any) => ({type: 'USERS/SET-GROUPS', payload} as const)\nexport const addGroupsAC = (payload: any) => ({type: 'USERS/ADD-GROUP', payload} as const)\nexport const deleteGroupsAC = (payload: any) => ({type: 'USERS/DELETE-GROUP', payload} as const)\nexport const loginUserAC = (email: string, userid: string) => ({type: 'USERS/LOGIN_USER', email, userid} as const)\n\nexport const authTC = () => (dispatch: Dispatch) => {\n    // Users.auth()\n    //     .then(res=>{\n    //     dispatch(authAC(res))\n    // })\n    app.auth().onAuthStateChanged(function (user: any) {\n        console.log('onAuthStateChanged :', user);\n        if (user) {\n            dispatch(authAC(true))\n            dispatch(loginUserAC(user.email, user.uid))\n        } else {\n            dispatch(authAC(false))\n        }\n    })\n}\nexport const removeUserTC = (uid: string) => (dispatch: any) => {\n    Users.userRemove(uid).then(res => {\n        dispatch(setUsersTC())\n        console.log(res);\n    })\n}\nexport const removeGroupsTC = (id: string) => (dispatch: any) => {\n    Users.groupRemove(id).then(res => {\n        dispatch(getGroupsTC())\n        console.log(res);\n    })\n}\nexport const loginUserTC = (email: string, password: string) => (dispatch: any) => {\n    app.auth().signInWithEmailAndPassword(email, password)\n        .then((res) => {\n            dispatch(authAC(true))\n            dispatch(setUsersTC())\n            // console.log(res);\n        })\n        .catch(er => {\n            console.log(er);\n        })\n}\nexport const signOutTC = () => (dispatch: Dispatch) => {\n    firebase.auth().signOut().then((res) => {\n        console.log(res);\n    }).catch((error) => {\n        console.log(error);\n    });\n}\nexport const updateUserTC = (uid: string, payload: any) => (dispatch: any) => {\n    Users.updateUser(uid, payload).then(res => {\n        dispatch(setUsersTC())\n        console.log(res);\n    })\n}\nexport const createUserTC = (email: string, password: string, username: string) => (dispatch: any) => {\n    Users.createUser(email, password, username).then(res => {\n        dispatch(setUserRecordAC(res.data))\n        if (res.data.message) {\n            alert(res.data.message)\n        }\n    })\n}\nexport const setUsersTC = () => (dispatch: Dispatch) => {\n    Users.getAllUsers()\n        .then(res => {\n                dispatch(setUsersAC(res.data))\n            }\n        ).catch(er =>\n        alert(er)\n    )\n}\nexport const getGroupsTC = () => (dispatch: Dispatch) => {\n    // Users.getGroupsAll()\n    Users.getGroups()\n        .then(res => {\n                console.log(res);\n                dispatch(setGroupsAC(res))\n            }\n        )\n}\nexport const addGroupsTC = (group: string) => (dispatch: any) => {\n    let id = uuid.v1()\n    Users.addGroup(id, group)\n        .then(res => {\n            dispatch(getGroupsTC())\n            console.log(res);\n        })\n}\nexport const setUserOnGroupTC = (id: string, uid: string, userName: string) => (dispatch: any) => {\n    Users.addUserOnGroup(id, uid, userName).then(res => {\n        dispatch(getGroupsTC())\n    })\n}\n// export const addItemTC = ( group: string) => (dispatch: Dispatch) => {\n// // export const addGroupsTC = (id: string, group: string) => (dispatch: Dispatch) => {\n//     debugger\n//     // dispatch(setGroupsAC({id,group}))\n//\n//     Users.addGroup(group)\n//         .then(res => {\n//             debugger\n//\n//            dispatch(setGroupsAC(res.data))\n//            // dispatch(setGroupsAC({id,name}))\n//         })\n// }","E:\\react\\dragan wrap\\node-fb-admin\\tools-bar\\src\\ui\\components\\dashboard\\Dashboard.jsx",["134"],"import React from 'react';\nimport clsx from 'clsx';\nimport {makeStyles} from '@material-ui/core/styles';\nimport CssBaseline from '@material-ui/core/CssBaseline';\nimport Drawer from '@material-ui/core/Drawer';\nimport Box from '@material-ui/core/Box';\nimport AppBar from '@material-ui/core/AppBar';\nimport Toolbar from '@material-ui/core/Toolbar';\nimport List from '@material-ui/core/List';\nimport Typography from '@material-ui/core/Typography';\nimport Divider from '@material-ui/core/Divider';\nimport IconButton from '@material-ui/core/IconButton';\nimport Badge from '@material-ui/core/Badge';\nimport Container from '@material-ui/core/Container';\nimport Link from '@material-ui/core/Link';\nimport MenuIcon from '@material-ui/icons/Menu';\nimport ChevronLeftIcon from '@material-ui/icons/ChevronLeft';\nimport NotificationsIcon from '@material-ui/icons/Notifications';\nimport {mainListItems, secondaryListItems} from './listItems';\nimport {Switch, Route, Redirect, NavLink} from \"react-router-dom\"\nimport Button from \"@material-ui/core/Button\";\nimport {useDispatch} from \"react-redux\";\nimport {signOutTC} from \"../../../bll/userReduser\";\nimport HomeIcon from '@material-ui/icons/Home';\n\n// import Route from \"react-router-dom\";\n\nfunction Copyright() {\n    return (\n        <Typography variant=\"body2\" color=\"textSecondary\" align=\"center\">\n            {'Copyright © '}\n            <Link color=\"inherit\" href=\"https://material-ui.com/\">\n                Your Website\n            </Link>{' '}\n            {new Date().getFullYear()}\n            {'.'}\n        </Typography>\n    );\n}\n\nconst drawerWidth = 240;\nconst useStyles = makeStyles((theme) => ({\n    root: {\n        display: 'flex',\n    },\n    toolbar: {\n        paddingRight: 24, // keep right padding when drawer closed\n    },\n    toolbarIcon: {\n        display: 'flex',\n        alignItems: 'center',\n        justifyContent: 'flex-end',\n        padding: '0 8px',\n        ...theme.mixins.toolbar,\n    },\n    appBar: {\n        zIndex: theme.zIndex.drawer + 1,\n        transition: theme.transitions.create(['width', 'margin'], {\n            easing: theme.transitions.easing.sharp,\n            duration: theme.transitions.duration.leavingScreen,\n        }),\n    },\n    appBarShift: {\n        marginLeft: drawerWidth,\n        width: `calc(100% - ${drawerWidth}px)`,\n        transition: theme.transitions.create(['width', 'margin'], {\n            easing: theme.transitions.easing.sharp,\n            duration: theme.transitions.duration.enteringScreen,\n        }),\n    },\n    menuButton: {\n        marginRight: 36,\n    },\n    menuButtonHidden: {\n        display: 'none',\n    },\n    title: {\n        flexGrow: 1,\n    },\n    drawerPaper: {\n        position: 'relative',\n        whiteSpace: 'nowrap',\n        width: drawerWidth,\n        transition: theme.transitions.create('width', {\n            easing: theme.transitions.easing.sharp,\n            duration: theme.transitions.duration.enteringScreen,\n        }),\n    },\n    drawerPaperClose: {\n        overflowX: 'hidden',\n        transition: theme.transitions.create('width', {\n            easing: theme.transitions.easing.sharp,\n            duration: theme.transitions.duration.leavingScreen,\n        }),\n        width: theme.spacing(7),\n        [theme.breakpoints.up('sm')]: {\n            width: theme.spacing(9),\n        },\n    },\n    appBarSpacer: theme.mixins.toolbar,\n    content: {\n        flexGrow: 1,\n        height: '100vh',\n        overflow: 'auto',\n    },\n    container: {\n        paddingTop: theme.spacing(4),\n        paddingBottom: theme.spacing(4),\n    },\n    paper: {\n        padding: theme.spacing(2),\n        display: 'flex',\n        overflow: 'auto',\n        flexDirection: 'column',\n    },\n    fixedHeight: {\n        height: 240,\n    },\n}));\n\n// Pages\nconst Starting = React.lazy(() => import('../../views/starting'));\nconst GroupsUsers = React.lazy(() => import('../../views/groupUsers/groupsUsers'));\n// const Page404 = React.lazy(() => import('./views/pages/page404/Page404'));\n// const Page500 = React.lazy(() => import('./views/pages/page500/Page500'));\n\nexport default function Dashboard() {\n    const dispatch = useDispatch()\n    const classes = useStyles();\n    const [open, setOpen] = React.useState(true);\n    const handleDrawerOpen = () => {\n        setOpen(true);\n    };\n    const handleDrawerClose = () => {\n        setOpen(false);\n    };\n    const submitSignOut = () => {\n        dispatch(signOutTC())\n    }\n\n    return (\n        <div className={classes.root}>\n            <CssBaseline/>\n            <AppBar position=\"absolute\" className={clsx(classes.appBar, open && classes.appBarShift)}>\n                <Toolbar className={classes.toolbar}>\n                    <IconButton edge=\"start\" color=\"inherit\" aria-label=\"open drawer\" onClick={handleDrawerOpen}\n                                className={clsx(classes.menuButton, open && classes.menuButtonHidden)}>\n                        <MenuIcon/>\n                    </IconButton>\n                    <Typography component=\"h1\" variant=\"h6\" color=\"inherit\" noWrap className={classes.title}>\n                        Dashboard\n                    </Typography>\n                    <IconButton color=\"inherit\">\n                        <Badge badgeContent={4} color=\"secondary\">\n                            <NotificationsIcon/>\n                        </Badge>\n                    </IconButton>\n                    <Button onClick={submitSignOut}>signin</Button>\n                    <NavLink to={'https://lisapatrikeevna.github.io/dragan-2/'} title={'to site'}> <HomeIcon/></NavLink>\n                </Toolbar>\n            </AppBar>\n            <Drawer variant=\"permanent\" open={open}\n                    classes={{paper: clsx(classes.drawerPaper, !open && classes.drawerPaperClose),}}>\n                <div className={classes.toolbarIcon}>\n                    <IconButton onClick={handleDrawerClose}>\n                        <ChevronLeftIcon/>\n                    </IconButton>\n                </div>\n                <Divider/>\n                <List>{mainListItems}</List>\n                <Divider/>\n                <List>{secondaryListItems}</List>\n            </Drawer>\n            <main className={classes.content}>\n                <div className={classes.appBarSpacer}/>\n                <Container maxWidth=\"lg\" className={classes.container}>\n                    <React.Suspense fallback={'...loading'}>\n                        <Switch>\n                            {/*<Route path=\"/\"  render={props => <Starting {...props}/>} />*/}\n                            <Route path=\"/starting\" render={props => <Starting {...props}/>}/>\n                            <Route path=\"/groupsUsers\" render={props => <GroupsUsers {...props}/>}/>\n                            {/*    /!*<Route exact path=\"/404\" name=\"Page 404\" render={props => <Page404 {...props}/>} />*!/*/}\n                            {/*    /!*<Route exact path=\"/500\" name=\"Page 500\" render={props => <Page500 {...props}/>} />*!/*/}\n                        </Switch>\n                    </React.Suspense>\n                    <Box pt={4}>\n                        <Copyright/>\n                    </Box>\n                </Container>\n            </main>\n        </div>\n    );\n}\n","E:\\react\\dragan wrap\\node-fb-admin\\tools-bar\\src\\bll\\Api.ts",["135"],"import axios from 'axios'\n\nconst instance = axios.create({\n    baseURL: 'https://dragan.lisa15.ru/',\n    // baseURL: 'http://localhost:7563/',\n    // baseURL: 'https:/',\n})\nexport type GroupDataType = {\n    first?: string\n    group: string\n    last?: string\n    users?:[]\n}\nexport type GroupType = {\n    data: GroupDataType\n    id: string\n}\nexport const Users = {\n    getAllUsers() {\n        return instance.get('users')\n    },\n    getGroups() {\n        return instance.get<Array<GroupType>>('api/getGroups').then(r => r.data)\n    },\n    auth() {\n        return instance.get('auth')\n    },\n    // addGroup(id: string, name: string,idGrUser:string,users:string) {\n    addGroup(id: string, name: string) {\n        // debugger\n        return instance.post('api/createGroup', {id, name})\n    },\n    updateUser(uid: string, payload: { email?: string,phoneNumber?: string, nickName?: string }) {\n        return instance.put(`userUpdate/${uid}`, {payload})\n    },\n    userRemove(uid: string) {\n        // @ts-ignore\n        return instance.delete(`userRemove/${uid}`)\n    },\n    createUser(email: string, password: string, username: string) {\n        return instance.post(`createUser`, {email, password, displayName: username})\n    },\n    groupRemove(id: string) {\n        return instance.delete(`groupRemove/${id}`)\n    },\n    addUserOnGroup(id: string,uid:string,name:string) {\n        return instance.put(`api/addUserOnGroup/${id},{uid,name}`)\n    },\n    addUserData(id: string,uid:string,name:string) {\n        return instance.post(`api/addUserData,{}`)\n    },\n}\nexport const Tasks = {\n    getAllTasks() {\n        // const promise = instance.get('users');\n        // return promise;\n        // debugger\n        return instance.get('users')\n    },\n    getGroups() {\n        // const promise = instance.get('users');\n        // return promise;\n        // debugger\n        return instance.get('/api/get')\n    },\n    addTodo(id: string, name: string) {\n        debugger\n        return instance.post('api/create', {id, name})\n    }\n}\n\n//import * as admin from 'firebase-admin';\n//const serviceAccount = require(\"../fir-silky-firebase-adminsdk-6l12p-2bc5e41df4.json\");\n\n\n//const app = admin.initializeApp();\n// admin.initializeApp({\n//     credential: admin.credential.applicationDefault(),\n//   //credential: admin.credential.cert(serviceAccount),\n//   databaseURL: \"https://fir-silky-default-rtdb.europe-west1.firebasedatabase.app\"\n// });\n// const adminId = 'lisa-fox'\n// admin.auth().createCustomToken(adminId)\n//     .then((customToken)=>{\n//       console.log(customToken);\n//     })\n//     .catch((error)=>{\n//       console.log(error);\n//     })\n\n//https://firebase.google.com/docs/cloud-messaging/auth-server\n//!!!!! https://firebase.google.com/docs/auth/admin/manage-users\n//https://firebase.google.com/docs/database/admin/start/?hl=ru-ru#node.js\n// export const listAllUsers = (nextPageToken) => {\n//   // List batch of users, 1000 at a time.\n//   admin\n//       .auth()\n//       .listUsers(1000, nextPageToken)\n//       .then((listUsersResult) => {\n//           debugger\n//         listUsersResult.users.forEach((userRecord) => {\n//           console.log('user', userRecord.toJSON());\n//         });\n//         if (listUsersResult.pageToken) {\n//           // List next batch of users.\n//           listAllUsers(listUsersResult.pageToken);\n//         }\n//       })\n//       .catch((error) => {\n//         console.log('Error listing users:', error);\n//       });\n//};\n// Start listing users from the beginning, 1000 at a time.\n//listAllUsers();\n//delet \"firebase\": \"^8.2.6\",\n\n//const serviceAccount = require(\"path/to/serviceAccountKey.json\");\n// export const firebaseConfig={\n//   apiKey: \"AIzaSyDGqV4nDHMokspRbNj9OufL531PwdNB2sc\",\n//   authDomain: \"fir-silky.firebaseapp.com\",\n//   databaseURL: \"https://fir-silky-default-rtdb.europe-west1.firebasedatabase.app\",\n//   projectId: \"fir-silky\",\n//   storageBucket: \"fir-silky.appspot.com\",\n//   messagingSenderId: \"459950163847\",\n//   appId: \"1:459950163847:web:2f94e0b34b0c77d10cb522\"\n// }\n\n// types\nexport type LoginParamsType = {\n    password: string\n    email: string\n    rememberMy?: boolean\n}\nexport type myResponseType = {\n    id: number\n    email: string\n    login: string\n}\nexport type TodolistType = {\n    id: string\n    title: string\n    addedDate: string\n    order: number\n}\nexport type ResponseType<D = {}> = {\n    resultCode: number\n    messages: Array<string>\n    fieldsErrors: Array<string>\n    data: D\n}\n\nexport enum TaskStatuses {\n    New = 0,\n    InProgress = 1,\n    Completed = 2,\n    Draft = 3\n}\n\nexport enum TaskPriorities {\n    Low = 0,\n    Middle = 1,\n    Hi = 2,\n    Urgently = 3,\n    Later = 4\n}\n\nexport type TaskType = {\n    description: string\n    title: string\n    status: TaskStatuses\n    priority: TaskPriorities\n    startDate: string\n    deadline: string\n    id: string\n    todoListId: string\n    order: number\n    addedDate: string\n}\nexport type UpdateTaskModelType = {\n    title: string\n    description: string\n    status: TaskStatuses\n    priority: TaskPriorities\n    startDate: string\n    deadline: string\n}\ntype GetTasksResponse = {\n    error: string | null\n    totalCount: number\n    items: TaskType[]\n}\n","E:\\react\\dragan wrap\\node-fb-admin\\tools-bar\\src\\ui\\views\\groupUsers\\groupsUsers.tsx",["136","137","138","139","140"],"import React, {ChangeEvent, useCallback, useEffect, useState} from 'react';\nimport {useDispatch, useSelector} from \"react-redux\";\nimport {removeUserTC, setUserOnGroupAC, setUserOnGroupTC, setUsersTC, userType} from \"../../../bll/userReduser\";\nimport {AppRootStateType} from \"../../../bll/store\";\nimport User from \"../user/user\";\nimport Group from \"../groups/group\";\nimport cl from './groupUsers.module.css';\nimport Groups from \"../groups/groups\";\n\nconst GroupsUsers = () => {\n    const dispatch = useDispatch()\n    useEffect(() => {\n        // debugger\n        dispatch(setUsersTC())\n        // const db = admin.database();\n        // const ref = db.ref(\"restricted_access/secret_document\");\n        // ref.once(\"value\", function(snapshot) {\n        //     console.log(snapshot.val());\n        // });\n    }, [dispatch])\n    const removeUser = useCallback(function (uid: string) {\n        const action = removeUserTC(uid);\n        dispatch(action);\n    }, []);\n    const addUserToGroup=(uid:string,groupName:string)=>{\n        debugger\n        dispatch(setUserOnGroupAC({id:uid, groupName}))\n    }\n\n    const allUsers = useSelector<AppRootStateType, Array<userType>>(state => state.users.users)\n    const user = allUsers.map(u => <User key={u.uid} group={u.group} name={u.displayName} date={u.tokensValidAfterTime}\n                                         email={u.email} listTasks={u.listTasks} uid={u.uid} removeUser={removeUser}\n                                         addUserToGroup={addUserToGroup} phoneNumber={u.phoneNumber}/>)\n    console.log(allUsers);\n\n    return (\n        <div>\n            <h5>all users: </h5>\n            <p>пс. чтоб обновить поля( email и name ) даблклик и апдейт</p>\n            <div className={cl.wrap}>{user}</div>\n            <Groups/>\n        </div>\n    );\n};\n\nexport default GroupsUsers;\n","E:\\react\\dragan wrap\\node-fb-admin\\tools-bar\\src\\ui\\components\\dashboard\\listItems.jsx",[],"E:\\react\\dragan wrap\\node-fb-admin\\tools-bar\\src\\ui\\components\\dashboard\\Chart.jsx",[],"E:\\react\\dragan wrap\\node-fb-admin\\tools-bar\\src\\ui\\components\\dashboard\\Deposits.jsx",[],"E:\\react\\dragan wrap\\node-fb-admin\\tools-bar\\src\\ui\\components\\dashboard\\Orders.jsx",[],"E:\\react\\dragan wrap\\node-fb-admin\\tools-bar\\src\\ui\\views\\starting.jsx",["141"],"import React from 'react';\r\nimport Grid from \"@material-ui/core/Grid\";\r\nimport Paper from \"@material-ui/core/Paper\";\r\nimport Chart from \"../components/dashboard/Chart\";\r\nimport Deposits from \"../components/dashboard/Deposits\";\r\nimport Orders from \"../components/dashboard/Orders\";\r\nimport Container from \"@material-ui/core/Container\";\r\nimport clsx from \"clsx\";\r\nimport {makeStyles} from \"@material-ui/core/styles\";\r\n\r\n\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n    paper: {\r\n        padding: theme.spacing(2),\r\n        display: 'flex',\r\n        overflow: 'auto',\r\n        flexDirection: 'column',\r\n    },\r\n    fixedHeight: {\r\n        height: 240,\r\n    },\r\n}));\r\n\r\n\r\nconst Starting = () => {\r\n    const classes = useStyles();\r\n    const fixedHeightPaper = clsx(classes.paper, classes.fixedHeight);\r\n    return (\r\n        <Grid container spacing={3}>\r\n            {/* Chart */}\r\n            <Grid item xs={12} md={8} lg={9}>\r\n                <Paper className={fixedHeightPaper}>\r\n                    <Chart />\r\n                </Paper>\r\n            </Grid>\r\n            {/* Recent Deposits */}\r\n            <Grid item xs={12} md={4} lg={3}>\r\n                <Paper className={fixedHeightPaper}>\r\n                    <Deposits />\r\n                </Paper>\r\n            </Grid>\r\n            {/* Recent Orders */}\r\n            <Grid item xs={12}>\r\n                <Paper className={classes.paper}>\r\n                    <Orders />\r\n                </Paper>\r\n            </Grid>\r\n        </Grid>\r\n    );\r\n};\r\n\r\nexport default Starting;","E:\\react\\dragan wrap\\node-fb-admin\\tools-bar\\src\\ui\\components\\dashboard\\Title.jsx",[],["142","143"],"E:\\react\\dragan wrap\\node-fb-admin\\tools-bar\\src\\bll\\appReduserOld.js",["144"],"import {Dispatch} from \"redux\";\n//import * as admin from 'firebase-admin';\n\nconst initialState = {\n  token: ''\n}\n\nexport const changeStateReducer = (state = initialState, { type, ...rest }) => {\n  switch (type) {\n    case 'set':\n      return {...state, ...rest }\n    default:\n      return state\n  }\n}\n","E:\\react\\dragan wrap\\node-fb-admin\\tools-bar\\src\\bll\\tasksReduser.ts",["145","146","147"],"import {Dispatch} from \"redux\";\nimport {TaskPriorities, TaskStatuses, TaskType, UpdateTaskModelType, Users} from \"./Api\";\nimport {AddTodolistActionType, RemoveTodolistActionType, SetTodolistsActionType} from \"./todolists-reducer\";\nimport {SetAppErrorActionType, SetAppStatusActionType} from \"./app-reducer\";\n\n\nexport type UpdateDomainTaskModelType = {\n    title?: string\n    description?: string\n    status?: TaskStatuses\n    priority?: TaskPriorities\n    startDate?: string\n    deadline?: string\n}\nexport type TasksStateType = {\n    [key: string]: Array<TaskType>\n}\ntype ActionsType =\n    | ReturnType<typeof removeTaskAC>\n    | ReturnType<typeof addTaskAC>\n    | ReturnType<typeof updateTaskAC>\n    | AddTodolistActionType\n    | RemoveTodolistActionType\n    | SetTodolistsActionType\n    | ReturnType<typeof setTasksAC>\ntype ThunkDispatch = Dispatch<ActionsType | SetAppStatusActionType | SetAppErrorActionType>\n\n\nconst initialState: TasksStateType = {}\n\nexport const tasksReducer = (state: TasksStateType = initialState, action: ActionsType): TasksStateType => {\n    switch (action.type) {\n        case 'REMOVE-TASK':\n            return {...state, [action.todolistId]: state[action.todolistId].filter(t => t.id != action.taskId)}\n        case 'ADD-TASK':\n            return {...state, [action.task.todoListId]: [action.task, ...state[action.task.todoListId]]}\n        case 'UPDATE-TASK':\n            return {\n                ...state,\n                [action.todolistId]: state[action.todolistId]\n                    .map(t => t.id === action.taskId ? {...t, ...action.model} : t)\n            }\n        case 'ADD-TODOLIST':\n            return {...state, [action.todolist.id]: []}\n        case 'REMOVE-TODOLIST':\n            const copyState = {...state}\n            delete copyState[action.id]\n            return copyState\n        case 'SET-TODOLISTS': {\n            const copyState = {...state}\n            action.todolists.forEach(tl => {\n                copyState[tl.id] = []\n            })\n            return copyState\n        }\n        case 'SET-TASKS':\n            return {...state, [action.todolistId]: action.tasks}\n        default:\n            return state\n    }\n}\n\n// actions\nexport const removeTaskAC = (taskId: string, todolistId: string) =>\n    ({type: 'REMOVE-TASK', taskId, todolistId} as const)\nexport const addTaskAC = (task: TaskType) =>\n    ({type: 'ADD-TASK', task} as const)\nexport const updateTaskAC = (taskId: string, model: UpdateDomainTaskModelType, todolistId: string) =>\n    ({type: 'UPDATE-TASK', model, todolistId, taskId} as const)\nexport const setTasksAC = (tasks: Array<TaskType>, todolistId: string) =>\n    ({type: 'SET-TASKS', tasks, todolistId} as const)\n\n// thunks\n// export const fetchTasksTC = (todolistId: string) => (dispatch: Dispatch<ActionsType | SetAppStatusActionType>) => {\n//     dispatch(setAppStatusAC('loading'))\n//     todolistsAPI.getTasks(todolistId)\n//         .then((res) => {\n//             const tasks = res.data.items\n//             dispatch(setTasksAC(tasks, todolistId))\n//             dispatch(setAppStatusAC('succeeded'))\n//         })\n// }\n// export const removeTaskTC = (taskId: string, todolistId: string) => (dispatch: Dispatch<ActionsType>) => {\n//     todolistsAPI.deleteTask(todolistId, taskId)\n//         .then(res => {\n//             const action = removeTaskAC(taskId, todolistId)\n//             dispatch(action)\n//         })\n// }\n// export const addTaskTC = (title: string, todolistId: string) => (dispatch: Dispatch<ActionsType | SetAppErrorActionType | SetAppStatusActionType>) => {\n//     dispatch(setAppStatusAC('loading'))\n//     todolistsAPI.createTask(todolistId, title)\n//         .then(res => {\n//             if (res.data.resultCode === 0) {\n//                 const task = res.data.data.item\n//                 const action = addTaskAC(task)\n//                 dispatch(action)\n//                 dispatch(setAppStatusAC('succeeded'))\n//             } else {\n//                 handleServerAppError(res.data, dispatch);\n//             }\n//         })\n//         .catch((error) => {\n//             handleServerNetworkError(error, dispatch)\n//         })\n// }\n// export const updateTaskTC = (taskId: string, domainModel: UpdateDomainTaskModelType, todolistId: string) =>\n//     (dispatch: ThunkDispatch, getState: () => AppRootStateType) => {\n//         const state = getState()\n//         const task = state.tasks[todolistId].find(t => t.id === taskId)\n//         if (!task) {\n//             //throw new Error(\"task not found in the state\");\n//             console.warn('task not found in the state')\n//             return\n//         }\n//\n//         const apiModel: UpdateTaskModelType = {\n//             deadline: task.deadline,\n//             description: task.description,\n//             priority: task.priority,\n//             startDate: task.startDate,\n//             title: task.title,\n//             status: task.status,\n//             ...domainModel\n//         }\n//\n//         todolistsAPI.updateTask(todolistId, taskId, apiModel)\n//             .then(res => {\n//                 if (res.data.resultCode === 0) {\n//                     const action = updateTaskAC(taskId, domainModel, todolistId)\n//                     dispatch(action)\n//                 } else {\n//                     handleServerAppError(res.data, dispatch);\n//                 }\n//             })\n//             .catch((error) => {\n//                 handleServerNetworkError(error, dispatch);\n//             })\n//     }\n\n\nexport const setUsersAC = (payload: any) => ({type: 'SET-USERS', payload} as const)\nexport const setGroupsAC = (payload: any) => ({type: 'SET-GROUPS', payload} as const)\nexport const addGroupsAC = (payload: any) => ({type: 'ADD-GROUPS', payload} as const)\n//export const setUsersTC = (payload:any) =>({type: 'SET-USERS',payload}as const)\n// export const setTasksTC = () => (dispatch:Dispatch) =>{\n//   const tasks =firebase.database().ref('tasks')\n//   tasks.on('value',(el)=>{\n//     dispatch(setUsers(el.val()))\n//     // let aaa = el.val()\n//     // console.log(aaa);\n//   })\n// }\nexport const setUsersTC = () => (dispatch: Dispatch) => {\n    Users.getAllUsers()\n        .then(res => {\n                dispatch(setUsersAC(res.data.users))\n            }\n        )\n}\nexport const setTasksTC = () => (dispatch: Dispatch) => {\n    Users.getAllUsers()\n        .then(res => {\n                dispatch(setUsersAC(res.data.users))\n            }\n        )\n}\n// export const addGroups = (id: string, name: string) => (dispatch: Dispatch) => {\n//     debugger\n//     Users.addGroup(id, name)\n//         .then(res => {\n//             debugger\n//             dispatch(setGroupsAC(res.data))\n//         })\n// }","E:\\react\\dragan wrap\\node-fb-admin\\tools-bar\\src\\bll\\todolists-reducer.ts",["148","149","150"],"import {Dispatch} from 'redux'\r\nimport {TodolistType} from \"./Api\";\r\nimport {RequestStatusType, setAppStatusAC, SetAppStatusActionType} from \"./app-reducer\";\r\n\r\nconst initialState: Array<TodolistDomainType> = []\r\n\r\nexport const todolistsReducer = (state: Array<TodolistDomainType> = initialState, action: ActionsType): Array<TodolistDomainType> => {\r\n    switch (action.type) {\r\n        case 'REMOVE-TODOLIST':\r\n            return state.filter(tl => tl.id != action.id)\r\n        case 'ADD-TODOLIST':\r\n            return [{...action.todolist, filter: 'all', entityStatus: 'idle'}, ...state]\r\n\r\n        case 'CHANGE-TODOLIST-TITLE':\r\n            return state.map(tl => tl.id === action.id ? {...tl, title: action.title} : tl)\r\n        case 'CHANGE-TODOLIST-FILTER':\r\n            return state.map(tl => tl.id === action.id ? {...tl, filter: action.filter} : tl)\r\n        case 'CHANGE-TODOLIST-ENTITY-STATUS':\r\n            return state.map(tl => tl.id === action.id ? {...tl, entityStatus: action.status} : tl)\r\n        case 'SET-TODOLISTS':\r\n            return action.todolists.map(tl => ({...tl, filter: 'all', entityStatus: 'idle'}))\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\n// actions\r\nexport const removeTodolistAC = (id: string) => ({type: 'REMOVE-TODOLIST', id} as const)\r\nexport const addTodolistAC = (todolist: TodolistType) => ({type: 'ADD-TODOLIST', todolist} as const)\r\nexport const changeTodolistTitleAC = (id: string, title: string) => ({\r\n    type: 'CHANGE-TODOLIST-TITLE',\r\n    id,\r\n    title\r\n} as const)\r\nexport const changeTodolistFilterAC = (id: string, filter: FilterValuesType) => ({\r\n    type: 'CHANGE-TODOLIST-FILTER',\r\n    id,\r\n    filter\r\n} as const)\r\nexport const changeTodolistEntityStatusAC = (id: string, status: RequestStatusType) => ({\r\n    type: 'CHANGE-TODOLIST-ENTITY-STATUS', id, status } as const)\r\nexport const setTodolistsAC = (todolists: Array<TodolistType>) => ({type: 'SET-TODOLISTS', todolists} as const)\r\n\r\n// thunks\r\n// export const fetchTodolistsTC = () => {\r\n//     return (dispatch: ThunkDispatch) => {\r\n//         dispatch(setAppStatusAC('loading'))\r\n//         todolistsAPI.getTodolists()\r\n//             .then((res) => {\r\n//                 dispatch(setTodolistsAC(res.data))\r\n//                 dispatch(setAppStatusAC('succeeded'))\r\n//             })\r\n//     }\r\n// }\r\n// export const removeTodolistTC = (todolistId: string) => {\r\n//     return (dispatch: ThunkDispatch) => {\r\n//         //изменим глобальный статус приложения, чтобы вверху полоса побежала\r\n//         dispatch(setAppStatusAC('loading'))\r\n//         //изменим статус конкретного тудулиста, чтобы он мог задизеблить что надо\r\n//         dispatch(changeTodolistEntityStatusAC(todolistId, 'loading'))\r\n//         todolistsAPI.deleteTodolist(todolistId)\r\n//             .then((res) => {\r\n//                 dispatch(removeTodolistAC(todolistId))\r\n//                 //скажем глобально приложению, что асинхронная операция завершена\r\n//                 dispatch(setAppStatusAC('succeeded'))\r\n//             })\r\n//     }\r\n// }\r\n// export const addTodolistTC = (title: string) => {\r\n//     return (dispatch: ThunkDispatch) => {\r\n//         dispatch(setAppStatusAC('loading'))\r\n//         todolistsAPI.createTodolist(title)\r\n//             .then((res) => {\r\n//                 dispatch(addTodolistAC(res.data.data.item))\r\n//                 dispatch(setAppStatusAC('succeeded'))\r\n//             })\r\n//     }\r\n// }\r\n// export const changeTodolistTitleTC = (id: string, title: string) => {\r\n//     return (dispatch: Dispatch<ActionsType>) => {\r\n//         todolistsAPI.updateTodolist(id, title)\r\n//             .then((res) => {\r\n//                 dispatch(changeTodolistTitleAC(id, title))\r\n//             })\r\n//     }\r\n// }\r\n\r\n// types\r\nexport type AddTodolistActionType = ReturnType<typeof addTodolistAC>;\r\nexport type RemoveTodolistActionType = ReturnType<typeof removeTodolistAC>;\r\nexport type SetTodolistsActionType = ReturnType<typeof setTodolistsAC>;\r\ntype ActionsType =\r\n    | RemoveTodolistActionType\r\n    | AddTodolistActionType\r\n    | ReturnType<typeof changeTodolistTitleAC>\r\n    | ReturnType<typeof changeTodolistFilterAC>\r\n    | SetTodolistsActionType\r\n    | ReturnType<typeof changeTodolistEntityStatusAC>\r\nexport type FilterValuesType = 'all' | 'active' | 'completed';\r\nexport type TodolistDomainType = TodolistType & {\r\n    filter: FilterValuesType\r\n    entityStatus: RequestStatusType\r\n}\r\ntype ThunkDispatch = Dispatch<ActionsType | SetAppStatusActionType>\r\n","E:\\react\\dragan wrap\\node-fb-admin\\tools-bar\\src\\bll\\app-reducer.ts",["151","152"],"import {Dispatch} from \"redux\";\r\nimport {handleServerAppError} from \"../utils/error-utils\";\r\n\r\nconst initialState: InitialStateType = {\r\n    status: 'idle',\r\n    error: null,\r\n    isInitialized: false\r\n}\r\n\r\nexport const appReducer = (state: InitialStateType = initialState, action: ActionsType): InitialStateType => {\r\n    switch (action.type) {\r\n        case 'APP/SET-STATUS':\r\n            return {...state, status: action.status}\r\n        case 'APP/SET-ERROR':\r\n            return {...state, error: action.error}\r\n        case 'IS-INIT':\r\n            return {...state, isInitialized: action.isInitialized}\r\n        default:\r\n            return {...state}\r\n    }\r\n}\r\n\r\nexport type RequestStatusType = 'idle' | 'loading' | 'succeeded' | 'failed'\r\nexport type InitialStateType = {\r\n    // происходит ли сейчас взаимодействие с сервером\r\n    status: RequestStatusType\r\n    // если ошибка какая-то глобальная произойдёт - мы запишем текст ошибки сюда\r\n    error: string | null\r\n    isInitialized: boolean\r\n}\r\n\r\nexport const setAppErrorAC = (error: string | null) => ({type: 'APP/SET-ERROR', error} as const)\r\nexport const setAppStatusAC = (status: RequestStatusType) => ({type: 'APP/SET-STATUS', status} as const)\r\nexport const setIsInitializedAC = (isInitialized: boolean) => ({type: 'IS-INIT', isInitialized} as const)\r\nexport type SetAppErrorActionType = ReturnType<typeof setAppErrorAC>\r\nexport type SetAppStatusActionType = ReturnType<typeof setAppStatusAC>\r\nexport type setIsInitializedACType = ReturnType<typeof setIsInitializedAC>\r\n\r\n\r\n// export const initializeAppTC = () => (dispatch: Dispatch) => {\r\n//     authAPI.me()\r\n//         .then(res => {\r\n//         // debugger\r\n//         if (res.data.resultCode === 0) {\r\n//             dispatch(setIsLoggedInAC(true));\r\n//\r\n//          }\r\n//         else {\r\n//             // debugger\r\n//             // // handleServerAppError(err, dispatch);\r\n//         }\r\n//     })\r\n//         .catch((err) => {\r\n//             handleServerAppError(err, dispatch);\r\n//             dispatch(setIsInitializedAC(true))\r\n//             // throw new Error(err.message)\r\n//         })\r\n//     dispatch(setIsInitializedAC(true))\r\n// }\r\n\r\ntype ActionsType =\r\n    | SetAppErrorActionType\r\n    | SetAppStatusActionType\r\n    | setIsInitializedACType\r\n","E:\\react\\dragan wrap\\node-fb-admin\\tools-bar\\src\\bll\\authReducer.ts",["153","154"],"import { Dispatch } from 'redux'\r\nimport {handleServerAppError, handleServerNetworkError} from \"../utils/error-utils\"\r\nimport {LoginParamsType} from \"./Api\";\r\nimport {SetAppErrorActionType, setAppStatusAC, SetAppStatusActionType} from \"./app-reducer\";\r\n\r\nconst initialState = {\r\n    isLoggedIn: false\r\n}\r\ntype InitialStateType = typeof initialState\r\n\r\nexport const authReducer = (state: InitialStateType = initialState, action: ActionsType): InitialStateType => {\r\n    switch (action.type) {\r\n        case 'login/SET-IS-LOGGED-IN':\r\n            return {...state, isLoggedIn: action.value}\r\n        default:\r\n            return state\r\n    }\r\n}\r\n// actions\r\nexport const setIsLoggedInAC = (value: boolean) =>\r\n    ({type: 'login/SET-IS-LOGGED-IN', value} as const)\r\n\r\n// thunks\r\nexport const loginTC = (data: LoginParamsType) => (dispatch: Dispatch<ActionsType>) => {\r\n    dispatch(setAppStatusAC('loading'))\r\n    // authAPI.login(data).\r\n    //     then(res=>{\r\n    //     if (res.data.resultCode === 0) {\r\n    //         dispatch(setIsLoggedInAC(true))\r\n    //         dispatch(setAppStatusAC('succeeded'))\r\n    //     } else {\r\n    //         handleServerAppError(res.data, dispatch);\r\n    //     }\r\n    // })\r\n    //     .catch((error) => {\r\n    //         handleServerNetworkError(error, dispatch)\r\n    //     })\r\n\r\n}\r\n\r\n// export const logoutTC = () => (dispatch: Dispatch<ActionsType>) => {\r\n//     dispatch(setAppStatusAC('loading'))\r\n//     authAPI.logout()\r\n//         .then(res => {\r\n//             if (res.data.resultCode === 0) {\r\n//                 dispatch(setIsLoggedInAC(false))\r\n//                 dispatch(setAppStatusAC('succeeded'))\r\n//             } else {\r\n//                 handleServerAppError(res.data, dispatch)\r\n//             }\r\n//         })\r\n//         .catch((error) => {\r\n//             handleServerNetworkError(error, dispatch)\r\n//         })\r\n// }\r\n\r\n// types\r\ntype ActionsType = ReturnType<typeof setIsLoggedInAC> | SetAppStatusActionType | SetAppErrorActionType\r\n","E:\\react\\dragan wrap\\node-fb-admin\\tools-bar\\src\\utils\\error-utils.ts",[],["155","156"],"E:\\react\\dragan wrap\\node-fb-admin\\tools-bar\\src\\ui\\views\\user\\user.tsx",["157","158","159","160","161","162","163"],"import React, {ChangeEvent, useCallback, useEffect, useState} from 'react';\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {AppRootStateType} from \"../../../bll/store\";\r\nimport {setUserOnGroupAC, setUserOnGroupTC, updateUserTC, userType} from \"../../../bll/userReduser\";\r\nimport cl from './user.module.css'\r\nimport {Button, Input, TextField} from \"@material-ui/core\";\r\nimport {EditableSpan} from \"../../common/EditableSpan\";\r\n\r\ntype propsType = {\r\n    uid: string\r\n    name?: string | undefined\r\n    phoneNumber?:string\r\n    date: string\r\n    email: string\r\n    group?: string | undefined\r\n    listTasks?: {} | undefined\r\n    removeUser: (uid: string) => void\r\n    addUserToGroup: (uid: string,groupName:string,name:string) => void\r\n}\r\nconst User = (props: propsType) => {\r\n    const dispatch = useDispatch()\r\n    const admin = useSelector<AppRootStateType, string>(state => state.users.adminUid)\r\n    const curentUser = useSelector<AppRootStateType, string>(state => state.users.userid)\r\n    console.log(\"isAdmin: \",admin===curentUser);\r\n    let [groupName, setGroupName] = useState<string>('')\r\n    let [name, setName] = useState<string>(props.name ? props.name : 'not a name')\r\n    let [email, setEmail] = useState<string>(props.email)\r\n    let [phone, setPhone] = useState<string>(props.phoneNumber ? props.phoneNumber : 'not a phoneNumber')\r\n    const changeEmail = (email: string) => {setEmail(email)}\r\n    const changeName = (name: string) => {setName(name)}\r\n    const changePhone = (phone: string) => {setPhone(phone)}\r\n    const removeUser = () => {props.removeUser(props.uid)}\r\n    // const changePropUser = useCallback((title: string) => {\r\n    //     props.somefunction(props.id, title)\r\n    // }, [props.id, props.somefunction])\r\n    const update =  useCallback(() => {\r\n        let payload = {email, name}\r\n        dispatch(updateUserTC(props.uid, payload))\r\n    },[email, name])\r\n    const addToo = useCallback(() => {\r\n       props.addUserToGroup(props.uid,groupName,name)\r\n        setGroupName('')\r\n    },[groupName])\r\n    const onChaneNameGroup = (e: ChangeEvent<HTMLInputElement>) => {\r\n        setGroupName(e.currentTarget.value)\r\n    }\r\nconst styles={\r\n        // display:!admin  ?  'block' : 'none'\r\n}\r\n\r\n    return (\r\n        <div key={props.uid} className={cl.userBox} >\r\n            {/*<p>uid:{props.uid}</p>*/}\r\n\r\n            {admin !== curentUser && <>\r\n               <> <span>name:</span><h5>{name ? name : 'no name'}</h5></>\r\n               <> <span>email:</span><h5>{props.email}</h5></>\r\n            </>}\r\n\r\n            {admin === curentUser &&\r\n            <div style={styles}>\r\n                <div className={cl.spanWrap}><span>email:</span><EditableSpan onChange={changeEmail} value={email}/></div>\r\n                <div className={cl.spanWrap}><span>name:</span><EditableSpan onChange={changeName} value={name}/></div>\r\n                <div className={cl.spanWrap}><span>phoneNumber :</span><EditableSpan onChange={changePhone} value={phone}/></div>\r\n                <div className={cl.spaceBetween}>\r\n                <Button variant=\"contained\" onClick={update}>update</Button>\r\n                <Button variant=\"contained\" onClick={removeUser}>delete</Button>\r\n                </div>\r\n                <hr/>\r\n                <div className={cl.spaceBetween}>\r\n                <TextField  variant='filled' size='small' type=\"text\" value={groupName} placeholder={'add groupName'} onChange={onChaneNameGroup}/>\r\n                <Button onClick={addToo}>add to group</Button>\r\n                </div>\r\n                <hr/>\r\n            </div>\r\n            }\r\n            <p>date :{props.date}</p>\r\n            <p>group:{props.group ? props.group : 'no group'}</p>\r\n            <p>listTasks:{props.listTasks ? props.listTasks : 'no tasks'}</p>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default User;\r\n\r\n","E:\\react\\dragan wrap\\node-fb-admin\\tools-bar\\src\\ui\\views\\pages\\login\\Login.js",["164","165"],"import React, {useState} from 'react'\nimport {Link, Redirect} from 'react-router-dom'\nimport {\n  CButton, CCard, CCardBody, CCardGroup, CCol, CContainer, CForm, CInput,\n  CInputGroup, CInputGroupPrepend, CInputGroupText, CRow\n} from '@coreui/react'\nimport CIcon from '@coreui/icons-react'\nimport {createUserTC, loginUserTC} from \"../../../../bll/userReduser\";\nimport {useDispatch, useSelector} from \"react-redux\";\n\nconst Login = () => {\n  console.log('login');\n  debugger\n  const status = useSelector(state => state.users.status)\n  const dispatch = useDispatch()\n  let [email, setEmail] = useState('lisa15.08patrikeevana@gmail.com')\n  let [password, setPassword] = useState('lisa15')\n  const createEmail = (e) => {setEmail(e.currentTarget.value)}\n  const createPassword = (e) => {setPassword(e.currentTarget.value)}\n  const HandleLogin = ()=>{\n    dispatch(loginUserTC(email,password))\n    setEmail('')\n    setPassword('')\n  }\n  // if(status){return <Redirect to='/groupsUsers' />}\n  console.log('login page:', status);\n\n  return (\n    <div className=\"c-app c-default-layout flex-row align-items-center\">\n      <CContainer>\n        <CRow className=\"justify-content-center\">\n          <CCol md=\"8\">\n            <CCardGroup>\n              <CCard className=\"p-4\">\n                <CCardBody>\n                  <CForm>\n                    <h1>Login</h1>\n                    <p className=\"text-muted\">Sign In to your account</p>\n                    <CInputGroup className=\"mb-3\">\n                      <CInputGroupPrepend>\n                        <CInputGroupText>\n                          <CIcon name=\"cil-user\" />\n                        </CInputGroupText>\n                      </CInputGroupPrepend>\n                      <CInput type=\"text\" placeholder=\"Email\" autoComplete=\"email\" onChange={createEmail} value={email}/>\n                    </CInputGroup>\n                    <CInputGroup className=\"mb-4\">\n                      <CInputGroupPrepend>\n                        <CInputGroupText>\n                          <CIcon name=\"cil-lock-locked\" />\n                        </CInputGroupText>\n                      </CInputGroupPrepend>\n                      <CInput type=\"password\" placeholder=\"Password\" autoComplete=\"current-password\"  value={password} onChange={createPassword}/>\n                    </CInputGroup>\n                    <CRow>\n                      <CCol xs=\"6\">\n                        <CButton color=\"primary\" className=\"px-5\" onClick={HandleLogin}>Login</CButton>\n                      </CCol>\n                      {status &&\n                      <CCol xs=\"6\"> <Link to=\"/groupsUsers\">\n                        <CButton color=\"primary\" className=\"px-4\">main</CButton>\n                      </Link> </CCol>}\n                      {/*<CCol xs=\"6\" className=\"text-right\">*/}\n                      {/*  <CButton color=\"link\" className=\"px-0\">Forgot password?</CButton>*/}\n                      {/*</CCol>*/}\n                    </CRow>\n                  </CForm>\n                </CCardBody>\n              </CCard>\n              <CCard className=\"text-white bg-primary py-5 d-md-down-none\" style={{ width: '44%' , margin: '10px auto'}}>\n                <CCardBody className=\"text-center\">\n                  <div>\n                    <h2>Sign up</h2>\n                    <p>Lorem ipsum dolor sit amet, consectetur adipisicing elit, sed do eiusmod tempor incididunt ut\n                      labore et dolore magna aliqua.</p>\n                    <Link to=\"/register\">\n                      <CButton color=\"primary\" className=\"mt-3\" active tabIndex={-1}>Register Now!</CButton>\n                    </Link>\n                  </div>\n                </CCardBody>\n              </CCard>\n            </CCardGroup>\n          </CCol>\n        </CRow>\n      </CContainer>\n    </div>\n  )\n}\n\nexport default Login\n","E:\\react\\dragan wrap\\node-fb-admin\\tools-bar\\src\\ui\\views\\pages\\register\\Register.js",["166","167"],"import React, {useState} from 'react'\nimport {\n  CButton,\n  CCard,\n  CCardBody,\n  CCardFooter,\n  CCol,\n  CContainer,\n  CForm,\n  CInput,\n  CInputGroup,\n  CInputGroupPrepend,\n  CInputGroupText,\n  CRow\n} from '@coreui/react'\nimport CIcon from '@coreui/icons-react'\nimport {useDispatch, useSelector} from \"react-redux\";\nimport {createUserTC} from \"../../../../bll/userReduser\";\nimport {Redirect} from \"react-router-dom\";\nimport Dashboard from \"../../../components/dashboard/Dashboard\";\n\nconst Register = () => {\n\n  const userRecord = useSelector(state => state.users.userRecord)\n  const dispatch = useDispatch()\n  let [username,setUsername]=useState('')\n  let [email, setEmail] = useState('')\n  let [password, setPassword] = useState('lisa15')\n  const createUsername = (e) => {\n    setUsername(e.currentTarget.value)\n  }\n  const createEmail = (e) => {\n    setEmail(e.currentTarget.value)\n  }\n  const createPassword = (e) => {\n    setPassword(e.currentTarget.value)\n  }\n  const HandleRegister = ()=>{\n    dispatch(createUserTC(email,password,username))\n    setUsername('')\n    setEmail('')\n    setPassword('')\n  }\n  console.log(userRecord);\n\n  if(userRecord){return <Redirect to='/login' />}\n\n  return (\n    <div className=\"c-app c-default-layout flex-row align-items-center\">\n      <CContainer>\n        <CRow className=\"justify-content-center\">\n          <CCol md=\"9\" lg=\"7\" xl=\"6\">\n            <CCard className=\"mx-4\">\n              <CCardBody className=\"p-4\">\n                <CForm>\n                  <h1>Register</h1>\n                  <p className=\"text-muted\">Create your account</p>\n                  <CInputGroup className=\"mb-3\">\n                    <CInputGroupPrepend>\n                      <CInputGroupText>\n                        <CIcon name=\"cil-user\" />\n                      </CInputGroupText>\n                    </CInputGroupPrepend>\n                    <CInput type=\"text\" placeholder=\"Username\" autoComplete=\"username\" value={username} onChange={createUsername}/>\n                  </CInputGroup>\n                  <CInputGroup className=\"mb-3\">\n                    <CInputGroupPrepend>\n                      <CInputGroupText>@</CInputGroupText>\n                    </CInputGroupPrepend>\n                    <CInput type=\"text\" placeholder=\"Email\" autoComplete=\"email\" onChange={createEmail} value={email}/>\n                  </CInputGroup>\n                  <CInputGroup className=\"mb-3\">\n                    <CInputGroupPrepend>\n                      <CInputGroupText>\n                        <CIcon name=\"cil-lock-locked\" />\n                      </CInputGroupText>\n                    </CInputGroupPrepend>\n                    <CInput type=\"password\" placeholder=\"Password\" autoComplete=\"new-password\" value={password} onChange={createPassword}/>\n                  </CInputGroup>\n                  {/*<CInputGroup className=\"mb-4\">*/}\n                  {/*  <CInputGroupPrepend>*/}\n                  {/*    <CInputGroupText>*/}\n                  {/*      <CIcon name=\"cil-lock-locked\" />*/}\n                  {/*    </CInputGroupText>*/}\n                  {/*  </CInputGroupPrepend>*/}\n                  {/*  <CInput type=\"password\" placeholder=\"Repeat password\" autoComplete=\"new-password\" />*/}\n                  {/*</CInputGroup>*/}\n                  <CButton color=\"success\" block onClick={HandleRegister}>Create Account</CButton>\n                </CForm>\n              </CCardBody>\n            </CCard>\n          </CCol>\n        </CRow>\n      </CContainer>\n    </div>\n  )\n}\n\nexport default Register\n","E:\\react\\dragan wrap\\node-fb-admin\\tools-bar\\src\\ui\\common\\EditableSpan.tsx",[],"E:\\react\\dragan wrap\\node-fb-admin\\tools-bar\\src\\ui\\views\\groups\\groups.tsx",["168","169"],"import React, {ChangeEvent, useEffect, useState} from 'react';\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {addGroupsTC, getGroupsTC, groupType, setUsersTC} from \"../../../bll/userReduser\";\r\nimport {AppRootStateType} from \"../../../bll/store\";\r\nimport Group from \"./group\";\r\nimport {GroupType} from \"../../../bll/Api\";\r\nimport cl from \"../groupUsers/groupUsers.module.css\";\r\n\r\nconst Groups = () => {\r\n    const dispatch = useDispatch()\r\n    useEffect(() => {\r\n        dispatch(getGroupsTC())\r\n    }, [dispatch])\r\n    const allGroups = useSelector<AppRootStateType, Array<GroupType>>(state => state.users.groups)\r\n    const group = allGroups.map(g => <Group key={g.id} id={g.id} name={g.data.group}\r\n                                            users={g.data?.users}\r\n    />)\r\n    let [nGroup, setNumGroup] = useState<string>('')\r\n    const setNewGroup = (e: ChangeEvent<HTMLInputElement>) => {\r\n        setNumGroup(e.currentTarget.value)\r\n    }\r\n    const createGroup = () => {\r\n        dispatch(addGroupsTC(nGroup.trim()))\r\n        setNumGroup('')\r\n    }\r\n    return (\r\n        <>\r\n            <p>GroupsUsers:\r\n                <input type=\"text\" value={nGroup} onChange={setNewGroup}/>\r\n                <button onClick={createGroup}>create group</button>\r\n            </p>\r\n            <div className={cl.wrap}>{group}</div>\r\n        </>\r\n    );\r\n};\r\n\r\nexport default Groups;","E:\\react\\dragan wrap\\node-fb-admin\\tools-bar\\src\\ui\\views\\groups\\group.tsx",["170"],"import React from 'react';\r\nimport {useDispatch} from \"react-redux\";\r\nimport {removeGroupsTC} from \"../../../bll/userReduser\";\r\nimport cl from \"../groupUsers/groupUsers.module.css\";\r\n\r\ntype userType={\r\n    uid: string\r\n    name:string\r\n}\r\ntype propsType = {\r\n    id: string\r\n    name: string\r\n    users?: userType[]\r\n    // users?: []\r\n}\r\nconst Group = (props: propsType) => {\r\n    const dispatch = useDispatch()\r\n    const update = () => {    }\r\n    const deleteGroup = () => {\r\n        debugger\r\n        dispatch(removeGroupsTC(props.id))\r\n    }\r\n    let user = props.users?.map(u => <div key={u.uid}>\r\n        {/*<p>{u.uid}</p>*/}\r\n        <span >{u?.name}</span></div>)\r\n    return (\r\n        <div className={cl.box}>\r\n            <div><><h5>names group:</h5><p> {props.name}</p></>\r\n                {/*<button onClick={update}>update</button>*/}\r\n                <button onClick={deleteGroup}>delete</button>\r\n            </div>\r\n            {user && <><h5>list users:</h5><p>{user}</p></>}\r\n            <h5>content for group: ...</h5>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default Group;",{"ruleId":"171","replacedBy":"172"},{"ruleId":"173","replacedBy":"174"},{"ruleId":"175","severity":1,"message":"176","line":4,"column":9,"nodeType":"177","messageId":"178","endLine":4,"endColumn":17},{"ruleId":"175","severity":1,"message":"179","line":21,"column":11,"nodeType":"177","messageId":"178","endLine":21,"endColumn":17},{"ruleId":"171","replacedBy":"172"},{"ruleId":"173","replacedBy":"174"},{"ruleId":"180","severity":1,"message":"181","line":6,"column":9,"nodeType":"177","messageId":"178","endLine":6,"endColumn":12},{"ruleId":"180","severity":1,"message":"182","line":23,"column":6,"nodeType":"177","messageId":"178","endLine":23,"endColumn":22},{"ruleId":"175","severity":1,"message":"176","line":20,"column":24,"nodeType":"177","messageId":"178","endLine":20,"endColumn":32},{"ruleId":"180","severity":1,"message":"183","line":187,"column":6,"nodeType":"177","messageId":"178","endLine":187,"endColumn":22},{"ruleId":"180","severity":1,"message":"184","line":1,"column":16,"nodeType":"177","messageId":"178","endLine":1,"endColumn":27},{"ruleId":"180","severity":1,"message":"185","line":1,"column":53,"nodeType":"177","messageId":"178","endLine":1,"endColumn":61},{"ruleId":"180","severity":1,"message":"186","line":3,"column":41,"nodeType":"177","messageId":"178","endLine":3,"endColumn":57},{"ruleId":"180","severity":1,"message":"187","line":6,"column":8,"nodeType":"177","messageId":"178","endLine":6,"endColumn":13},{"ruleId":"188","severity":1,"message":"189","line":24,"column":8,"nodeType":"190","endLine":24,"endColumn":10,"suggestions":"191"},{"ruleId":"175","severity":1,"message":"192","line":7,"column":8,"nodeType":"177","messageId":"178","endLine":7,"endColumn":17},{"ruleId":"171","replacedBy":"193"},{"ruleId":"173","replacedBy":"194"},{"ruleId":"175","severity":1,"message":"195","line":1,"column":9,"nodeType":"177","messageId":"178","endLine":1,"endColumn":17},{"ruleId":"180","severity":1,"message":"196","line":2,"column":49,"nodeType":"177","messageId":"178","endLine":2,"endColumn":68},{"ruleId":"180","severity":1,"message":"197","line":26,"column":6,"nodeType":"177","messageId":"178","endLine":26,"endColumn":19},{"ruleId":"198","severity":1,"message":"199","line":34,"column":94,"nodeType":"200","messageId":"201","endLine":34,"endColumn":96},{"ruleId":"180","severity":1,"message":"202","line":3,"column":28,"nodeType":"177","messageId":"178","endLine":3,"endColumn":42},{"ruleId":"198","severity":1,"message":"199","line":10,"column":45,"nodeType":"200","messageId":"201","endLine":10,"endColumn":47},{"ruleId":"180","severity":1,"message":"197","line":104,"column":6,"nodeType":"177","messageId":"178","endLine":104,"endColumn":19},{"ruleId":"180","severity":1,"message":"195","line":1,"column":9,"nodeType":"177","messageId":"178","endLine":1,"endColumn":17},{"ruleId":"180","severity":1,"message":"203","line":2,"column":9,"nodeType":"177","messageId":"178","endLine":2,"endColumn":29},{"ruleId":"180","severity":1,"message":"203","line":2,"column":9,"nodeType":"177","messageId":"178","endLine":2,"endColumn":29},{"ruleId":"180","severity":1,"message":"204","line":2,"column":31,"nodeType":"177","messageId":"178","endLine":2,"endColumn":55},{"ruleId":"171","replacedBy":"205"},{"ruleId":"173","replacedBy":"206"},{"ruleId":"180","severity":1,"message":"207","line":1,"column":42,"nodeType":"177","messageId":"178","endLine":1,"endColumn":51},{"ruleId":"180","severity":1,"message":"208","line":4,"column":9,"nodeType":"177","messageId":"178","endLine":4,"endColumn":25},{"ruleId":"180","severity":1,"message":"186","line":4,"column":27,"nodeType":"177","messageId":"178","endLine":4,"endColumn":43},{"ruleId":"180","severity":1,"message":"209","line":4,"column":59,"nodeType":"177","messageId":"178","endLine":4,"endColumn":67},{"ruleId":"180","severity":1,"message":"210","line":6,"column":17,"nodeType":"177","messageId":"178","endLine":6,"endColumn":22},{"ruleId":"188","severity":1,"message":"211","line":39,"column":7,"nodeType":"190","endLine":39,"endColumn":20,"suggestions":"212"},{"ruleId":"188","severity":1,"message":"213","line":43,"column":7,"nodeType":"190","endLine":43,"endColumn":18,"suggestions":"214"},{"ruleId":"175","severity":1,"message":"176","line":2,"column":15,"nodeType":"177","messageId":"178","endLine":2,"endColumn":23},{"ruleId":"175","severity":1,"message":"215","line":8,"column":9,"nodeType":"177","messageId":"178","endLine":8,"endColumn":21},{"ruleId":"175","severity":1,"message":"216","line":6,"column":3,"nodeType":"177","messageId":"178","endLine":6,"endColumn":14},{"ruleId":"175","severity":1,"message":"217","line":20,"column":8,"nodeType":"177","messageId":"178","endLine":20,"endColumn":17},{"ruleId":"180","severity":1,"message":"218","line":3,"column":35,"nodeType":"177","messageId":"178","endLine":3,"endColumn":44},{"ruleId":"180","severity":1,"message":"219","line":3,"column":46,"nodeType":"177","messageId":"178","endLine":3,"endColumn":56},{"ruleId":"180","severity":1,"message":"220","line":18,"column":11,"nodeType":"177","messageId":"178","endLine":18,"endColumn":17},"no-native-reassign",["221"],"no-negated-in-lhs",["222"],"no-unused-vars","'Redirect' is defined but never used.","Identifier","unusedVar","'status' is assigned a value but never used.","@typescript-eslint/no-unused-vars","'log' is defined but never used.","'providerDataType' is defined but never used.","'GetTasksResponse' is defined but never used.","'ChangeEvent' is defined but never used.","'useState' is defined but never used.","'setUserOnGroupTC' is defined but never used.","'Group' is defined but never used.","react-hooks/exhaustive-deps","React Hook useCallback has a missing dependency: 'dispatch'. Either include it or remove the dependency array.","ArrayExpression",["223"],"'Container' is defined but never used.",["221"],["222"],"'Dispatch' is defined but never used.","'UpdateTaskModelType' is defined but never used.","'ThunkDispatch' is defined but never used.","eqeqeq","Expected '!==' and instead saw '!='.","BinaryExpression","unexpected","'setAppStatusAC' is defined but never used.","'handleServerAppError' is defined but never used.","'handleServerNetworkError' is defined but never used.",["221"],["222"],"'useEffect' is defined but never used.","'setUserOnGroupAC' is defined but never used.","'userType' is defined but never used.","'Input' is defined but never used.","React Hook useCallback has missing dependencies: 'dispatch' and 'props.uid'. Either include them or remove the dependency array.",["224"],"React Hook useCallback has missing dependencies: 'name' and 'props'. Either include them or remove the dependency array. However, 'props' will change when *any* prop changes, so the preferred fix is to destructure the 'props' object outside of the useCallback call and refer to those specific props inside useCallback.",["225"],"'createUserTC' is defined but never used.","'CCardFooter' is defined but never used.","'Dashboard' is defined but never used.","'groupType' is defined but never used.","'setUsersTC' is defined but never used.","'update' is assigned a value but never used.","no-global-assign","no-unsafe-negation",{"desc":"226","fix":"227"},{"desc":"228","fix":"229"},{"desc":"230","fix":"231"},"Update the dependencies array to be: [dispatch]",{"range":"232","text":"233"},"Update the dependencies array to be: [dispatch, email, name, props.uid]",{"range":"234","text":"235"},"Update the dependencies array to be: [groupName, name, props]",{"range":"236","text":"237"},[955,957],"[dispatch]",[1896,1909],"[dispatch, email, name, props.uid]",[2039,2050],"[groupName, name, props]"]