{"version":3,"sources":["bll/Api.ts","bll/userReduser.ts","App.jsx","reportWebVitals.ts","bll/appReduserOld.js","bll/tasksReduser.ts","bll/todolists-reducer.ts","bll/app-reducer.ts","bll/authReducer.ts","bll/store.ts","index.tsx","ui/components/dashboard/listItems.jsx","ui/components/dashboard/Dashboard.jsx"],"names":["TaskStatuses","TaskPriorities","instance","axios","create","baseURL","Users","getAllUsers","get","getGroups","then","r","data","auth","addGroup","id","name","post","updateUser","uid","payload","put","userRemove","delete","createUser","email","password","username","displayName","groupRemove","initState","groups","users","status","userRecord","adminUid","message","userid","userReducer","state","action","type","console","log","filter","g","authAC","authTC","dispatch","app","onAuthStateChanged","user","removeUserTC","res","setUsersTC","removeGroupsTC","getGroupsTC","loginUserTC","signInWithEmailAndPassword","catch","er","signOutTC","firebase","signOut","error","updateUserTC","createUserTC","alert","addGroupsTC","group","uuid","Login","React","lazy","Register","App","useDispatch","useEffect","useSelector","className","Suspense","fallback","exact","path","render","Dashboard","to","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","initialState","token","isInitialized","isLoggedIn","rootReducer","combineReducers","nav","rest","tasks","todolistId","t","taskId","task","todoListId","map","model","todolist","copyState","todolists","forEach","tl","todoList","entityStatus","title","value","store","createStore","applyMiddleware","thunkMiddleware","initializeApp","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","ReactDOM","StrictMode","document","getElementById","mainListItems","ListItem","button","style","display","ListItemIcon","ListItemText","primary","secondaryListItems","ListSubheader","inset","Copyright","Typography","variant","color","align","Link","href","Date","getFullYear","useStyles","makeStyles","theme","root","toolbar","paddingRight","toolbarIcon","alignItems","justifyContent","padding","mixins","appBar","zIndex","drawer","transition","transitions","easing","sharp","duration","leavingScreen","appBarShift","marginLeft","width","enteringScreen","menuButton","marginRight","menuButtonHidden","flexGrow","drawerPaper","position","whiteSpace","drawerPaperClose","overflowX","spacing","breakpoints","up","appBarSpacer","content","height","overflow","container","paddingTop","paddingBottom","paper","flexDirection","fixedHeight","Starting","GroupsUsers","classes","useState","open","setOpen","CssBaseline","AppBar","clsx","Toolbar","IconButton","edge","aria-label","onClick","component","noWrap","Badge","badgeContent","Button","Drawer","Divider","List","Container","maxWidth","props","Box","pt"],"mappings":"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","file":"static/js/main.c595540a.chunk.js","sourcesContent":["import axios from 'axios'\n\nconst instance = axios.create({\n    baseURL: 'https://dragan.lisa15.ru/',\n    // baseURL: 'http://localhost:7563/',\n    // baseURL: 'https:/',\n})\nexport type GroupDataType = {\n    first?: string\n    group: string\n    last?: string\n    users?:[]\n}\nexport type GroupType = {\n    data: GroupDataType\n    id: string\n}\nexport const Users = {\n    getAllUsers() {\n        return instance.get('users')\n    },\n    getGroups() {\n        return instance.get<Array<GroupType>>('api/getGroups').then(r => r.data)\n    },\n    auth() {\n        return instance.get('auth')\n    },\n    // addGroup(id: string, name: string,idGrUser:string,users:string) {\n    addGroup(id: string, name: string) {\n        // debugger\n        return instance.post('api/createGroup', {id, name})\n    },\n    updateUser(uid: string, payload: { email?: string, nickName?: string }) {\n        return instance.put(`userUpdate/${uid}`, {payload})\n    },\n    userRemove(uid: string) {\n        // @ts-ignore\n        return instance.delete(`userRemove/${uid}`)\n    },\n    createUser(email: string, password: string, username: string) {\n        return instance.post(`createUser`, {email, password, displayName: username})\n    },\n    groupRemove(id: string) {\n        debugger\n        return instance.delete(`groupRemove/${id}`)\n    },\n}\nexport const Tasks = {\n    getAllTasks() {\n        // const promise = instance.get('users');\n        // return promise;\n        // debugger\n        return instance.get('users')\n    },\n    getGroups() {\n        // const promise = instance.get('users');\n        // return promise;\n        // debugger\n        return instance.get('/api/get')\n    },\n    addTodo(id: string, name: string) {\n        debugger\n        return instance.post('api/create', {id, name})\n    }\n}\n\n//import * as admin from 'firebase-admin';\n//const serviceAccount = require(\"../fir-silky-firebase-adminsdk-6l12p-2bc5e41df4.json\");\n\n\n//const app = admin.initializeApp();\n// admin.initializeApp({\n//     credential: admin.credential.applicationDefault(),\n//   //credential: admin.credential.cert(serviceAccount),\n//   databaseURL: \"https://fir-silky-default-rtdb.europe-west1.firebasedatabase.app\"\n// });\n// const adminId = 'lisa-fox'\n// admin.auth().createCustomToken(adminId)\n//     .then((customToken)=>{\n//       console.log(customToken);\n//     })\n//     .catch((error)=>{\n//       console.log(error);\n//     })\n\n//https://firebase.google.com/docs/cloud-messaging/auth-server\n//!!!!! https://firebase.google.com/docs/auth/admin/manage-users\n//https://firebase.google.com/docs/database/admin/start/?hl=ru-ru#node.js\n// export const listAllUsers = (nextPageToken) => {\n//   // List batch of users, 1000 at a time.\n//   admin\n//       .auth()\n//       .listUsers(1000, nextPageToken)\n//       .then((listUsersResult) => {\n//           debugger\n//         listUsersResult.users.forEach((userRecord) => {\n//           console.log('user', userRecord.toJSON());\n//         });\n//         if (listUsersResult.pageToken) {\n//           // List next batch of users.\n//           listAllUsers(listUsersResult.pageToken);\n//         }\n//       })\n//       .catch((error) => {\n//         console.log('Error listing users:', error);\n//       });\n//};\n// Start listing users from the beginning, 1000 at a time.\n//listAllUsers();\n//delet \"firebase\": \"^8.2.6\",\n\n//const serviceAccount = require(\"path/to/serviceAccountKey.json\");\n// export const firebaseConfig={\n//   apiKey: \"AIzaSyDGqV4nDHMokspRbNj9OufL531PwdNB2sc\",\n//   authDomain: \"fir-silky.firebaseapp.com\",\n//   databaseURL: \"https://fir-silky-default-rtdb.europe-west1.firebasedatabase.app\",\n//   projectId: \"fir-silky\",\n//   storageBucket: \"fir-silky.appspot.com\",\n//   messagingSenderId: \"459950163847\",\n//   appId: \"1:459950163847:web:2f94e0b34b0c77d10cb522\"\n// }\n\n// types\nexport type LoginParamsType = {\n    password: string\n    email: string\n    rememberMy?: boolean\n}\nexport type myResponseType = {\n    id: number\n    email: string\n    login: string\n}\nexport type TodolistType = {\n    id: string\n    title: string\n    addedDate: string\n    order: number\n}\nexport type ResponseType<D = {}> = {\n    resultCode: number\n    messages: Array<string>\n    fieldsErrors: Array<string>\n    data: D\n}\n\nexport enum TaskStatuses {\n    New = 0,\n    InProgress = 1,\n    Completed = 2,\n    Draft = 3\n}\n\nexport enum TaskPriorities {\n    Low = 0,\n    Middle = 1,\n    Hi = 2,\n    Urgently = 3,\n    Later = 4\n}\n\nexport type TaskType = {\n    description: string\n    title: string\n    status: TaskStatuses\n    priority: TaskPriorities\n    startDate: string\n    deadline: string\n    id: string\n    todoListId: string\n    order: number\n    addedDate: string\n}\nexport type UpdateTaskModelType = {\n    title: string\n    description: string\n    status: TaskStatuses\n    priority: TaskPriorities\n    startDate: string\n    deadline: string\n}\ntype GetTasksResponse = {\n    error: string | null\n    totalCount: number\n    items: TaskType[]\n}\n","import {Dispatch} from \"redux\";\nimport {Users} from \"./Api\";\nimport * as uuid from 'uuid';\nimport firebase from \"firebase\";\nimport {app} from \"../index\";\n// import {listAllUsers} from \"./Api\";\n\ntype setUsersACType = ReturnType<typeof setUsersAC>\ntype authACType = ReturnType<typeof authAC>\ntype setGroupsACType = ReturnType<typeof setGroupsAC>\ntype addGroupsACType = ReturnType<typeof addGroupsAC>\ntype deleteGroupsACType = ReturnType<typeof deleteGroupsAC>\ntype setUserOnGroupACType = ReturnType<typeof setUserOnGroupAC>\ntype setUserRecordACType = ReturnType<typeof setUserRecordAC>\ntype loginUserACType = ReturnType<typeof loginUserAC>\ntype actionType = setUsersACType | setGroupsACType | addGroupsACType | deleteGroupsACType | setUserOnGroupACType |\n    setUserRecordACType | authACType | loginUserACType\nexport type  groupUsersType={\n    uid:string\n}\ntype providerDataType = {\n    0: { uid: string, email: string, providerId: string }\n    length: number\n    tokensValidAfterTime: string\n}\nexport type userType = {\n    disabled: boolean\n    email: string\n    emailVerified: boolean\n    metadata: { lastSignInTime: string, creationTime: string }\n    passwordHash: string\n    passwordSalt: string\n    providerData: any\n    tokensValidAfterTime: string\n    uid: string\n    name?:string\n    group?:string\n    listTasks?: {}\n}\nexport type groupType = {\n    id:string\n    group:string\n    users:groupUsersType[]\n}\ntype initStateType = {\n    groups: groupType[]\n    users: Array<userType>\n    status: boolean\n    userRecord:string\n    adminUid:string\n    message:string\n    email:string\n    userid:string\n}\nlet initState: initStateType = {\n    groups: [],\n    users: [],\n    status: false,\n    userRecord: '',\n    adminUid: 'WuVt9TwRQ0grRFpgAKQlB1nJGAm1',\n    message: '',\n    email:'',\n    userid:'',\n}\n\nexport const userReducer = (state = initState, action: actionType) => {\n    switch (action.type) {\n        case \"USERS/LOGIN_USER\":return {...state,email: action.email, userid:action.userid}\n        case \"USERS/AUTH\":\n            // console.log(state.status);\n            return {...state, status: action.payload}\n        case \"USERS/SET-USER-RECORD\":\n            return {...state, userRecord:action.payload, status: true}\n        case 'USERS/SET-GROUPS':\n            return {...state, groups: action.payload}\n        case \"USERS/SET-USER-ON-GROUP\": {\n            // debugger\n            console.log('groups: ',state.groups);\n            return {\n                ...state,\n                // groups: [state.groups.map(g => g.group === action.payload.groupName ? g.users[.uid] : g)]\n            }\n        }\n        case 'USERS/SET-USERS':\n            // console.log(action.payload)\n            return {...state, users: action.payload}\n        case 'USERS/ADD-GROUP':\n            return {...state, groups: [...state.groups, action.payload]}\n        case 'USERS/DELETE-GROUP':\n            return {...state, groups:  [state.groups.filter(g=> g.id!==action.payload)] }\n        default:\n            return {...state}\n    }\n}\nexport const authAC = (payload:boolean) =>({type: 'USERS/AUTH',payload}as const)\nexport const setUsersAC = (payload: any) => ({type: 'USERS/SET-USERS', payload} as const)\nexport const setUserRecordAC = (payload: string) => ({type: 'USERS/SET-USER-RECORD', payload} as const)\nexport const setUserOnGroupAC = (payload: {id:string,groupName:string}) => ({type: 'USERS/SET-USER-ON-GROUP', payload} as const)\nexport const setGroupsAC = (payload: any) => ({type: 'USERS/SET-GROUPS', payload} as const)\nexport const addGroupsAC = (payload: any) => ({type: 'USERS/ADD-GROUP', payload} as const)\nexport const deleteGroupsAC = (payload: any) => ({type: 'USERS/DELETE-GROUP', payload} as const)\nexport const loginUserAC = (email:string,userid:string) => ({type: 'USERS/LOGIN_USER', email,userid} as const)\n\nexport const authTC = () => (dispatch: Dispatch) =>{\n    // Users.auth()\n    //     .then(res=>{\n    //     dispatch(authAC(res))\n    // })\n    app.auth().onAuthStateChanged(function (user:any) {\n        console.log('onAuthStateChanged :',user);\n        if (user) {\n            dispatch(authAC(true))\n            dispatch(loginUserAC(user.email, user.uid))\n        } else {\n            dispatch(authAC(false))\n        }\n    })\n}\nexport const removeUserTC = (uid:string) => (dispatch: any) =>{\n    Users.userRemove(uid).then(res=>{\n        dispatch(setUsersTC())\n        console.log(res);\n    })\n}\nexport const removeGroupsTC = (id:string) => (dispatch: any) =>{\n    debugger\n    Users.groupRemove(id).then(res=>{\n        dispatch(getGroupsTC())\n        console.log(res);\n    })\n}\nexport const loginUserTC = (email:string,password:string) => (dispatch: any) =>{\n    app.auth().signInWithEmailAndPassword(email, password)\n        .then((res) => {\n            dispatch(authAC(true))\n            dispatch(setUsersTC())\n            // console.log(res);\n        })\n        .catch(er => {\n            console.log(er);\n        })\n}\nexport const signOutTC = () => (dispatch: Dispatch) => {\n    firebase.auth().signOut().then((res) => {\n        console.log(res);\n    }).catch((error) => {\n        console.log(error);\n    });\n}\nexport const updateUserTC = (uid:string,payload:any) => (dispatch: any) =>{\n    Users.updateUser(uid,payload).then(res=>{\n        dispatch(setUsersTC())\n        console.log(res);\n    })\n}\nexport const createUserTC = (email:string,password:string,username:string) => (dispatch: any) =>{\n    Users.createUser(email,password,username).then(res=>{\n        dispatch(setUserRecordAC(res.data))\n        if(res.data.message){alert(res.data.message)}\n    })\n}\nexport const setUsersTC = () => (dispatch: Dispatch) => {\n    Users.getAllUsers()\n        .then(res => {\n                dispatch(setUsersAC(res.data))\n            }\n        ).catch(er=>\n        alert(er)\n    )\n}\nexport const getGroupsTC = () => (dispatch: Dispatch) => {\n    // Users.getGroupsAll()\n    Users.getGroups()\n        .then(res => {\n            console.log(res);\n            dispatch(setGroupsAC(res))\n            }\n        )\n}\nexport const addGroupsTC = ( group: string) => (dispatch: any) => {\n    // debugger\n    let id= uuid.v1()\n    let idGrUser= uuid.v1()\n    Users.addGroup( id,group)\n    // Users.addGroup( id,group,idGrUser,users)\n        .then(res => {\n            dispatch(getGroupsTC())\n            console.log(res);\n        })\n}\nexport const setUserOnGroupTC = ( idGgroup: string,uid:string) => (dispatch: any) => {\n\n}\n// export const addItemTC = ( group: string) => (dispatch: Dispatch) => {\n// // export const addGroupsTC = (id: string, group: string) => (dispatch: Dispatch) => {\n//     debugger\n//     // dispatch(setGroupsAC({id,group}))\n//\n//     Users.addGroup(group)\n//         .then(res => {\n//             debugger\n//\n//            dispatch(setGroupsAC(res.data))\n//            // dispatch(setGroupsAC({id,name}))\n//         })\n// }","import React, {useEffect} from 'react'\nimport './App.css'\nimport Dashboard from \"./ui/components/dashboard/Dashboard\";\nimport {Redirect, Route, Switch} from \"react-router-dom\"\nimport {useDispatch, useSelector} from \"react-redux\";\nimport {authTC} from \"./bll/userReduser\";\n// import Login from \"./ui/views/pages/login/Login\";\n\n\n\n// Pages\nconst Login = React.lazy(() => import('./ui/views/pages/login/Login'));\nconst Register = React.lazy(() => import('./ui/views/pages/register/Register'));\n// const Page404 = React.lazy(() => import('./views/pages/page404/Page404'));\n// const Page500 = React.lazy(() => import('./views/pages/page500/Page500'));\nfunction App() {\n\n    const dispatch = useDispatch()\n    useEffect(()=>{\n        debugger\n        dispatch(authTC())\n    },[dispatch])\n    const status = useSelector(state => state.users.status)\n   if (!status) {return <Redirect to={'/login'}/>}\n    // else { return <Redirect to={'/groupsUsers'}/>}\n\n  return (\n    <div className=\"App\">\n        <React.Suspense fallback={'...loading'}>\n            <Switch>\n                <Route exact path=\"/login\"  render={() => <Login/>} />\n                <Route exact path=\"/register\" render={() => <Register />} />\n                <Route exact path=\"/dashboard\" render=<Dashboard/>/>\n                {/*<Route exact path=\"/404\" name=\"Page 404\" render={props => <Page404 {...props}/>} />*/}\n                {/*<Route exact path=\"/500\" name=\"Page 500\" render={props => <Page500 {...props}/>} />*/}\n                {/*<Route path=\"/\" name=\"Home\" render={props => <TheLayout {...props}/>} />*/}\n                <Dashboard />\n            </Switch>\n        </React.Suspense>\n    </div>\n  );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import {Dispatch} from \"redux\";\n//import * as admin from 'firebase-admin';\n\nconst initialState = {\n  token: ''\n}\n\nexport const changeStateReducer = (state = initialState, { type, ...rest }) => {\n  switch (type) {\n    case 'set':\n      return {...state, ...rest }\n    default:\n      return state\n  }\n}\n","import {Dispatch} from \"redux\";\nimport {TaskPriorities, TaskStatuses, TaskType, UpdateTaskModelType, Users} from \"./Api\";\nimport {AddTodolistActionType, RemoveTodolistActionType, SetTodolistsActionType} from \"./todolists-reducer\";\nimport {SetAppErrorActionType, SetAppStatusActionType} from \"./app-reducer\";\n\n\nexport type UpdateDomainTaskModelType = {\n    title?: string\n    description?: string\n    status?: TaskStatuses\n    priority?: TaskPriorities\n    startDate?: string\n    deadline?: string\n}\nexport type TasksStateType = {\n    [key: string]: Array<TaskType>\n}\ntype ActionsType =\n    | ReturnType<typeof removeTaskAC>\n    | ReturnType<typeof addTaskAC>\n    | ReturnType<typeof updateTaskAC>\n    | AddTodolistActionType\n    | RemoveTodolistActionType\n    | SetTodolistsActionType\n    | ReturnType<typeof setTasksAC>\ntype ThunkDispatch = Dispatch<ActionsType | SetAppStatusActionType | SetAppErrorActionType>\n\n\nconst initialState: TasksStateType = {}\n\nexport const tasksReducer = (state: TasksStateType = initialState, action: ActionsType): TasksStateType => {\n    switch (action.type) {\n        case 'REMOVE-TASK':\n            return {...state, [action.todolistId]: state[action.todolistId].filter(t => t.id != action.taskId)}\n        case 'ADD-TASK':\n            return {...state, [action.task.todoListId]: [action.task, ...state[action.task.todoListId]]}\n        case 'UPDATE-TASK':\n            return {\n                ...state,\n                [action.todolistId]: state[action.todolistId]\n                    .map(t => t.id === action.taskId ? {...t, ...action.model} : t)\n            }\n        case 'ADD-TODOLIST':\n            return {...state, [action.todolist.id]: []}\n        case 'REMOVE-TODOLIST':\n            const copyState = {...state}\n            delete copyState[action.id]\n            return copyState\n        case 'SET-TODOLISTS': {\n            const copyState = {...state}\n            action.todolists.forEach(tl => {\n                copyState[tl.id] = []\n            })\n            return copyState\n        }\n        case 'SET-TASKS':\n            return {...state, [action.todolistId]: action.tasks}\n        default:\n            return state\n    }\n}\n\n// actions\nexport const removeTaskAC = (taskId: string, todolistId: string) =>\n    ({type: 'REMOVE-TASK', taskId, todolistId} as const)\nexport const addTaskAC = (task: TaskType) =>\n    ({type: 'ADD-TASK', task} as const)\nexport const updateTaskAC = (taskId: string, model: UpdateDomainTaskModelType, todolistId: string) =>\n    ({type: 'UPDATE-TASK', model, todolistId, taskId} as const)\nexport const setTasksAC = (tasks: Array<TaskType>, todolistId: string) =>\n    ({type: 'SET-TASKS', tasks, todolistId} as const)\n\n// thunks\n// export const fetchTasksTC = (todolistId: string) => (dispatch: Dispatch<ActionsType | SetAppStatusActionType>) => {\n//     dispatch(setAppStatusAC('loading'))\n//     todolistsAPI.getTasks(todolistId)\n//         .then((res) => {\n//             const tasks = res.data.items\n//             dispatch(setTasksAC(tasks, todolistId))\n//             dispatch(setAppStatusAC('succeeded'))\n//         })\n// }\n// export const removeTaskTC = (taskId: string, todolistId: string) => (dispatch: Dispatch<ActionsType>) => {\n//     todolistsAPI.deleteTask(todolistId, taskId)\n//         .then(res => {\n//             const action = removeTaskAC(taskId, todolistId)\n//             dispatch(action)\n//         })\n// }\n// export const addTaskTC = (title: string, todolistId: string) => (dispatch: Dispatch<ActionsType | SetAppErrorActionType | SetAppStatusActionType>) => {\n//     dispatch(setAppStatusAC('loading'))\n//     todolistsAPI.createTask(todolistId, title)\n//         .then(res => {\n//             if (res.data.resultCode === 0) {\n//                 const task = res.data.data.item\n//                 const action = addTaskAC(task)\n//                 dispatch(action)\n//                 dispatch(setAppStatusAC('succeeded'))\n//             } else {\n//                 handleServerAppError(res.data, dispatch);\n//             }\n//         })\n//         .catch((error) => {\n//             handleServerNetworkError(error, dispatch)\n//         })\n// }\n// export const updateTaskTC = (taskId: string, domainModel: UpdateDomainTaskModelType, todolistId: string) =>\n//     (dispatch: ThunkDispatch, getState: () => AppRootStateType) => {\n//         const state = getState()\n//         const task = state.tasks[todolistId].find(t => t.id === taskId)\n//         if (!task) {\n//             //throw new Error(\"task not found in the state\");\n//             console.warn('task not found in the state')\n//             return\n//         }\n//\n//         const apiModel: UpdateTaskModelType = {\n//             deadline: task.deadline,\n//             description: task.description,\n//             priority: task.priority,\n//             startDate: task.startDate,\n//             title: task.title,\n//             status: task.status,\n//             ...domainModel\n//         }\n//\n//         todolistsAPI.updateTask(todolistId, taskId, apiModel)\n//             .then(res => {\n//                 if (res.data.resultCode === 0) {\n//                     const action = updateTaskAC(taskId, domainModel, todolistId)\n//                     dispatch(action)\n//                 } else {\n//                     handleServerAppError(res.data, dispatch);\n//                 }\n//             })\n//             .catch((error) => {\n//                 handleServerNetworkError(error, dispatch);\n//             })\n//     }\n\n\nexport const setUsersAC = (payload: any) => ({type: 'SET-USERS', payload} as const)\nexport const setGroupsAC = (payload: any) => ({type: 'SET-GROUPS', payload} as const)\nexport const addGroupsAC = (payload: any) => ({type: 'ADD-GROUPS', payload} as const)\n//export const setUsersTC = (payload:any) =>({type: 'SET-USERS',payload}as const)\n// export const setTasksTC = () => (dispatch:Dispatch) =>{\n//   const tasks =firebase.database().ref('tasks')\n//   tasks.on('value',(el)=>{\n//     dispatch(setUsers(el.val()))\n//     // let aaa = el.val()\n//     // console.log(aaa);\n//   })\n// }\nexport const setUsersTC = () => (dispatch: Dispatch) => {\n    Users.getAllUsers()\n        .then(res => {\n                dispatch(setUsersAC(res.data.users))\n            }\n        )\n}\nexport const setTasksTC = () => (dispatch: Dispatch) => {\n    Users.getAllUsers()\n        .then(res => {\n                dispatch(setUsersAC(res.data.users))\n            }\n        )\n}\n// export const addGroups = (id: string, name: string) => (dispatch: Dispatch) => {\n//     debugger\n//     Users.addGroup(id, name)\n//         .then(res => {\n//             debugger\n//             dispatch(setGroupsAC(res.data))\n//         })\n// }","import {Dispatch} from 'redux'\r\nimport {TodolistType} from \"./Api\";\r\nimport {RequestStatusType, setAppStatusAC, SetAppStatusActionType} from \"./app-reducer\";\r\n\r\nconst initialState: Array<TodolistDomainType> = []\r\n\r\nexport const todolistsReducer = (state: Array<TodolistDomainType> = initialState, action: ActionsType): Array<TodolistDomainType> => {\r\n    switch (action.type) {\r\n        case 'REMOVE-TODOLIST':\r\n            return state.filter(tl => tl.id != action.id)\r\n        case 'ADD-TODOLIST':\r\n            return [{...action.todolist, filter: 'all', entityStatus: 'idle'}, ...state]\r\n\r\n        case 'CHANGE-TODOLIST-TITLE':\r\n            return state.map(tl => tl.id === action.id ? {...tl, title: action.title} : tl)\r\n        case 'CHANGE-TODOLIST-FILTER':\r\n            return state.map(tl => tl.id === action.id ? {...tl, filter: action.filter} : tl)\r\n        case 'CHANGE-TODOLIST-ENTITY-STATUS':\r\n            return state.map(tl => tl.id === action.id ? {...tl, entityStatus: action.status} : tl)\r\n        case 'SET-TODOLISTS':\r\n            return action.todolists.map(tl => ({...tl, filter: 'all', entityStatus: 'idle'}))\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\n// actions\r\nexport const removeTodolistAC = (id: string) => ({type: 'REMOVE-TODOLIST', id} as const)\r\nexport const addTodolistAC = (todolist: TodolistType) => ({type: 'ADD-TODOLIST', todolist} as const)\r\nexport const changeTodolistTitleAC = (id: string, title: string) => ({\r\n    type: 'CHANGE-TODOLIST-TITLE',\r\n    id,\r\n    title\r\n} as const)\r\nexport const changeTodolistFilterAC = (id: string, filter: FilterValuesType) => ({\r\n    type: 'CHANGE-TODOLIST-FILTER',\r\n    id,\r\n    filter\r\n} as const)\r\nexport const changeTodolistEntityStatusAC = (id: string, status: RequestStatusType) => ({\r\n    type: 'CHANGE-TODOLIST-ENTITY-STATUS', id, status } as const)\r\nexport const setTodolistsAC = (todolists: Array<TodolistType>) => ({type: 'SET-TODOLISTS', todolists} as const)\r\n\r\n// thunks\r\n// export const fetchTodolistsTC = () => {\r\n//     return (dispatch: ThunkDispatch) => {\r\n//         dispatch(setAppStatusAC('loading'))\r\n//         todolistsAPI.getTodolists()\r\n//             .then((res) => {\r\n//                 dispatch(setTodolistsAC(res.data))\r\n//                 dispatch(setAppStatusAC('succeeded'))\r\n//             })\r\n//     }\r\n// }\r\n// export const removeTodolistTC = (todolistId: string) => {\r\n//     return (dispatch: ThunkDispatch) => {\r\n//         //изменим глобальный статус приложения, чтобы вверху полоса побежала\r\n//         dispatch(setAppStatusAC('loading'))\r\n//         //изменим статус конкретного тудулиста, чтобы он мог задизеблить что надо\r\n//         dispatch(changeTodolistEntityStatusAC(todolistId, 'loading'))\r\n//         todolistsAPI.deleteTodolist(todolistId)\r\n//             .then((res) => {\r\n//                 dispatch(removeTodolistAC(todolistId))\r\n//                 //скажем глобально приложению, что асинхронная операция завершена\r\n//                 dispatch(setAppStatusAC('succeeded'))\r\n//             })\r\n//     }\r\n// }\r\n// export const addTodolistTC = (title: string) => {\r\n//     return (dispatch: ThunkDispatch) => {\r\n//         dispatch(setAppStatusAC('loading'))\r\n//         todolistsAPI.createTodolist(title)\r\n//             .then((res) => {\r\n//                 dispatch(addTodolistAC(res.data.data.item))\r\n//                 dispatch(setAppStatusAC('succeeded'))\r\n//             })\r\n//     }\r\n// }\r\n// export const changeTodolistTitleTC = (id: string, title: string) => {\r\n//     return (dispatch: Dispatch<ActionsType>) => {\r\n//         todolistsAPI.updateTodolist(id, title)\r\n//             .then((res) => {\r\n//                 dispatch(changeTodolistTitleAC(id, title))\r\n//             })\r\n//     }\r\n// }\r\n\r\n// types\r\nexport type AddTodolistActionType = ReturnType<typeof addTodolistAC>;\r\nexport type RemoveTodolistActionType = ReturnType<typeof removeTodolistAC>;\r\nexport type SetTodolistsActionType = ReturnType<typeof setTodolistsAC>;\r\ntype ActionsType =\r\n    | RemoveTodolistActionType\r\n    | AddTodolistActionType\r\n    | ReturnType<typeof changeTodolistTitleAC>\r\n    | ReturnType<typeof changeTodolistFilterAC>\r\n    | SetTodolistsActionType\r\n    | ReturnType<typeof changeTodolistEntityStatusAC>\r\nexport type FilterValuesType = 'all' | 'active' | 'completed';\r\nexport type TodolistDomainType = TodolistType & {\r\n    filter: FilterValuesType\r\n    entityStatus: RequestStatusType\r\n}\r\ntype ThunkDispatch = Dispatch<ActionsType | SetAppStatusActionType>\r\n","import {Dispatch} from \"redux\";\r\nimport {handleServerAppError} from \"../utils/error-utils\";\r\n\r\nconst initialState: InitialStateType = {\r\n    status: 'idle',\r\n    error: null,\r\n    isInitialized: false\r\n}\r\n\r\nexport const appReducer = (state: InitialStateType = initialState, action: ActionsType): InitialStateType => {\r\n    switch (action.type) {\r\n        case 'APP/SET-STATUS':\r\n            return {...state, status: action.status}\r\n        case 'APP/SET-ERROR':\r\n            return {...state, error: action.error}\r\n        case 'IS-INIT':\r\n            return {...state, isInitialized: action.isInitialized}\r\n        default:\r\n            return {...state}\r\n    }\r\n}\r\n\r\nexport type RequestStatusType = 'idle' | 'loading' | 'succeeded' | 'failed'\r\nexport type InitialStateType = {\r\n    // происходит ли сейчас взаимодействие с сервером\r\n    status: RequestStatusType\r\n    // если ошибка какая-то глобальная произойдёт - мы запишем текст ошибки сюда\r\n    error: string | null\r\n    isInitialized: boolean\r\n}\r\n\r\nexport const setAppErrorAC = (error: string | null) => ({type: 'APP/SET-ERROR', error} as const)\r\nexport const setAppStatusAC = (status: RequestStatusType) => ({type: 'APP/SET-STATUS', status} as const)\r\nexport const setIsInitializedAC = (isInitialized: boolean) => ({type: 'IS-INIT', isInitialized} as const)\r\nexport type SetAppErrorActionType = ReturnType<typeof setAppErrorAC>\r\nexport type SetAppStatusActionType = ReturnType<typeof setAppStatusAC>\r\nexport type setIsInitializedACType = ReturnType<typeof setIsInitializedAC>\r\n\r\n\r\n// export const initializeAppTC = () => (dispatch: Dispatch) => {\r\n//     authAPI.me()\r\n//         .then(res => {\r\n//         // debugger\r\n//         if (res.data.resultCode === 0) {\r\n//             dispatch(setIsLoggedInAC(true));\r\n//\r\n//          }\r\n//         else {\r\n//             // debugger\r\n//             // // handleServerAppError(err, dispatch);\r\n//         }\r\n//     })\r\n//         .catch((err) => {\r\n//             handleServerAppError(err, dispatch);\r\n//             dispatch(setIsInitializedAC(true))\r\n//             // throw new Error(err.message)\r\n//         })\r\n//     dispatch(setIsInitializedAC(true))\r\n// }\r\n\r\ntype ActionsType =\r\n    | SetAppErrorActionType\r\n    | SetAppStatusActionType\r\n    | setIsInitializedACType\r\n","import { Dispatch } from 'redux'\r\nimport {handleServerAppError, handleServerNetworkError} from \"../utils/error-utils\"\r\nimport {LoginParamsType} from \"./Api\";\r\nimport {SetAppErrorActionType, setAppStatusAC, SetAppStatusActionType} from \"./app-reducer\";\r\n\r\nconst initialState = {\r\n    isLoggedIn: false\r\n}\r\ntype InitialStateType = typeof initialState\r\n\r\nexport const authReducer = (state: InitialStateType = initialState, action: ActionsType): InitialStateType => {\r\n    switch (action.type) {\r\n        case 'login/SET-IS-LOGGED-IN':\r\n            return {...state, isLoggedIn: action.value}\r\n        default:\r\n            return state\r\n    }\r\n}\r\n// actions\r\nexport const setIsLoggedInAC = (value: boolean) =>\r\n    ({type: 'login/SET-IS-LOGGED-IN', value} as const)\r\n\r\n// thunks\r\nexport const loginTC = (data: LoginParamsType) => (dispatch: Dispatch<ActionsType>) => {\r\n    dispatch(setAppStatusAC('loading'))\r\n    // authAPI.login(data).\r\n    //     then(res=>{\r\n    //     if (res.data.resultCode === 0) {\r\n    //         dispatch(setIsLoggedInAC(true))\r\n    //         dispatch(setAppStatusAC('succeeded'))\r\n    //     } else {\r\n    //         handleServerAppError(res.data, dispatch);\r\n    //     }\r\n    // })\r\n    //     .catch((error) => {\r\n    //         handleServerNetworkError(error, dispatch)\r\n    //     })\r\n\r\n}\r\n\r\n// export const logoutTC = () => (dispatch: Dispatch<ActionsType>) => {\r\n//     dispatch(setAppStatusAC('loading'))\r\n//     authAPI.logout()\r\n//         .then(res => {\r\n//             if (res.data.resultCode === 0) {\r\n//                 dispatch(setIsLoggedInAC(false))\r\n//                 dispatch(setAppStatusAC('succeeded'))\r\n//             } else {\r\n//                 handleServerAppError(res.data, dispatch)\r\n//             }\r\n//         })\r\n//         .catch((error) => {\r\n//             handleServerNetworkError(error, dispatch)\r\n//         })\r\n// }\r\n\r\n// types\r\ntype ActionsType = ReturnType<typeof setIsLoggedInAC> | SetAppStatusActionType | SetAppErrorActionType\r\n","import {applyMiddleware, combineReducers, createStore} from 'redux'\nimport {userReducer} from \"./userReduser\";\nimport thunkMiddleware from \"redux-thunk\";\nimport {changeStateReducer} from \"./appReduserOld\";\nimport {tasksReducer} from \"./tasksReduser\";\nimport {todolistsReducer} from \"./todolists-reducer\";\nimport {appReducer} from \"./app-reducer\";\nimport {authReducer} from \"./authReducer\";\n\nconst rootReducer = combineReducers({\n    users: userReducer,\n    nav: changeStateReducer,\n    //login: loginReducer\n    tasks: tasksReducer,\n    todoList: todolistsReducer,\n    app: appReducer,\n    auth: authReducer,\n});\n\nconst store = createStore(rootReducer, applyMiddleware(thunkMiddleware));\nexport type AppRootStateType = ReturnType<typeof rootReducer>;\n\nexport default store\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport {Provider} from \"react-redux\";\nimport store from \"./bll/store\";\nimport {HashRouter} from \"react-router-dom\";\nimport firebase from \"firebase\"\nimport 'firebase/auth'\n\n\nexport const app=firebase.initializeApp({\n    apiKey: \"AIzaSyDGqV4nDHMokspRbNj9OufL531PwdNB2sc\",\n    authDomain: \"fir-silky.firebaseapp.com\",\n    databaseURL: \"https://fir-silky-default-rtdb.europe-west1.firebasedatabase.app\",\n    projectId: \"fir-silky\",\n    storageBucket: \"fir-silky.appspot.com\",\n    messagingSenderId: \"459950163847\",\n    appId: \"1:459950163847:web:bcbb780902e981920cb522\"\n})\nReactDOM.render(\n    <React.StrictMode>\n        <Provider store={store}>\n            <HashRouter>\n            <App/>\n            </HashRouter>\n        </Provider>\n    </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n","import React from 'react';\nimport ListItem from '@material-ui/core/ListItem';\nimport ListItemIcon from '@material-ui/core/ListItemIcon';\nimport ListItemText from '@material-ui/core/ListItemText';\nimport ListSubheader from '@material-ui/core/ListSubheader';\nimport DashboardIcon from '@material-ui/icons/Dashboard';\nimport ShoppingCartIcon from '@material-ui/icons/ShoppingCart';\nimport PeopleIcon from '@material-ui/icons/People';\nimport BarChartIcon from '@material-ui/icons/BarChart';\nimport LayersIcon from '@material-ui/icons/Layers';\nimport AssignmentIcon from '@material-ui/icons/Assignment';\nimport {NavLink} from \"react-router-dom\";\n\nexport const mainListItems = (\n    <div>\n        <ListItem button>\n            <NavLink to='/starting' style={{display: 'flex'}}>\n                <ListItemIcon>\n                    <DashboardIcon/>\n                </ListItemIcon>\n                <ListItemText primary=\"Dashboard\"/>\n            </NavLink>\n        </ListItem>\n        <ListItem button>\n            <NavLink to='/groupsUsers' style={{display: 'flex'}}>\n                <ListItemIcon>\n                    <PeopleIcon/>\n                </ListItemIcon>\n                <ListItemText primary=\"GroupsUsers\"/>\n            </NavLink>\n        </ListItem>\n        <ListItem button>\n            <ListItemIcon>\n                <ShoppingCartIcon/>\n            </ListItemIcon>\n            <ListItemText primary=\"Orders\"/>\n        </ListItem>\n        <ListItem button>\n            <ListItemIcon>\n                <BarChartIcon/>\n            </ListItemIcon>\n            <ListItemText primary=\"Reports\"/>\n        </ListItem>\n        <ListItem button>\n            <ListItemIcon>\n                <LayersIcon/>\n            </ListItemIcon>\n            <ListItemText primary=\"Integrations\"/>\n        </ListItem>\n    </div>\n);\n\nexport const secondaryListItems = (\n    <div>\n        <ListSubheader inset>Saved reports</ListSubheader>\n        <ListItem button>\n            <ListItemIcon>\n                <AssignmentIcon/>\n            </ListItemIcon>\n            <ListItemText primary=\"Current month\"/>\n        </ListItem>\n        <ListItem button>\n            <ListItemIcon>\n                <AssignmentIcon/>\n            </ListItemIcon>\n            <ListItemText primary=\"Last quarter\"/>\n        </ListItem>\n        <ListItem button>\n            <ListItemIcon>\n                <AssignmentIcon/>\n            </ListItemIcon>\n            <ListItemText primary=\"Year-end sale\"/>\n        </ListItem>\n    </div>\n);\n","import React from 'react';\nimport clsx from 'clsx';\nimport {makeStyles} from '@material-ui/core/styles';\nimport CssBaseline from '@material-ui/core/CssBaseline';\nimport Drawer from '@material-ui/core/Drawer';\nimport Box from '@material-ui/core/Box';\nimport AppBar from '@material-ui/core/AppBar';\nimport Toolbar from '@material-ui/core/Toolbar';\nimport List from '@material-ui/core/List';\nimport Typography from '@material-ui/core/Typography';\nimport Divider from '@material-ui/core/Divider';\nimport IconButton from '@material-ui/core/IconButton';\nimport Badge from '@material-ui/core/Badge';\nimport Container from '@material-ui/core/Container';\nimport Link from '@material-ui/core/Link';\nimport MenuIcon from '@material-ui/icons/Menu';\nimport ChevronLeftIcon from '@material-ui/icons/ChevronLeft';\nimport NotificationsIcon from '@material-ui/icons/Notifications';\nimport {mainListItems, secondaryListItems} from './listItems';\nimport {Switch, Route, Redirect, NavLink} from \"react-router-dom\"\nimport Button from \"@material-ui/core/Button\";\nimport {useDispatch} from \"react-redux\";\nimport {signOutTC} from \"../../../bll/userReduser\";\nimport HomeIcon from '@material-ui/icons/Home';\n\n// import Route from \"react-router-dom\";\n\nfunction Copyright() {\n    return (\n        <Typography variant=\"body2\" color=\"textSecondary\" align=\"center\">\n            {'Copyright © '}\n            <Link color=\"inherit\" href=\"https://material-ui.com/\">\n                Your Website\n            </Link>{' '}\n            {new Date().getFullYear()}\n            {'.'}\n        </Typography>\n    );\n}\n\nconst drawerWidth = 240;\nconst useStyles = makeStyles((theme) => ({\n    root: {\n        display: 'flex',\n    },\n    toolbar: {\n        paddingRight: 24, // keep right padding when drawer closed\n    },\n    toolbarIcon: {\n        display: 'flex',\n        alignItems: 'center',\n        justifyContent: 'flex-end',\n        padding: '0 8px',\n        ...theme.mixins.toolbar,\n    },\n    appBar: {\n        zIndex: theme.zIndex.drawer + 1,\n        transition: theme.transitions.create(['width', 'margin'], {\n            easing: theme.transitions.easing.sharp,\n            duration: theme.transitions.duration.leavingScreen,\n        }),\n    },\n    appBarShift: {\n        marginLeft: drawerWidth,\n        width: `calc(100% - ${drawerWidth}px)`,\n        transition: theme.transitions.create(['width', 'margin'], {\n            easing: theme.transitions.easing.sharp,\n            duration: theme.transitions.duration.enteringScreen,\n        }),\n    },\n    menuButton: {\n        marginRight: 36,\n    },\n    menuButtonHidden: {\n        display: 'none',\n    },\n    title: {\n        flexGrow: 1,\n    },\n    drawerPaper: {\n        position: 'relative',\n        whiteSpace: 'nowrap',\n        width: drawerWidth,\n        transition: theme.transitions.create('width', {\n            easing: theme.transitions.easing.sharp,\n            duration: theme.transitions.duration.enteringScreen,\n        }),\n    },\n    drawerPaperClose: {\n        overflowX: 'hidden',\n        transition: theme.transitions.create('width', {\n            easing: theme.transitions.easing.sharp,\n            duration: theme.transitions.duration.leavingScreen,\n        }),\n        width: theme.spacing(7),\n        [theme.breakpoints.up('sm')]: {\n            width: theme.spacing(9),\n        },\n    },\n    appBarSpacer: theme.mixins.toolbar,\n    content: {\n        flexGrow: 1,\n        height: '100vh',\n        overflow: 'auto',\n    },\n    container: {\n        paddingTop: theme.spacing(4),\n        paddingBottom: theme.spacing(4),\n    },\n    paper: {\n        padding: theme.spacing(2),\n        display: 'flex',\n        overflow: 'auto',\n        flexDirection: 'column',\n    },\n    fixedHeight: {\n        height: 240,\n    },\n}));\n\n// Pages\nconst Starting = React.lazy(() => import('../../views/starting'));\nconst GroupsUsers = React.lazy(() => import('../../views/groupUsers/groupsUsers'));\n// const Page404 = React.lazy(() => import('./views/pages/page404/Page404'));\n// const Page500 = React.lazy(() => import('./views/pages/page500/Page500'));\n\nexport default function Dashboard() {\n    const dispatch = useDispatch()\n    const classes = useStyles();\n    const [open, setOpen] = React.useState(true);\n    const handleDrawerOpen = () => {\n        setOpen(true);\n    };\n    const handleDrawerClose = () => {\n        setOpen(false);\n    };\n    const submitSignOut = () => {\n        dispatch(signOutTC())\n    }\n\n    return (\n        <div className={classes.root}>\n            <CssBaseline/>\n            <AppBar position=\"absolute\" className={clsx(classes.appBar, open && classes.appBarShift)}>\n                <Toolbar className={classes.toolbar}>\n                    <IconButton edge=\"start\" color=\"inherit\" aria-label=\"open drawer\" onClick={handleDrawerOpen}\n                                className={clsx(classes.menuButton, open && classes.menuButtonHidden)}>\n                        <MenuIcon/>\n                    </IconButton>\n                    <Typography component=\"h1\" variant=\"h6\" color=\"inherit\" noWrap className={classes.title}>\n                        Dashboard\n                    </Typography>\n                    <IconButton color=\"inherit\">\n                        <Badge badgeContent={4} color=\"secondary\">\n                            <NotificationsIcon/>\n                        </Badge>\n                    </IconButton>\n                    <Button onClick={submitSignOut}>signin</Button>\n                    <NavLink to={'https://lisapatrikeevna.github.io/dragan-2/'} title={'to site'}> <HomeIcon/></NavLink>\n                </Toolbar>\n            </AppBar>\n            <Drawer variant=\"permanent\" open={open}\n                    classes={{paper: clsx(classes.drawerPaper, !open && classes.drawerPaperClose),}}>\n                <div className={classes.toolbarIcon}>\n                    <IconButton onClick={handleDrawerClose}>\n                        <ChevronLeftIcon/>\n                    </IconButton>\n                </div>\n                <Divider/>\n                <List>{mainListItems}</List>\n                <Divider/>\n                <List>{secondaryListItems}</List>\n            </Drawer>\n            <main className={classes.content}>\n                <div className={classes.appBarSpacer}/>\n                <Container maxWidth=\"lg\" className={classes.container}>\n                    <React.Suspense fallback={'...loading'}>\n                        <Switch>\n                            {/*<Route path=\"/\"  render={props => <Starting {...props}/>} />*/}\n                            <Route path=\"/starting\" render={props => <Starting {...props}/>}/>\n                            <Route path=\"/groupsUsers\" render={props => <GroupsUsers {...props}/>}/>\n                            {/*    /!*<Route exact path=\"/404\" name=\"Page 404\" render={props => <Page404 {...props}/>} />*!/*/}\n                            {/*    /!*<Route exact path=\"/500\" name=\"Page 500\" render={props => <Page500 {...props}/>} />*!/*/}\n                        </Switch>\n                    </React.Suspense>\n                    <Box pt={4}>\n                        <Copyright/>\n                    </Box>\n                </Container>\n            </main>\n        </div>\n    );\n}\n"],"sourceRoot":""}