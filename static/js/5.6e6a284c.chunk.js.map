{"version":3,"sources":["ui/views/user/user.module.css","ui/views/groupUsers/groupUsers.module.css","ui/common/EditableSpan.tsx","ui/views/user/user.tsx","ui/views/groupUsers/groupsUsers.tsx"],"names":["module","exports","EditableSpan","React","memo","props","console","log","useState","editMode","setEditMode","value","item","setItem","TextField","onChange","e","currentTarget","autoFocus","onBlur","onDoubleClick","User","dispatch","useDispatch","admin","useSelector","state","users","adminUid","curentUser","userid","name","setName","email","setEmail","className","cl","userBox","uid","date","Button","variant","onClick","payload","nickName","updateUserTC","removeUser","group","listTasks","GroupsUsers","useEffect","setUsersTC","useCallback","action","removeUserTC","user","map","u","tokensValidAfterTime","wrap"],"mappings":"iGACAA,EAAOC,QAAU,CAAC,QAAU,wB,oBCA5BD,EAAOC,QAAU,CAAC,KAAO,2B,+HCOZC,EAAeC,IAAMC,MAAK,SAAUC,GAC7CC,QAAQC,IAAI,uBAD+D,MAE7CC,oBAAS,GAFoC,mBAEtEC,EAFsE,KAE5DC,EAF4D,OAGrDF,mBAASH,EAAMM,OAHsC,mBAGtEC,EAHsE,KAGhEC,EAHgE,KAiB3E,OAAOJ,EACD,cAACK,EAAA,EAAD,CAAWH,MAAOC,EAAMG,SALX,SAACC,GAChBH,EAAQG,EAAEC,cAAcN,QAIwBO,WAAS,EAACC,OATrC,WACrBT,GAAY,GACZL,EAAMU,SAASH,MAQb,sBAAMQ,cAda,WACrBV,GAAY,GACZG,EAAQR,EAAMM,QAYZ,SAAwCN,EAAMM,WCuDzCU,EAjEF,SAAChB,GACV,IAAMiB,EAAWC,cACXC,EAAQC,aAAsC,SAAAC,GAAK,OAAIA,EAAMC,MAAMC,YACnEC,EAAaJ,aAAsC,SAAAC,GAAK,OAAIA,EAAMC,MAAMG,UAC9ExB,QAAQC,IAAIiB,EAAM,IAAIK,GAJS,MAKCrB,mBAAiB,IALlB,gCAMTA,mBAAiBH,EAAM0B,KAAO1B,EAAM0B,KAAO,eANlC,mBAM1BA,EAN0B,KAMpBC,EANoB,OAOPxB,mBAAiBH,EAAM4B,OAPhB,mBAO1BA,EAP0B,KAOnBC,EAPmB,KAsC/B,OACI,sBAAqBC,UAAWC,IAAGC,QAAnC,UACI,qCAAQhC,EAAMiC,OACd,uCAAUjC,EAAMkC,QACff,IAAUK,GAAc,gCACrB,sCAASE,GAAc,aACvB,uCAAU1B,EAAM4B,YAGnBT,IAAUK,GACX,gCACI,uCAAS,cAAC3B,EAAD,CAAca,SAzCf,SAACkB,GACjBC,EAASD,IAwC6CtB,MAAOsB,OACrD,sCAAQ,cAAC/B,EAAD,CAAca,SAvCf,SAACgB,GAChBC,EAAQD,IAsC4CpB,MAAOoB,OACnD,uBAGA,uBACA,cAACS,EAAA,EAAD,CAAQC,QAAQ,YAAYC,QAnCzB,WACX,IACIC,EAAU,CAACV,QAAOW,SADPb,GAGfT,EAASuB,YAAaxC,EAAMiC,IAAKK,KA+BzB,oBACA,cAACH,EAAA,EAAD,CAAQC,QAAQ,YAAYC,QA1CrB,WACfrC,EAAMyC,WAAWzC,EAAMiC,MAyCf,uBAGJ,uCAAUjC,EAAM0C,MAAQ1C,EAAM0C,MAAQ,cACtC,2CAAc1C,EAAM2C,UAAY3C,EAAM2C,UAAY,gBArB5C3C,EAAMiC,M,kBCpBTW,UA5BK,WAChB,IAAM3B,EAAWC,cACjB2B,qBAAU,WAEN5B,EAAS6B,iBAMV,CAAC7B,IACJ,IAAMwB,EAAaM,uBAAY,SAAUd,GACrC,IAAMe,EAASC,YAAahB,GAC5BhB,EAAS+B,KACV,IAEGE,EADW9B,aAA+C,SAAAC,GAAK,OAAIA,EAAMC,MAAMA,SAC/D6B,KAAI,SAAAC,GAAC,OAAI,cAAC,EAAD,CAAkBV,MAAOU,EAAEV,MAAOhB,KAAM0B,EAAE1B,KAAMQ,KAAMkB,EAAEC,qBAClDzB,MAAOwB,EAAExB,MAAOe,UAAWS,EAAET,UAAWV,IAAKmB,EAAEnB,IAAKQ,WAAYA,GAD3DW,EAAEnB,QAG5C,OACI,gCACI,6CACA,qBAAKH,UAAWC,IAAGuB,KAAnB,SAA0BJ","file":"static/js/5.6e6a284c.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"userBox\":\"user_userBox__8ygG-\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"wrap\":\"groupUsers_wrap__14uOM\"};","import React, {ChangeEvent, useState} from 'react';\r\nimport {TextField} from '@material-ui/core';\r\n\r\ntype EditableSpanPropsType = {\r\n    value: string\r\n    onChange: (newValue: string) => void\r\n}\r\n\r\nexport const EditableSpan = React.memo(function (props: EditableSpanPropsType) {\r\n    console.log(\"EditableSpan called\");\r\n    let [editMode, setEditMode] = useState(false);\r\n    let [item, setItem] = useState(props.value);\r\n\r\n    const activateEditMode = () => {\r\n        setEditMode(true);\r\n        setItem(props.value);\r\n    }\r\n    const activateViewMode = () => {\r\n        setEditMode(false);\r\n        props.onChange(item);\r\n    }\r\n    const changeItem = (e: ChangeEvent<HTMLInputElement>) => {\r\n        setItem(e.currentTarget.value)\r\n    }\r\n\r\n    return editMode\r\n        ? <TextField value={item} onChange={changeItem} autoFocus onBlur={activateViewMode}/>\r\n        : <span onDoubleClick={activateEditMode}>{props.value}</span>\r\n});\r\n","import React, {ChangeEvent, useCallback, useEffect, useState} from 'react';\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {AppRootStateType} from \"../../../bll/store\";\r\nimport {setUserOnGroupAC, updateUserTC, userType} from \"../../../bll/userReduser\";\r\nimport cl from './user.module.css'\r\nimport {Button} from \"@material-ui/core\";\r\nimport {EditableSpan} from \"../../common/EditableSpan\";\r\n\r\ntype propsType = {\r\n    uid: string\r\n    name?: string | undefined\r\n    date: string\r\n    email: string\r\n    group?: string | undefined\r\n    listTasks?: {} | undefined\r\n    removeUser: (uid: string) => void\r\n}\r\nconst User = (props: propsType) => {\r\n    const dispatch = useDispatch()\r\n    const admin = useSelector<AppRootStateType, string>(state => state.users.adminUid)\r\n    const curentUser = useSelector<AppRootStateType, string>(state => state.users.userid)\r\n    console.log(admin,' ',curentUser);\r\n    let [groupName, setGroupName] = useState<string>('')\r\n    let [name, setName] = useState<string>(props.name ? props.name : 'not a name')\r\n    let [email, setEmail] = useState<string>(props.email)\r\n    const changeEmail = (email: string) => {\r\n        setEmail(email)\r\n    }\r\n    const changeName = (name: string) => {\r\n        setName(name)\r\n    }\r\n    const removeUser = () => {\r\n        props.removeUser(props.uid)\r\n    }\r\n    // const changePropUser = useCallback((title: string) => {\r\n    //     props.somefunction(props.id, title)\r\n    // }, [props.id, props.somefunction])\r\n    const update = () => {\r\n        let nickName = name\r\n        let payload = {email, nickName}\r\n        debugger\r\n        dispatch(updateUserTC(props.uid, payload))\r\n    }\r\n    const addToo = () => {\r\n        debugger\r\n        let id = props.uid\r\n        let payload = {id, groupName}\r\n        dispatch(setUserOnGroupAC(payload))\r\n        setGroupName('')\r\n    }\r\n    const onChaneNameGroup = (e: ChangeEvent<HTMLInputElement>) => {\r\n        setGroupName(e.currentTarget.value)\r\n    }\r\n\r\n\r\n    return (\r\n        <div key={props.uid} className={cl.userBox}>\r\n            <p>uid:{props.uid}</p>\r\n            <p>date :{props.date}</p>\r\n            {admin !== curentUser && <div>\r\n                <p>name:{name ? name : 'no name'}</p>\r\n                <p>email:{props.email}</p>\r\n            </div>}\r\n\r\n            {admin === curentUser &&\r\n            <div>\r\n                <p>email:<EditableSpan onChange={changeEmail} value={email}/></p>\r\n                <p>name:<EditableSpan onChange={changeName} value={name}/></p>\r\n                <hr/>\r\n                {/*<input type=\"text\" value={groupName} placeholder={'add groupName'} onChange={onChaneNameGroup}/>*/}\r\n                {/*<button onClick={addToo}>add to group</button>*/}\r\n                <hr/>\r\n                <Button variant=\"contained\" onClick={update}>update</Button>\r\n                <Button variant=\"contained\" onClick={removeUser}>delete</Button>\r\n            </div>\r\n            }\r\n            <p>group:{props.group ? props.group : 'no group'}</p>\r\n            <p>listTasks:{props.listTasks ? props.listTasks : 'no tasks'}</p>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default User;\r\n\r\n","import React, {ChangeEvent, useCallback, useEffect, useState} from 'react';\nimport {useDispatch, useSelector} from \"react-redux\";\nimport { removeUserTC, setUsersTC, userType} from \"../../../bll/userReduser\";\nimport {AppRootStateType} from \"../../../bll/store\";\nimport User from \"../user/user\";\nimport Group from \"../groups/group\";\nimport cl from './groupUsers.module.css';\n\nconst GroupsUsers = () => {\n    const dispatch = useDispatch()\n    useEffect(() => {\n        // debugger\n        dispatch(setUsersTC())\n        // const db = admin.database();\n        // const ref = db.ref(\"restricted_access/secret_document\");\n        // ref.once(\"value\", function(snapshot) {\n        //     console.log(snapshot.val());\n        // });\n    }, [dispatch])\n    const removeUser = useCallback(function (uid: string) {\n        const action = removeUserTC(uid);\n        dispatch(action);\n    }, []);\n    const allUsers = useSelector<AppRootStateType, Array<userType>>(state => state.users.users)\n    const user = allUsers.map(u => <User key={u.uid} group={u.group} name={u.name} date={u.tokensValidAfterTime}\n                                         email={u.email} listTasks={u.listTasks} uid={u.uid} removeUser={removeUser}/>)\n\n    return (\n        <div>\n            <h5>all users: </h5>\n            <div className={cl.wrap}>{user}</div>\n\n        </div>\n    );\n};\n\nexport default GroupsUsers;\n"],"sourceRoot":""}