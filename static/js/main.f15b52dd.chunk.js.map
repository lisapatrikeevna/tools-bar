{"version":3,"sources":["App.jsx","reportWebVitals.ts","index.tsx","bll/appReduserOld.js","bll/authReducer.ts","bll/store.ts","bll/Api.ts","ui/components/dashboard/listItems.jsx","ui/components/common/AddItemForm.tsx","ui/views/todo/task.tsx","ui/views/todo/todo.tsx","ui/views/todo/todoList.tsx","ui/views/groups/groupPage.tsx","ui/components/common/SmalAlert.tsx","ui/components/dashboard/Dashboard.jsx","ui/views/groups/group.tsx","ui/views/groups/groups.tsx","ui/views/users/user.tsx","ui/views/users/users.tsx","ui/views/pages/page404/Page404.jsx","ui/views/groupUsers/groupUsers.module.css","bll/app-reducer.ts","ui/views/users/user.module.css","bll/groupReduser.ts","utils/error-utils.ts","bll/userReduser.ts","bll/tasksReduser.ts","ui/route.ts","bll/todolists-reducer.ts","ui/components/common/EditableSpan.tsx"],"names":["Login","React","lazy","Register","Page404","Page500","App","dispatch","useDispatch","useEffect","authTC","useSelector","state","users","status","className","Suspense","fallback","exact","path","render","name","props","Dashboard","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","app","firebase","initializeApp","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","ReactDOM","store","document","getElementById","initialState","token","isLoggedIn","rootReducer","combineReducers","todoList","todolistsReducer","groups","groupReducer","userReducer","nav","type","rest","tasks","tasksReducer","appReducer","auth","action","value","createStore","applyMiddleware","thunkMiddleware","window","TaskStatuses","TaskPriorities","firestore","axios","create","baseURL","mongodb","GroupsApi","getGroups","get","r","data","addGroup","id","post","groupRemove","delete","getGroupById","addUserOnGroup","user","addTodoOnGroup","todoId","removeUserFromGroup","uid","put","removeTodoFromGroup","Users","getAllUsers","getAllUsersFirestore","u","updateUser","payload","userRemove","createUser","email","password","username","displayName","addUserData","deleteGroupFromUserData","todolistsAPI","getTodolists","createTodolist","title","addedDate","order","deleteTodolist","updateTodolist","getTasks","todolistId","deleteTask","addTask","description","priority","startDate","deadline","completed","_id","updateTask","taskId","model","Tasks","getAllTasks","addTodo","taskRemove","mainListItems","ListItem","button","to","style","display","ListItemIcon","ListItemText","primary","PATH","GROUPS","CollectionsBookmark","USERS","secondaryListItems","ListSubheader","inset","AddItemForm","memo","addItem","disabled","useState","setTitle","error","setError","addItemHandler","trim","TextField","variant","onChange","e","currentTarget","onKeyPress","charCode","label","helperText","IconButton","color","onClick","AddBox","Task","task","changeTaskStatus","changeTaskTitle","removeTask","onClickHandler","useCallback","onChangeHandler","newIsDoneValue","checked","Completed","New","onTitleChangeHandler","newValue","Checkbox","EditableSpan","Delete","Todolist","fetchTasksTC","todolist","changeTodolistTitle","onAllClickHandler","changeFilter","onActiveClickHandler","onCompletedClickHandler","tasksForTodolist","filter","t","removeTodolist","entityStatus","map","paddingTop","Button","TodolistsList","fetchTodolistsTC","groupTodo","todoListForGroup","removeTaskTC","addTaskTC","changeStatus","updateTaskTC","newTitle","changeTodolistFilterAC","changeTodolistTitleTC","addTodolist","console","log","Grid","container","padding","spacing","tl","allTodolistTasks","item","Paper","GroupPage","useParams","getGroupByIdTC","group","activeGroup","removeUserFromGroupTC","removeGroupFromUserDataTC","addTodolistTC","removeTodolistTC","cl","box","todolistFromGroup","todoLists","Alert","elevation","useStyles","makeStyles","theme","root","width","marginTop","SmallAlert","message","classes","open","handleClose","event","reasons","setAppErrorAC","Snackbar","autoHideDuration","onClose","severity","Copyright","Typography","align","Link","href","Date","getFullYear","toolbar","paddingRight","toolbarIcon","alignItems","justifyContent","mixins","appBar","zIndex","drawer","transition","transitions","easing","sharp","duration","leavingScreen","appBarShift","marginLeft","enteringScreen","menuButton","marginRight","menuButtonHidden","flexGrow","drawerPaper","position","whiteSpace","drawerPaperClose","overflowX","breakpoints","up","appBarSpacer","content","overflow","paddingBottom","paper","flexDirection","fixedHeight","height","Starting","setOpen","CssBaseline","AppBar","clsx","Toolbar","edge","aria-label","component","noWrap","Badge","badgeContent","signOutTC","Drawer","Divider","List","LinearProgress","Container","maxWidth","PAGEGROUP","ERROR404","Box","pt","Group","deleteGroup","removeGroupsTC","TableRow","TableCell","scope","getUrl","head","backgroundColor","palette","common","black","white","table","minWidth","Groups","getGroupsTC","allGroups","nGroup","setNumGroup","g","addGroupsTC","TableContainer","Table","size","TableHead","TableBody","createStyles","formControl","margin","selectEmpty","User","admin","adminUid","curentUser","userid","groupID","setGroupID","setName","setEmail","phoneNumber","phone","setPhone","update","updateUserTC","spanWrap","large","wrap","medium","groupId","removeUser","spaceBetween","FormControl","Select","labelId","target","listGroup","FormHelperText","addUserToGroup","small","groupName","listTasks","setUsersTC","removeUserTC","userName","setUserOnGroupTC","allUsers","date","tokensValidAfterTime","md","placeholder","module","exports","isInitialized","setAppStatusAC","initState","userRecord","groupTodolist","todolists","res","getState","someTodLists","tlG","find","todo","uuid","removeTodolistFromGroupTC","handleServerAppError","messages","length","handleServerNetworkError","currentUser","authAC","setUserAdditionalInformationAC","onAuthStateChanged","catch","err","createUserTC","alert","a","infoUser","loginUserTC","signInWithEmailAndPassword","er","signOut","todoListId","updatedTask","copyState","forEach","removeTaskAC","setTasksAC","v1","toDateString","addTaskAC","updatedTaskModel","updateTaskAC","warn","LOGIN","REGISTRATION","ERROR500","PASS_RECOVERY","PASS_NEW","todolistDeleteTaskTC","todolistDeleteTC","changeTodolistEntityStatusAC","promise","Promise","all","createTodolistTC","addTodoOnGroupTC","changeTodolistTitleAC","editMode","setEditMode","setItem","autoFocus","onBlur","onDoubleClick"],"mappings":"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","file":"static/js/main.f15b52dd.chunk.js","sourcesContent":["import React, {useEffect} from 'react'\nimport './App.css'\nimport Dashboard from \"./ui/components/dashboard/Dashboard\";\nimport {Redirect, Route, Switch} from \"react-router-dom\"\nimport {useDispatch, useSelector} from \"react-redux\";\nimport {authTC} from \"./bll/userReduser\";\n// import Login from \"./ui/views/pages/login/Login\";\n\n\n// Pages\nconst Login = React.lazy(() => import('./ui/views/pages/login/Login'));\nconst Register = React.lazy(() => import('./ui/views/pages/register/Register'));\nconst Page404 = React.lazy(() => import('./ui/views/pages/page404/Page404'));\n const Page500 = React.lazy(() => import('./ui/views/pages/page500/Page500'));\nfunction App() {\n\n    const dispatch = useDispatch()\n    useEffect(() => {\n        dispatch(authTC())\n    }, [dispatch])\n    const status = useSelector(state => state.users.status)\n   // if (!status) {return <Redirect to={'/login'}/>}\n    // else {return <Redirect to={'/groupsUsers'}/>}\n\n    return (\n        <div className=\"App\">\n            <React.Suspense fallback={'...loading'}>\n                <Switch>\n                    <Route exact path=\"/login\" render={() => <Login/>}/>\n                    <Route exact path=\"/register\" render={() => <Register/>}/>\n                    {/*<Route exact path=\"/dashboard\" render={() => <Dashboard/>}/>*/}\n                    <Route exact path=\"/404\" name=\"Page 404\" render={props => <Page404 {...props}/>} />\n                    <Route exact path=\"/500\" name=\"Page 500\" render={props => <Page500 {...props}/>} />\n                    {/*<Route path=\"/\" name=\"Home\" render={props => <TheLayout {...props}/>} />*/}\n                    <Dashboard/>\n                </Switch>\n            </React.Suspense>\n        </div>\n    )\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport {Provider} from \"react-redux\";\nimport store from \"./bll/store\";\nimport {HashRouter} from \"react-router-dom\";\nimport firebase from \"firebase\"\nimport 'firebase/auth'\n\n\nexport const app=firebase.initializeApp({\n    apiKey: \"AIzaSyDGqV4nDHMokspRbNj9OufL531PwdNB2sc\",\n    authDomain: \"fir-silky.firebaseapp.com\",\n    databaseURL: \"https://fir-silky-default-rtdb.europe-west1.firebasedatabase.app\",\n    projectId: \"fir-silky\",\n    storageBucket: \"fir-silky.appspot.com\",\n    messagingSenderId: \"459950163847\",\n    appId: \"1:459950163847:web:bcbb780902e981920cb522\"\n})\nReactDOM.render(\n        <Provider store={store}>\n            <HashRouter>\n            <App/>\n            </HashRouter>\n        </Provider>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n","\n\nconst initialState = {\n  token: ''\n}\n\nexport const changeStateReducer = (state = initialState, { type, ...rest }) => {\n  switch (type) {\n    case 'set':\n      return {...state, ...rest }\n    default:\n      return state\n  }\n}\n","import { Dispatch } from 'redux'\r\nimport {handleServerAppError, handleServerNetworkError} from \"../utils/error-utils\"\r\nimport {LoginParamsType} from \"./Api\";\r\nimport {SetAppErrorActionType, setAppStatusAC, SetAppStatusActionType} from \"./app-reducer\";\r\n\r\nconst initialState = {\r\n    isLoggedIn: false\r\n}\r\ntype InitialStateType = typeof initialState\r\n\r\nexport const authReducer = (state: InitialStateType = initialState, action: ActionsType): InitialStateType => {\r\n    switch (action.type) {\r\n        case 'login/SET-IS-LOGGED-IN':\r\n            return {...state, isLoggedIn: action.value}\r\n        default:\r\n            return state\r\n    }\r\n}\r\n// actions\r\nexport const setIsLoggedInAC = (value: boolean) =>\r\n    ({type: 'login/SET-IS-LOGGED-IN', value} as const)\r\n\r\n// thunks\r\nexport const loginTC = (data: LoginParamsType) => (dispatch: Dispatch<ActionsType>) => {\r\n    dispatch(setAppStatusAC('loading'))\r\n    // authAPI.login(data).\r\n    //     then(res=>{\r\n    //     if (res.data.resultCode === 0) {\r\n    //         dispatch(setIsLoggedInAC(true))\r\n    //         dispatch(setAppStatusAC('succeeded'))\r\n    //     } else {\r\n    //         handleServerAppError(res.data, dispatch);\r\n    //     }\r\n    // })\r\n    //     .catch((error) => {\r\n    //         handleServerNetworkError(error, dispatch)\r\n    //     })\r\n\r\n}\r\n\r\n// export const logoutTC = () => (dispatch: Dispatch<ActionsType>) => {\r\n//     dispatch(setAppStatusAC('loading'))\r\n//     authAPI.logout()\r\n//         .then(res => {\r\n//             if (res.data.resultCode === 0) {\r\n//                 dispatch(setIsLoggedInAC(false))\r\n//                 dispatch(setAppStatusAC('succeeded'))\r\n//             } else {\r\n//                 handleServerAppError(res.data, dispatch)\r\n//             }\r\n//         })\r\n//         .catch((error) => {\r\n//             handleServerNetworkError(error, dispatch)\r\n//         })\r\n// }\r\n\r\n// types\r\ntype ActionsType = ReturnType<typeof setIsLoggedInAC> | SetAppStatusActionType | SetAppErrorActionType\r\n","import {applyMiddleware, combineReducers, createStore} from 'redux'\nimport {userReducer} from \"./userReduser\";\nimport thunkMiddleware from \"redux-thunk\";\nimport {changeStateReducer} from \"./appReduserOld\";\nimport {tasksReducer} from \"./tasksReduser\";\nimport {todolistsReducer} from \"./todolists-reducer\";\nimport {appReducer} from \"./app-reducer\";\nimport {authReducer} from \"./authReducer\";\nimport { groupReducer } from './groupReduser';\n\nconst rootReducer = combineReducers({\n    todoList: todolistsReducer,\n    groups: groupReducer,\n    users: userReducer,\n    nav: changeStateReducer,\n    tasks: tasksReducer,\n    app: appReducer,\n    auth: authReducer,\n});\n\nconst store = createStore(rootReducer, applyMiddleware(thunkMiddleware));\nexport type AppRootStateType = ReturnType<typeof rootReducer>;\n//@ts-ignore\nwindow.store=store\nexport default store\n","import axios from 'axios'\nimport {groupUsersType} from \"./groupReduser\";\n\nconst firestore = axios.create({\n    baseURL: 'https://dragan.lisa15.ru/',\n    // baseURL: 'http://localhost:7563/',\n})\nconst mongodb = axios.create({\n    baseURL: 'https://mongofunction.lisa15.ru/',\n    // baseURL: 'http://localhost:5000/',\n})\n\nexport const GroupsApi = {\n    getGroups() {\n        return firestore.get<Array<GroupType>>('api/getGroups').then(r => r.data)\n    },\n    addGroup(id: string, name: string) {\n        return firestore.post<ResponseType>('api/createGroup', {id, name})\n    },\n    groupRemove(id: string) {\n        return firestore.delete<ResponseType>(`groupRemove/${id}`)\n    },\n    getGroupById(id: string) {\n        return firestore.get(`api/getGroupById/${id}`).then(r => r.data)\n    },\n    addUserOnGroup(id: string, user: groupUsersType) {\n        return firestore.post<ResponseType>(`api/addUserOnGroup/${id}`, {user})\n    },\n    addTodoOnGroup(id: string, todoId: string) {\n        return firestore.post<ResponseType>(`api/addTodolistsOnGroup/${id}`, {todoId})\n    },\n    removeUserFromGroup(id: string,{uid, name}: groupUsersType){\n        return firestore.put<ResponseType>(`api/deleteUserFromGroup/${id}`, {uid,name})\n    },\n    removeTodoFromGroup(id: string,todoId:string){\n        return firestore.put<ResponseType>(`api/deleteTodoListFromGroup/${id}`, {todoId})\n    },\n}\nexport const Users = {\n    getAllUsers() {\n        //for taskReducer\n        return firestore.get('users/1')\n    },\n    getAllUsersFirestore() {\n        return firestore.get<Array<FireBaseResponse<UserType>>>('api/getUsers').then(u => u.data)\n    },\n    auth() {\n        return firestore.get('auth')\n    },\n    updateUser(uid: string, payload: firestorUpdateUserType) {\n        return firestore.put(`userUpdate/${uid}`, {payload})\n    },\n    userRemove(uid: string) {\n        return firestore.delete(`userRemove/${uid}`)\n    },\n    createUser(email: string, password: string, username: string) {\n        return firestore.post(`createUser`, {email, password, displayName: username})\n    },\n    addUserData(uid: string, id: string, name: string) {\n        return firestore.post(`api/addUserData`, {uid, id, name})\n    },\n    deleteGroupFromUserData(uid: string) {\n        return firestore.put(`api/deleteGroupFromUserData/${uid}`)\n    },\n}\n\nexport const todolistsAPI = {\n    getTodolists() {\n        return  firestore.get<TodoslistType[]>('api/getTodolists').then(r => r.data);\n    },\n    createTodolist(id:string,title:string,addedDate:string,order:number) {\n        return  firestore.post<ResponseType<{ item: TodoslistType }>>('api/todoLists/create', {id,title,addedDate,order});\n    },\n    deleteTodolist(id: string) {\n        return firestore.delete<ResponseType>(`api/deleteTodolist/${id}`);\n    },\n    updateTodolist(id: string, title: string) {\n        return  firestore.put<ResponseType>(`api/getTodolists/${id}`, {title: title});\n    },\n\n\n    getTasks(todolistId: string) {\n        return mongodb.get<GetTasksResponse>(`Todolists/${todolistId}/getTasks`);\n    },\n    // deleteTask(todolistId: string, taskId: string ,task: TaskType) {\n    deleteTask( todolistId: string ) {\n        debugger\n        // return firestore.put<ResponseType>(`Todolists/${todolistId}/removeTasks/${taskId}`,task);\n        return mongodb.delete<ResponseType>(`Todolists/${todolistId}/removeTasks`);\n    },\n    // createTask(todolistId: string) {\n    //     // debugger\n    //     return firestore.post<ResponseType>(`api/todoLists/create/${todolistId}/tasks`);\n    // },\n    addTask(todolistId: string, { description,title, status, priority, startDate, deadline, order, addedDate,completed,_id}:TaskType) {\n        return mongodb.post<ResponseType>(`Todolists/${todolistId}/addTask`,\n            {description,title,  status, priority, startDate, deadline, todolistId, order, addedDate,completed,_id});\n    },\n    updateTask(todolistId: string, taskId: string, model: TaskType) {\n        return mongodb.put<ResponseType>(`Todolists/${todolistId}/udateTasks/${taskId}`, model);\n    },\n\n}\nexport const Tasks = {\n    getAllTasks() {\n        return firestore.get('users')\n    },\n    getGroups() {\n        // const promise = firestore.get('users');\n        // return promise;\n        // debugger\n        return firestore.get('api/get')\n    },\n    addTodo(id: string, name: string) {\n        debugger\n        return firestore.post('api/todoLists/create', {id, name})\n    },\n    taskRemove(id:string){\n        return mongodb.delete(`taskRemove/${id}`)\n    }\n}\n\n// types\n\nexport type TaskType = {\n    description: string\n    title: string\n    status: TaskStatuses\n    priority: TaskPriorities\n    startDate: string\n    deadline: string\n    _id: string\n    todoListId: string\n    order: number\n    addedDate: string\n    completed: boolean\n}\nexport type UpdateTaskModelType = {\n    title: string\n    description: string\n    status: TaskStatuses\n    priority: TaskPriorities\n    startDate: string\n    deadline: string\n}\ntype GetTasksResponse = {\n    error: string | null\n    totalCount: number\n    tasks: TaskType[]\n}\nexport type firestorUpdateUserType = {\n    email?: string\n    phoneNumber?: string\n    disabled?:false\n    nickName?: string\n}\nexport type TodoslistType = {\n    id: string\n    data:{\n        title: string\n        addedDate: string\n        order: number\n    }\n}\nexport type GroupDataType = {\n    group: string\n    users: groupUsersType[]\n    todoLists: Array<string>\n}\nexport type GroupType = {\n    data: GroupDataType\n    id: string\n}\nexport type userFirestoreType = {\n    id?: string\n    name: string\n    uid: string\n    listTasks?: any\n}\nexport type UserType = {\n    user: userFirestoreType\n}\nexport type FerebaseErrorType = {\n    code: string\n    message: string\n}\nexport type FireBaseResponse<T> = {\n    id: string\n    data: T\n}\nexport type LoginParamsType = {\n    password: string\n    email: string\n    rememberMy?: boolean\n}\nexport type myResponseType = {\n    id: number\n    email: string\n    login: string\n}\nexport type ResponseType<D = {}> = {\n    status: number\n    messages: string\n    data?: D\n}\nexport enum TaskStatuses {\n    New = 0,\n    InProgress = 1,\n    Completed = 2,\n    Draft = 3\n}\nexport enum TaskPriorities {\n    Low = 0,\n    Middle = 1,\n    Hi = 2,\n    Urgently = 3,\n    Later = 4\n}\ntype firebasePostResponseType = {\n    data:string\n    status:number\n    statusText:string\n}\n\n","import React from 'react';\nimport ListItem from '@material-ui/core/ListItem';\nimport ListItemIcon from '@material-ui/core/ListItemIcon';\nimport ListItemText from '@material-ui/core/ListItemText';\nimport ListSubheader from '@material-ui/core/ListSubheader';\nimport DashboardIcon from '@material-ui/icons/Dashboard';\nimport ShoppingCartIcon from '@material-ui/icons/ShoppingCart';\nimport PeopleIcon from '@material-ui/icons/People';\nimport BarChartIcon from '@material-ui/icons/BarChart';\nimport LayersIcon from '@material-ui/icons/Layers';\nimport AssignmentIcon from '@material-ui/icons/Assignment';\nimport {NavLink} from \"react-router-dom\";\nimport {CollectionsBookmark} from \"@material-ui/icons\";\nimport {PATH} from \"../../route\";\n\n\n// <div className={`${s.item} ${s.active}`}>\n//     <NavLink to={PATH.LOGIN} activeClassName={s.active}>Login</NavLink>\n//     <NavLink to={PATH.LOGOUT} activeClassName={s.active}>Logout</NavLink>\n//     <NavLink to={PATH.REGISTRATION} activeClassName={s.active}>Registration</NavLink>\n//     <NavLink to={PATH.PROFILE} activeClassName={s.active}>Profile</NavLink>\n//     <NavLink to={PATH.PASS_RECOVERY} activeClassName={s.active}>Password recovery</NavLink>\n//     <NavLink to={PATH.PASS_NEW} activeClassName={s.active}>Entering new password</NavLink>\n//     <NavLink to={PATH.TEST} activeClassName={s.active}>Test</NavLink>\n//     <NavLink to={PATH.PACKS} activeClassName={s.active}>Packs</NavLink>\n//     <NavLink to={'/cards/:id'} activeClassName={s.active}>Cards</NavLink>\n//     <NavLink to={'/learn/:id'} activeClassName={s.active}>Learn</NavLink>\n// </div>\nexport const mainListItems = (\n    <div>\n        <ListItem button>\n            <NavLink to='/starting' style={{display: 'flex'}}>\n                <ListItemIcon>\n                    <DashboardIcon/>\n                </ListItemIcon>\n                <ListItemText primary=\"Dashboard\"/>\n            </NavLink>\n        </ListItem>\n        <ListItem button>\n            <NavLink to={PATH.GROUPS} style={{display: 'flex'}}>\n                <ListItemIcon>\n                    <CollectionsBookmark/>\n                </ListItemIcon>\n                <ListItemText primary=\"Groups\"/>\n            </NavLink>\n        </ListItem>\n        <ListItem button>\n            <NavLink to={PATH.USERS} style={{display: 'flex'}}>\n                <ListItemIcon>\n                    <PeopleIcon/>\n                </ListItemIcon>\n                <ListItemText primary=\"Users\"/>\n            </NavLink>\n        </ListItem>\n        <ListItem button>\n            <ListItemIcon>\n                <ShoppingCartIcon/>\n            </ListItemIcon>\n            <ListItemText primary=\"Orders\"/>\n        </ListItem>\n        <ListItem button>\n            <ListItemIcon>\n                <BarChartIcon/>\n            </ListItemIcon>\n            <ListItemText primary=\"Reports\"/>\n        </ListItem>\n        <ListItem button>\n            <ListItemIcon>\n                <LayersIcon/>\n            </ListItemIcon>\n            <ListItemText primary=\"Integrations\"/>\n        </ListItem>\n    </div>\n);\n\nexport const secondaryListItems = (\n    <div>\n        <ListSubheader inset>Saved reports</ListSubheader>\n        <ListItem button>\n            <ListItemIcon>\n                <AssignmentIcon/>\n            </ListItemIcon>\n            <ListItemText primary=\"Current month\"/>\n        </ListItem>\n        <ListItem button>\n            <ListItemIcon>\n                <AssignmentIcon/>\n            </ListItemIcon>\n            <ListItemText primary=\"Last quarter\"/>\n        </ListItem>\n        <ListItem button>\n            <ListItemIcon>\n                <AssignmentIcon/>\n            </ListItemIcon>\n            <ListItemText primary=\"Year-end sale\"/>\n        </ListItem>\n    </div>\n);\n","import React, {ChangeEvent, KeyboardEvent, useState} from 'react';\r\nimport { IconButton, TextField} from '@material-ui/core';\r\nimport {AddBox} from '@material-ui/icons';\r\n\r\ntype AddItemFormPropsType = {\r\n    addItem: (title: string) => void\r\n    disabled?: boolean\r\n}\r\n\r\nexport const AddItemForm = React.memo(function({addItem, disabled = false}: AddItemFormPropsType) {\r\n    // console.log(\"AddItemForm called\")\r\n\r\n    let [title, setTitle] = useState(\"\")\r\n    let [error, setError] = useState<string | null>(null)\r\n\r\n    const addItemHandler = () => {\r\n        if (title.trim() !== \"\") {\r\n            addItem(title);\r\n            setTitle(\"\");\r\n        } else {\r\n            setError(\"Title is required\");\r\n        }\r\n    }\r\n\r\n    const onChangeHandler = (e: ChangeEvent<HTMLInputElement>) => {\r\n        setTitle(e.currentTarget.value)\r\n    }\r\n\r\n    const onKeyPressHandler = (e: KeyboardEvent<HTMLInputElement>) => {\r\n        if (error !== null) {\r\n            setError(null);\r\n        }\r\n        if (e.charCode === 13) {\r\n            addItemHandler();\r\n        }\r\n    }\r\n\r\n    return <div>\r\n        <TextField variant=\"outlined\"\r\n                   disabled={disabled}\r\n                   error={!!error}\r\n                   value={title}\r\n                   onChange={onChangeHandler}\r\n                   onKeyPress={onKeyPressHandler}\r\n                   label=\"Title\"\r\n                   helperText={error}\r\n        />\r\n        <IconButton color=\"primary\" onClick={addItemHandler} disabled={disabled}>\r\n            <AddBox />\r\n        </IconButton>\r\n    </div>\r\n})\r\n","import React, {ChangeEvent, useCallback} from 'react'\r\nimport {Checkbox, IconButton} from '@material-ui/core'\r\nimport {Delete} from '@material-ui/icons'\r\nimport {EditableSpan} from \"../../components/common/EditableSpan\";\r\nimport {TaskStatuses, TaskType} from \"../../../bll/Api\";\r\n\r\ntype TaskPropsType = {\r\n    task: TaskType\r\n    todolistId: string\r\n    changeTaskStatus: (id: string, status: TaskStatuses, todolistId: string) => void\r\n    changeTaskTitle: (taskId: string, newTitle: string, todolistId: string) => void\r\n    // removeTask: (taskId: string, todolistId: string,task: TaskType) => void\r\n    removeTask: (taskId: string, todolistId: string) => void\r\n}\r\n// export const Task = React.memo((props: TaskPropsType) => {\r\nexport const Task = React.memo(({task,todolistId,changeTaskStatus,changeTaskTitle,removeTask}:TaskPropsType) => {\r\n    const onClickHandler = useCallback(() => {\r\n    return removeTask(task._id, todolistId)}, [task._id, todolistId]\r\n    // return removeTask(task._id, todolistId,task)}, [task._id, todolistId]\r\n    );\r\n\r\n    const onChangeHandler = useCallback((e: ChangeEvent<HTMLInputElement>) => {\r\n        let newIsDoneValue = e.currentTarget.checked\r\n        changeTaskStatus(task._id, newIsDoneValue ? TaskStatuses.Completed : TaskStatuses.New, todolistId)\r\n    }, [task, todolistId]);\r\n\r\n    const onTitleChangeHandler = useCallback((newValue: string) => {\r\n        changeTaskTitle(task._id, newValue, todolistId)\r\n    }, [task, todolistId]);\r\n\r\n    return <div key={task._id} className={task.status === TaskStatuses.Completed ? 'is-done' : ''}>\r\n        <Checkbox\r\n            checked={task.status === TaskStatuses.Completed}\r\n            color=\"primary\"\r\n            onChange={onChangeHandler}\r\n        />\r\n\r\n        <EditableSpan value={task.title} onChange={onTitleChangeHandler}/>\r\n        <IconButton onClick={onClickHandler}>\r\n            <Delete/>\r\n        </IconButton>\r\n    </div>\r\n})\r\n","import React, {useCallback, useEffect} from 'react'\r\nimport {Button, IconButton} from '@material-ui/core'\r\nimport {Delete} from '@material-ui/icons'\r\nimport {useDispatch} from 'react-redux'\r\nimport {FilterValuesType, TodolistDomainType} from \"../../../bll/todolists-reducer\";\r\nimport {TaskStatuses, TaskType} from \"../../../bll/Api\";\r\nimport {EditableSpan} from \"../../components/common/EditableSpan\";\r\nimport {AddItemForm} from \"../../components/common/AddItemForm\";\r\nimport {Task} from \"./task\";\r\nimport { fetchTasksTC } from '../../../bll/tasksReduser';\r\n\r\ntype PropsType = {\r\n    todolist: TodolistDomainType\r\n    tasks: Array<TaskType>\r\n    changeFilter: (value: FilterValuesType, todolistId: string) => void\r\n    addTask: (title: string, todolistId: string) => void\r\n    changeTaskStatus: (id: string, status: TaskStatuses, todolistId: string) => void\r\n    changeTaskTitle: (taskId: string, newTitle: string, todolistId: string) => void\r\n    // removeTask: (taskId: string, todolistId: string,task: TaskType) => void\r\n    removeTask: (taskId: string, todolistId: string) => void\r\n    removeTodolist: (id: string) => void\r\n    changeTodolistTitle: (id: string, newTitle: string) => void\r\n}\r\n\r\nexport const Todolist = React.memo(function ({ ...props}: PropsType) {\r\n    // console.log('Todolist called')\r\n\r\n    const dispatch = useDispatch()\r\n    useEffect(() => {\r\n        dispatch(fetchTasksTC(props.todolist.id))\r\n    }, [dispatch,props.todolist.id])\r\n\r\n    const addTask = useCallback((title: string) => {\r\n        props.addTask(title, props.todolist.id)\r\n    }, [props.addTask, props.todolist.id])\r\n\r\n    const removeTodolist = () => {\r\n        props.removeTodolist(props.todolist.id)\r\n    }\r\n    const changeTodolistTitle = useCallback((title: string) => {\r\n        props.changeTodolistTitle(props.todolist.id, title)\r\n    }, [props.todolist.id, props.changeTodolistTitle])\r\n\r\n    const onAllClickHandler = useCallback(() => props.changeFilter('all', props.todolist.id), [props.todolist.id, props.changeFilter])\r\n    const onActiveClickHandler = useCallback(() => props.changeFilter('active', props.todolist.id), [props.todolist.id, props.changeFilter])\r\n    const onCompletedClickHandler = useCallback(() => props.changeFilter('completed', props.todolist.id), [props.todolist.id, props.changeFilter])\r\n\r\n\r\n    let tasksForTodolist = props.tasks\r\n\r\n    if (props.todolist.filter === 'active') {\r\n        tasksForTodolist = props.tasks.filter(t => t.status === TaskStatuses.New)\r\n    }\r\n    if (props.todolist.filter === 'completed') {\r\n        tasksForTodolist = props.tasks.filter(t => t.status === TaskStatuses.Completed)\r\n    }\r\n    // console.log(props.tasks);\r\n    return <div>\r\n        <h3><EditableSpan value={props.todolist.title} onChange={changeTodolistTitle}/>\r\n            <IconButton onClick={removeTodolist} disabled={props.todolist.entityStatus === 'loading'}>\r\n                <Delete/>\r\n            </IconButton>\r\n        </h3>\r\n        <AddItemForm addItem={addTask} disabled={props.todolist.entityStatus === 'loading'}/>\r\n        <div>\r\n            {tasksForTodolist && tasksForTodolist.map(t => {\r\n\r\n                return(\r\n                <Task key={t._id} task={t} todolistId={props.todolist.id}\r\n                      removeTask={props.removeTask}\r\n                      changeTaskTitle={props.changeTaskTitle}\r\n                      changeTaskStatus={props.changeTaskStatus}\r\n                />)\r\n            }) }\r\n        </div>\r\n        <div style={{paddingTop: '10px'}}>\r\n            <Button variant={props.todolist.filter === 'all' ? 'outlined' : 'text'}\r\n                    onClick={onAllClickHandler}\r\n                    color={'default'}\r\n            >All\r\n            </Button>\r\n            <Button variant={props.todolist.filter === 'active' ? 'outlined' : 'text'}\r\n                    onClick={onActiveClickHandler}\r\n                    color={'primary'}>Active\r\n            </Button>\r\n            <Button variant={props.todolist.filter === 'completed' ? 'outlined' : 'text'}\r\n                    onClick={onCompletedClickHandler}\r\n                    color={'secondary'}>Completed\r\n            </Button>\r\n        </div>\r\n    </div>\r\n})\r\n\r\n\r\n","import React, {useCallback, useEffect} from 'react'\r\nimport {useDispatch, useSelector} from 'react-redux'\r\nimport {Grid, Paper} from '@material-ui/core'\r\nimport {Redirect} from \"react-router-dom\";\r\nimport {AppRootStateType} from \"../../../bll/store\";\r\nimport {\r\n    addTodolistTC, changeTodolistFilterAC, changeTodolistTitleTC,\r\n    fetchTodolistsTC,\r\n    FilterValuesType,\r\n    removeTodolistTC,\r\n    TodolistDomainType\r\n} from \"../../../bll/todolists-reducer\";\r\nimport {addTaskTC, removeTaskTC, TasksStateType, updateTaskTC} from \"../../../bll/tasksReduser\";\r\nimport {TaskStatuses, TaskType} from \"../../../bll/Api\";\r\nimport {AddItemForm} from \"../../components/common/AddItemForm\";\r\nimport {Todolist} from \"./todo\";\r\nimport {log} from \"util\";\r\n\r\ntype PropsType = {\r\n    addTodolist: (title: string) => void\r\n    removeTodolist: (todolistId: string) => void\r\n    todolistFromGroup: Array<string>\r\n}\r\n\r\nexport const TodolistsList: React.FC<PropsType> = (props: PropsType) => {\r\n    const dispatch = useDispatch()\r\n    useEffect(() => {\r\n        dispatch(fetchTodolistsTC())\r\n    }, [dispatch ])\r\n    const todolists = useSelector<AppRootStateType, Array<TodolistDomainType>>(state => state.todoList)\r\n    const isLoggedIn = useSelector<AppRootStateType, boolean>(state => state.auth.isLoggedIn);\r\n    const tasks = useSelector<AppRootStateType, TasksStateType>(state => state.tasks)\r\n    const groupTodo = useSelector<AppRootStateType, Array<TodolistDomainType>>(state => state.groups.todoListForGroup)\r\n\r\n    // const groupTodo:Array<any>  = props.todolistFromGroup && props.todolistFromGroup.map(tlG => {\r\n    //     return  todolists.find((todo) => tlG === todo.id)\r\n    // })\r\n\r\n\r\n    //const removeTask = useCallback(function (id: string, todolistId: string, task: TaskType) {\r\n    const removeTask = useCallback(function (id: string, todolistId: string) {\r\n        // dispatch(removeTaskTC(id, todolistId, task))\r\n        dispatch(removeTaskTC(id, todolistId))\r\n    }, [dispatch])\r\n    const addTask = (title: string, todolistId: string) => {\r\n        dispatch(addTaskTC(title, todolistId))\r\n    }\r\n    const changeStatus = useCallback(function (id: string, status: TaskStatuses, todolistId: string) {\r\n        dispatch(updateTaskTC(id, {status}, todolistId))\r\n    }, [])\r\n    const changeTaskTitle = useCallback(function (id: string, newTitle: string, todolistId: string) {\r\n        dispatch(updateTaskTC(id, {title: newTitle}, todolistId))\r\n    }, [])\r\n    const changeFilter = useCallback(function (value: FilterValuesType, todolistId: string) {\r\n        dispatch(changeTodolistFilterAC(todolistId, value))\r\n    }, [])\r\n    const changeTodolistTitle = useCallback(function (id: string, title: string) {\r\n        dispatch(changeTodolistTitleTC(id, title))\r\n    }, [])\r\n    const removeTodolist = useCallback(function (id: string) {\r\n        //todolistId\r\n        // dispatch(removeTodolistTC(id))\r\n        props.removeTodolist(id)\r\n    }, [])\r\n    const addTodolist = useCallback((title: string) => {\r\n        // dispatch(addTodolistTC(title))\r\n        props.addTodolist(title)\r\n    }, [dispatch])\r\n\r\n    console.log('groupTodo', groupTodo);\r\n    return <>\r\n        <Grid container style={{padding: '20px'}}>\r\n            <AddItemForm addItem={addTodolist}/>\r\n        </Grid>\r\n        {<Grid container spacing={3}>\r\n            {\r\n                groupTodo &&  groupTodo.map((tl) => {\r\n                    let allTodolistTasks = tasks[tl.id]\r\n                    console.log(tl.id)\r\n                    return <Grid item key={tl.id}>\r\n                        <Paper style={{padding: '10px'}}>\r\n                            <Todolist\r\n                                todolist={tl}\r\n                                tasks={allTodolistTasks}\r\n                                removeTask={removeTask}\r\n                                changeFilter={changeFilter}\r\n                                addTask={addTask}\r\n                                changeTaskStatus={changeStatus}\r\n                                removeTodolist={removeTodolist}\r\n                                changeTaskTitle={changeTaskTitle}\r\n                                changeTodolistTitle={changeTodolistTitle}\r\n                            />\r\n                        </Paper>\r\n                    </Grid>\r\n                })\r\n            }\r\n        </Grid>}\r\n    </>\r\n}\r\n","import React, {useCallback, useEffect} from 'react';\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {useParams} from 'react-router-dom';\r\nimport cl from \"../groupUsers/groupUsers.module.css\";\r\nimport {AppRootStateType} from \"../../../bll/store\";\r\nimport {GroupType} from \"../../../bll/Api\";\r\nimport {\r\n    getGroupByIdTC,\r\n    groupUsersType,\r\n    removeGroupsTC,\r\n    removeTodolistFromGroupTC,\r\n    removeUserFromGroupTC\r\n} from \"../../../bll/groupReduser\";\r\nimport {TodolistsList} from \"../todo/todoList\";\r\nimport DeleteIcon from \"@material-ui/icons/Delete\";\r\nimport {addTodolistTC, removeTodolistTC} from \"../../../bll/todolists-reducer\";\r\nimport {removeGroupFromUserDataTC} from \"../../../bll/userReduser\";\r\n\r\n\r\nconst GroupPage = React.memo(() => {\r\n    const dispatch = useDispatch()\r\n    const {id}: any = useParams()\r\n    useEffect(() => {dispatch(getGroupByIdTC(id))},[dispatch, id])\r\n\r\n    const group = useSelector<AppRootStateType, GroupType>(state => state.groups.activeGroup)\r\n    const deleteGroup = () => {\r\n        dispatch(removeGroupsTC(id))\r\n    }\r\n    console.log(group)\r\n    let user = group.data.users?.map((u: groupUsersType) => {\r\n        const removeUser = () => {\r\n            const user = {uid: u.uid, name: u.name}\r\n            dispatch(removeUserFromGroupTC(id, {uid: u.uid, name: u.name}))\r\n            dispatch(removeGroupFromUserDataTC(u.uid))\r\n        }\r\n        return (\r\n            <div key={u.uid}>\r\n                {/*<p>{u.uid}</p>*/}\r\n                <span>{u.name}</span>\r\n                <DeleteIcon onClick={removeUser} color='primary'/>\r\n            </div>\r\n        )\r\n    })\r\n    const addTodolist = useCallback((title: string) => {\r\n        dispatch(addTodolistTC(title, id))\r\n    }, [dispatch])\r\n    const removeTodolist = useCallback(function (todolistId: string) {\r\n        dispatch(removeTodolistTC(id,todolistId))\r\n        // dispatch(removeTodolistFromGroupTC(id, todolistId))\r\n    }, [dispatch])\r\n    return (\r\n        <>\r\n            <div style={{display: 'flex'}}>\r\n                <p>name groups:</p><h2> {group.data.group}</h2>\r\n            </div>\r\n            <div className={cl.box}>\r\n                {/*<Button onClick={deleteGroup}>delete</Button>*/}\r\n                {user && <><h5>list users:</h5>\r\n                    <div style={{display: 'flex'}}>{user}</div>\r\n                </>}\r\n                <h5>content for group: </h5>\r\n                {group && <TodolistsList addTodolist={addTodolist} todolistFromGroup={group.data.todoLists}\r\n                                removeTodolist={removeTodolist}/>\r\n                }  </div>\r\n        </>\r\n    );\r\n});\r\n\r\nexport default GroupPage;","import React from 'react';\r\nimport Button from '@material-ui/core/Button';\r\nimport Snackbar from '@material-ui/core/Snackbar';\r\nimport MuiAlert, {AlertProps} from '@material-ui/lab/Alert';\r\nimport {makeStyles, Theme} from '@material-ui/core/styles';\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {AppRootStateType} from \"../../../bll/store\";\r\nimport {setAppErrorAC} from \"../../../bll/app-reducer\";\r\n\r\nfunction Alert(props: AlertProps) {\r\n    return <MuiAlert elevation={6} variant=\"filled\" {...props} />;\r\n}\r\n\r\nconst useStyles = makeStyles((theme: Theme) => ({\r\n    root: {\r\n        width: '100%',\r\n        '& > * + *': {\r\n            marginTop: theme.spacing(2),\r\n        },\r\n    },\r\n}));\r\n\r\nexport function SmallAlert() {\r\n    const message = useSelector<AppRootStateType, string | null>(state => state.app.error)\r\n    const dispatch = useDispatch()\r\n    const classes = useStyles()\r\n    const open = message !== null\r\n    // const [open, setOpen] = React.useState(false);\r\n    //\r\n    // const handleClick = () => {\r\n    //     setOpen(true);\r\n    // };\r\n    const handleClose = (event?: React.SyntheticEvent, reasons?: string) => {\r\n        if (reasons === 'clickaway') {\r\n            return\r\n        }\r\n        dispatch(setAppErrorAC(null))\r\n    }\r\n    return (\r\n        <div className={classes.root}>\r\n            <Snackbar open={open} autoHideDuration={6000} onClose={handleClose}>\r\n                <Alert onClose={handleClose} severity=\"success\">\r\n                    {message}\r\n                </Alert>\r\n            </Snackbar>\r\n            {/*<Alert severity=\"error\">This is an error message!</Alert>*/}\r\n            {/*<Alert severity=\"warning\">This is a warning message!</Alert>*/}\r\n            {/*<Alert severity=\"info\">This is an information message!</Alert>*/}\r\n            {/*<Alert severity=\"success\">This is a success message!</Alert>*/}\r\n        </div>\r\n    );\r\n}","import React from 'react';\nimport clsx from 'clsx';\nimport {makeStyles} from '@material-ui/core/styles';\nimport CssBaseline from '@material-ui/core/CssBaseline';\nimport Drawer from '@material-ui/core/Drawer';\nimport Box from '@material-ui/core/Box';\nimport AppBar from '@material-ui/core/AppBar';\nimport Toolbar from '@material-ui/core/Toolbar';\nimport List from '@material-ui/core/List';\nimport Typography from '@material-ui/core/Typography';\nimport Divider from '@material-ui/core/Divider';\nimport IconButton from '@material-ui/core/IconButton';\nimport Badge from '@material-ui/core/Badge';\nimport Container from '@material-ui/core/Container';\nimport Link from '@material-ui/core/Link';\nimport MenuIcon from '@material-ui/icons/Menu';\nimport ChevronLeftIcon from '@material-ui/icons/ChevronLeft';\nimport NotificationsIcon from '@material-ui/icons/Notifications';\nimport {mainListItems, secondaryListItems} from './listItems';\nimport {Switch, Route, NavLink} from \"react-router-dom\"\nimport Button from \"@material-ui/core/Button\";\nimport {useDispatch, useSelector} from \"react-redux\";\nimport {signOutTC} from \"../../../bll/userReduser\";\nimport HomeIcon from '@material-ui/icons/Home';\nimport Groups from \"../../views/groups/groups\";\nimport {PATH} from \"../../route\";\nimport Users from \"../../views/users/users\";\nimport Page404 from \"../../views/pages/page404/Page404\";\nimport GroupPage from \"../../views/groups/groupPage\";\nimport LinearProgress from \"@material-ui/core/LinearProgress\";\nimport {SmallAlert} from \"../common/SmalAlert\";\nimport {AppRootStateType} from \"../../../bll/store\";\nimport {RequestStatusType} from \"../../../bll/app-reducer\";\n\n\nfunction Copyright() {\n    return (\n        <Typography variant=\"body2\" color=\"textSecondary\" align=\"center\">\n            {'Copyright © '}\n            <Link color=\"inherit\" href=\"https://material-ui.com/\">\n                Your Website\n            </Link>{' '}\n            {new Date().getFullYear()}\n            {'.'}\n        </Typography>\n    );\n}\n\nconst drawerWidth = 240;\nconst useStyles = makeStyles((theme) => ({\n    root: {\n        display: 'flex',\n    },\n    toolbar: {\n        paddingRight: 24, // keep right padding when drawer closed\n    },\n    toolbarIcon: {\n        display: 'flex',\n        alignItems: 'center',\n        justifyContent: 'flex-end',\n        padding: '0 8px',\n        ...theme.mixins.toolbar,\n    },\n    appBar: {\n        zIndex: theme.zIndex.drawer + 1,\n        transition: theme.transitions.create(['width', 'margin'], {\n            easing: theme.transitions.easing.sharp,\n            duration: theme.transitions.duration.leavingScreen,\n        }),\n    },\n    appBarShift: {\n        marginLeft: drawerWidth,\n        width: `calc(100% - ${drawerWidth}px)`,\n        transition: theme.transitions.create(['width', 'margin'], {\n            easing: theme.transitions.easing.sharp,\n            duration: theme.transitions.duration.enteringScreen,\n        }),\n    },\n    menuButton: {\n        marginRight: 36,\n    },\n    menuButtonHidden: {\n        display: 'none',\n    },\n    title: {\n        flexGrow: 1,\n    },\n    drawerPaper: {\n        position: 'relative',\n        whiteSpace: 'nowrap',\n        width: drawerWidth,\n        transition: theme.transitions.create('width', {\n            easing: theme.transitions.easing.sharp,\n            duration: theme.transitions.duration.enteringScreen,\n        }),\n    },\n    drawerPaperClose: {\n        overflowX: 'hidden',\n        transition: theme.transitions.create('width', {\n            easing: theme.transitions.easing.sharp,\n            duration: theme.transitions.duration.leavingScreen,\n        }),\n        width: theme.spacing(7),\n        [theme.breakpoints.up('sm')]: {\n            width: theme.spacing(9),\n        },\n    },\n    appBarSpacer: theme.mixins.toolbar,\n    content: {\n        flexGrow: 1,\n        // height: '100vh',\n        overflow: 'auto',\n    },\n    container: {\n        paddingTop: theme.spacing(4),\n        paddingBottom: theme.spacing(4),\n    },\n    paper: {\n        padding: theme.spacing(2),\n        display: 'flex',\n        overflow: 'auto',\n        flexDirection: 'column',\n    },\n    fixedHeight: {\n        height: 240,\n    },\n}));\n\n// Pages\nconst Starting = React.lazy(() => import('../../views/starting'));\nconst GroupsUsers = React.lazy(() => import('../../views/groupUsers/groupsUsers'));\n// const Page404 = React.lazy(() => import('./views/pages/page404/Page404'));\n// const Page500 = React.lazy(() => import('./views/pages/page500/Page500'));\n\nexport default function Dashboard() {\n    const dispatch = useDispatch()\n    // const status = useSelector<AppRootStateType, RequestStatusType>(state => state.app.status)\n    const status = useSelector(state => state.app.status)\n    const classes = useStyles();\n    const [open, setOpen] = React.useState(true);\n    const handleDrawerOpen = () => {\n        setOpen(true);\n    };\n    const handleDrawerClose = () => {\n        setOpen(false);\n    };\n    const submitSignOut = () => {\n        dispatch(signOutTC())\n    }\n\n    return (\n        <div className={classes.root}>\n            <CssBaseline/>\n            <AppBar position=\"absolute\" className={clsx(classes.appBar, open && classes.appBarShift)}>\n                <Toolbar className={classes.toolbar}>\n                    <IconButton edge=\"start\" color=\"inherit\" aria-label=\"open drawer\" onClick={handleDrawerOpen}\n                                className={clsx(classes.menuButton, open && classes.menuButtonHidden)}>\n                        <MenuIcon/>\n                    </IconButton>\n                    <Typography component=\"h1\" variant=\"h6\" color=\"inherit\" noWrap className={classes.title}>\n                        Dashboard\n                    </Typography>\n                    <IconButton color=\"inherit\">\n                        <Badge badgeContent={4} color=\"secondary\">\n                            <NotificationsIcon/>\n                        </Badge>\n                    </IconButton>\n                    <Button onClick={submitSignOut}>sign out</Button>\n                    <NavLink to={'https://lisapatrikeevna.github.io/dragan-2/'} title={'to site'}> <HomeIcon/></NavLink>\n                </Toolbar>\n            </AppBar>\n            <Drawer variant=\"permanent\" open={open}\n                    classes={{paper: clsx(classes.drawerPaper, !open && classes.drawerPaperClose),}}>\n                <div className={classes.toolbarIcon}>\n                    <IconButton onClick={handleDrawerClose}>\n                        <ChevronLeftIcon/>\n                    </IconButton>\n                </div>\n                <Divider/>\n                <List>{mainListItems}</List>\n                <Divider/>\n                <List>{secondaryListItems}</List>\n            </Drawer>\n            <main className={classes.content}>\n                <div className={classes.appBarSpacer}/>\n                {status==='loading' && <LinearProgress/>}\n                <Container maxWidth=\"lg\" className={classes.container}>\n                    <React.Suspense fallback={'...loading'}>\n                        <Switch>\n                            {/*<Route path=\"/\"  render={props => <Starting {...props}/>} />*/}\n                            <Route exact path={PATH.GROUPS} render={() => <Groups/>}/>\n                            <Route exact path={PATH.USERS} render={() => <Users/>}/>\n                            <Route path=\"/starting\" render={props => <Starting {...props}/>}/>\n                            {/*<Route path=\"/groupsUsers\" render={props => <GroupsUsers {...props}/>}/>*/}\n                            <Route exact path={PATH.PAGEGROUP.path} render={() => <GroupPage/>}/>\n                            <Route exact path={PATH.ERROR404} render={() => <Page404/>}/>\n                            {/*    /!*<Route exact path=\"/404\" name=\"Page 404\" render={props => <Page404 {...props}/>} />*!/*/}\n                            {/*    /!*<Route exact path=\"/500\" name=\"Page 500\" render={props => <Page500 {...props}/>} />*!/*/}\n                        </Switch>\n                        <SmallAlert/>\n                    </React.Suspense>\n                    <Box pt={4}>\n                        <Copyright/>\n                    </Box>\n                </Container>\n            </main>\n        </div>\n    );\n}\n","import React, {useCallback} from 'react';\r\nimport {useDispatch} from \"react-redux\";\r\nimport {NavLink} from \"react-router-dom\";\r\nimport {PATH} from \"../../route\";\r\nimport {groupUsersType, removeGroupsTC} from \"../../../bll/groupReduser\";\r\nimport TableCell from \"@material-ui/core/TableCell\";\r\nimport TableRow from \"@material-ui/core/TableRow\";\r\nimport BorderColorIcon from '@material-ui/icons/BorderColor';\r\nimport DeleteIcon from '@material-ui/icons/Delete';\r\n\r\n\r\ntype propsType = {\r\n    id: string\r\n    name: string\r\n    users?: groupUsersType[]\r\n}\r\nconst Group = React.memo((props: propsType) => {\r\n    const dispatch = useDispatch()\r\n    const deleteGroup = useCallback(() => {\r\n        dispatch(removeGroupsTC(props.id))\r\n    }, [props.id])\r\n    let user = props.users?.map(u => <div key={u.uid}>\r\n        {/*<p>{u.uid}</p>*/}\r\n        <span>{u.name}</span></div>)\r\n    return (<>\r\n            <TableRow key={props.id}>\r\n                <TableCell component=\"th\" scope=\"row\">{user}</TableCell>\r\n                <TableCell align=\"right\">\r\n                    {props.name}\r\n                </TableCell>\r\n                <TableCell align=\"right\">\r\n                    <NavLink to={PATH.PAGEGROUP.getUrl(props.id)}><BorderColorIcon/></NavLink>\r\n                    <DeleteIcon onClick={deleteGroup} color='primary'/>\r\n                </TableCell>\r\n            </TableRow>\r\n        </>\r\n    )\r\n})\r\n\r\nexport default Group;","import React, {ChangeEvent, useEffect, useState} from 'react';\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {AppRootStateType} from \"../../../bll/store\";\r\nimport Group from \"./group\";\r\nimport {GroupType} from \"../../../bll/Api\";\r\nimport cl from \"../groupUsers/groupUsers.module.css\";\r\nimport {addGroupsTC, getGroupsTC} from \"../../../bll/groupReduser\";\r\nimport DenseTable from \"./tableGroup\";\r\nimport TableContainer from \"@material-ui/core/TableContainer\";\r\nimport Paper from \"@material-ui/core/Paper\";\r\nimport Table from \"@material-ui/core/Table\";\r\nimport TableHead from \"@material-ui/core/TableHead\";\r\nimport TableRow from \"@material-ui/core/TableRow\";\r\nimport TableCell from \"@material-ui/core/TableCell\";\r\nimport TableBody from \"@material-ui/core/TableBody\";\r\nimport {makeStyles} from \"@material-ui/core/styles\";\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n    head: {\r\n        backgroundColor: theme.palette.common.black,\r\n        color: theme.palette.common.white,\r\n    },\r\n    table: {\r\n        minWidth: 650,\r\n    },\r\n}));\r\nconst Groups = () => {\r\n    const dispatch = useDispatch()\r\n    useEffect(() => {\r\n        dispatch(getGroupsTC())\r\n    }, [dispatch])\r\n    const allGroups = useSelector<AppRootStateType, Array<GroupType>>(state => state.groups.groups)\r\n    let [nGroup, setNumGroup] = useState<string>('')\r\n    const setNewGroup = (e: ChangeEvent<HTMLInputElement>) => {\r\n        setNumGroup(e.currentTarget.value)\r\n    }\r\n    const createGroup = () => {\r\n        dispatch(addGroupsTC(nGroup.trim()))\r\n        setNumGroup('')\r\n    }\r\n    const group = allGroups.map(g => <Group key={g.id} id={g.id} name={g.data.group}\r\n                                                  users={g.data.users}/>)\r\n    const classes = useStyles();\r\n    return (\r\n        <>\r\n            <p>GroupsUsers:\r\n                <input type=\"text\" value={nGroup} onChange={setNewGroup}/>\r\n                <button onClick={createGroup}>create group</button>\r\n            </p>\r\n            <TableContainer component={Paper}>\r\n                <Table className={classes.table} size=\"small\" aria-label=\"a dense table\">\r\n                    <TableHead>\r\n                        <TableRow>\r\n                            <TableCell >Users (lists)</TableCell>\r\n                            <TableCell align=\"right\">Names group</TableCell>\r\n                            {/*<TableCell align=\"right\">Fat&nbsp;(g)</TableCell>*/}\r\n                            <TableCell align=\"right\">buttons group&nbsp;</TableCell>\r\n                        </TableRow>\r\n                    </TableHead>\r\n                    <TableBody>\r\n                        {group}\r\n                    </TableBody>\r\n                </Table>\r\n            </TableContainer>\r\n        </>\r\n    );\r\n};\r\n\r\n\r\nexport default Groups;\r\n\r\n","import React, {ChangeEvent, useCallback, useState} from 'react';\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {AppRootStateType} from \"../../../bll/store\";\r\nimport {updateUserTC} from \"../../../bll/userReduser\";\r\nimport cl from './user.module.css'\r\nimport { createStyles, FormControl, FormHelperText, Select, Theme} from \"@material-ui/core\";\r\nimport {EditableSpan} from \"../../components/common/EditableSpan\";\r\nimport makeStyles from \"@material-ui/core/styles/makeStyles\";\r\nimport {GroupType} from \"../../../bll/Api\";\r\nimport {groupUsersType, removeUserFromGroupTC} from \"../../../bll/groupReduser\";\r\nimport DeleteIcon from \"@material-ui/icons/Delete\";\r\nimport UpdateIcon from '@material-ui/icons/Update';\r\nimport AddBoxIcon from '@material-ui/icons/AddBox';\r\n\r\nconst useStyles = makeStyles((theme: Theme) =>\r\n    createStyles({\r\n        formControl: {\r\n            margin: theme.spacing(1),\r\n            minWidth: 150,\r\n        },\r\n        selectEmpty: {\r\n            marginTop: theme.spacing(2),\r\n        },\r\n    }),\r\n);\r\ntype propsType = {\r\n    uid: string\r\n    name?: string | undefined\r\n    phoneNumber?: string\r\n    date: string\r\n    email: string\r\n    groupName: string | null\r\n    groupId: string | null\r\n    listTasks?: {} | undefined\r\n    removeUser: (uid: string) => void\r\n    addUserToGroup: (uid: string, groupName: string, name: string, user: groupUsersType) => void\r\n    listGroup: Array<GroupType>\r\n}\r\nconst User = (props: propsType) => {\r\n    const classes = useStyles();\r\n    const dispatch = useDispatch()\r\n    const admin = useSelector<AppRootStateType, string>(state => state.users.adminUid)\r\n    const curentUser = useSelector<AppRootStateType, string>(state => state.users.userid)\r\n    let [groupID, setGroupID] = useState<string>('')\r\n    let [name, setName] = useState<string>(props.name ? props.name : 'not a name')\r\n    let [email, setEmail] = useState<string>(props.email)\r\n    let [phone, setPhone] = useState<string>(props.phoneNumber ? props.phoneNumber : 'not a phoneNumber')\r\n    const changeEmail = (email: string) => {\r\n        setEmail(email)\r\n    }\r\n    const changeName = (name: string) => {\r\n        setName(name)\r\n    }\r\n    const changePhone = (phone: string) => {\r\n        setPhone(phone)\r\n    }\r\n    const removeUser = () => {\r\n        const user = {uid: props.uid, name}\r\n        if(props.groupId){\r\n            dispatch(removeUserFromGroupTC(props.groupId,user))\r\n        }\r\n        props.removeUser(props.uid)\r\n    }\r\n    const update = useCallback(() => {\r\n        let payload = {email, name, phone}\r\n        dispatch(updateUserTC(props.uid, payload))\r\n    }, [email, name, phone])\r\n    const addToo = () => {\r\n        const user = {uid: props.uid, name}\r\n        if(props.groupId){\r\n            // debugger\r\n            dispatch(removeUserFromGroupTC(props.groupId,user))\r\n        }\r\n        props.addUserToGroup(groupID, props.uid, name, user)\r\n    }\r\n    const styles = {\r\n        // display:!admin  ?  'block' : 'none'\r\n    }\r\n    const handleChange = (event: React.ChangeEvent<{ value: unknown }>) => {\r\n        setGroupID(event.target.value as string);\r\n    };\r\n// debugger\r\n    return (\r\n        <div key={props.uid} >\r\n            {/*<p>uid:{props.uid}</p>*/}\r\n            {admin !== curentUser && <>\r\n                <div className={cl.spanWrap}><span>name:</span><h5>{name ? name : 'no name'}</h5></div>\r\n                <div className={cl.spanWrap}><span>email:</span><h5>{props.email}</h5></div>\r\n            </>}\r\n            {admin === curentUser &&\r\n            <div className={cl.TableRow} style={styles}>\r\n                <div className={`${cl.large} ${cl.wrap}`}>\r\n                    <EditableSpan onChange={changeEmail} value={email}/>\r\n                    <EditableSpan onChange={changeName} value={name}/>\r\n                    <EditableSpan onChange={changePhone} value={phone}/>\r\n                </div>\r\n                <div className={`${cl.medium} ${cl.wrap}`}>\r\n                    <UpdateIcon onClick={update} color='primary' />\r\n                    <DeleteIcon onClick={removeUser} color='primary'/>\r\n                <div className={cl.spaceBetween}>\r\n                    <FormControl className={classes.formControl}>\r\n                        <Select labelId=\"demo-simple-select-label\" id=\"demo-simple-select\"\r\n                                value={groupID} onChange={handleChange}>\r\n                            {props.listGroup.map(g => {\r\n                                return <option value={g.id} key={g.id}>{g.data.group}</option>\r\n                            })}\r\n                        </Select>\r\n                        <FormHelperText>select group</FormHelperText>\r\n                    </FormControl>\r\n                    <AddBoxIcon onClick={addToo} color='primary'/>\r\n                </div>\r\n                </div>\r\n                <div className={`${cl.small} ${cl.wrap}`}>\r\n                    {/*<p>date :{props.date}</p>*/}\r\n                    <p>{props.groupName ? props.groupName : 'no group'}</p>\r\n                    <p>{props.listTasks ? props.listTasks : 'no tasks'}</p>\r\n                </div>\r\n            </div>\r\n            }\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default User;\r\n\r\n","import React, {useCallback, useEffect} from 'react';\nimport {useDispatch, useSelector} from \"react-redux\";\nimport {\n    removeUserTC,\n    setUserOnGroupTC,\n    setUsersTC,\n    userType\n} from \"../../../bll/userReduser\";\nimport {AppRootStateType} from \"../../../bll/store\";\nimport User from \"../users/user\";\nimport cl from './user.module.css';\nimport {GroupType} from \"../../../bll/Api\";\nimport {getGroupsTC, groupUsersType} from \"../../../bll/groupReduser\";\nimport TableContainer from \"@material-ui/core/TableContainer\";\nimport Paper from \"@material-ui/core/Paper\";\nimport Table from \"@material-ui/core/Table\";\nimport TableHead from \"@material-ui/core/TableHead\";\nimport TableRow from \"@material-ui/core/TableRow\";\nimport TableCell from \"@material-ui/core/TableCell\";\nimport TableBody from \"@material-ui/core/TableBody\";\nimport {makeStyles} from \"@material-ui/core/styles\";\n\n\nconst useStyles = makeStyles((theme) => ({\n    head: {\n        backgroundColor: theme.palette.common.black,\n        color: theme.palette.common.white,\n    },\n    table: {\n        minWidth: 650,\n    },\n}));\nconst Users = () => {\n    const dispatch = useDispatch()\n    useEffect(() => {\n        dispatch(setUsersTC())\n        dispatch(getGroupsTC())\n    }, [dispatch])\n    const removeUser = useCallback(function (uid: string) {\n        const action = removeUserTC(uid)\n        dispatch(action)\n    }, [])\n    const addUserToGroup = (id: string, uid: string, userName: string, user: groupUsersType) => {\n        // dispatch(setUserOnGroupTC(id,uid, userName))\n        dispatch(setUserOnGroupTC(id, uid, userName, user))\n    }\n    const allUsers = useSelector<AppRootStateType, Array<userType>>(state => state.users.users)\n    const allGroups = useSelector<AppRootStateType, Array<GroupType>>(state => state.groups.groups)\n    const user = allUsers.map(u => <User key={u.uid} groupName={u.groupName} groupId={u.groupId} name={u.displayName} date={u.tokensValidAfterTime}\n                                         email={u.email} listTasks={u.listTasks} uid={u.uid} removeUser={removeUser}\n                                         addUserToGroup={addUserToGroup} phoneNumber={u.phoneNumber}\n                                         listGroup={allGroups}/>)\n    return (\n        <div>\n            <h5>all users: </h5>\n            <p>пс. чтоб обновить поля( email и name ) даблклик и апдейт</p>\n            {/*<div className={cl.wrap}>{user}</div>*/}\n            <div>\n                <div className={cl.table} aria-label=\"a dense table\">\n                    <div className={cl.TableHead}>\n                        <div className={cl.TableRow}>\n                            <div className={cl.large}>\n                                <h4>Users (data)</h4>\n                                <span className={cl.wrap}>\n                                    <p>email</p>\n                                    <p>name</p>\n                                    <p>phoneNumber</p>\n                                </span>\n                            </div>\n                            <div className={cl.medium}>\n                                <h4>buttons group</h4>\n                                <span className={cl.wrap}>\n                                    <p>change/add group</p>\n                                    <p>change/delet user</p>\n                                </span>\n                            </div>\n                            <div className={cl.small}>\n                                <h4>Users (info)</h4>\n                                <span className={cl.wrap}>\n                                    <p>group</p>\n                                    <p>task</p>\n                                </span>\n                            </div>\n                        </div>\n                    </div>\n                    <div className={cl.TableBody}>\n                        {user}\n                    </div>\n                </div>\n            </div>\n        </div>\n    );\n};\n\nexport default Users;\n","import React from 'react'\nimport {\n  CButton,\n  CCol,\n  CContainer,\n  CInput,\n  CInputGroup,\n  CInputGroupPrepend,\n  CInputGroupAppend,\n  CInputGroupText,\n  CRow\n} from '@coreui/react'\nimport CIcon from '@coreui/icons-react'\n\nconst Page404 = () => {\n  return (\n    <div className=\"c-app c-default-layout flex-row align-items-center\">\n      <CContainer>\n        <CRow className=\"justify-content-center\">\n          <CCol md=\"6\">\n            <div className=\"clearfix\">\n              <h1 className=\"float-left display-3 mr-4\">404</h1>\n              <h4 className=\"pt-3\">Oops! You{'\\''}re lost.</h4>\n              <p className=\"text-muted float-left\">The page you are looking for was not found.</p>\n            </div>\n            <CInputGroup className=\"input-prepend\">\n              <CInputGroupPrepend>\n                <CInputGroupText>\n                  <CIcon name=\"cil-magnifying-glass\" />\n                </CInputGroupText>\n              </CInputGroupPrepend>\n              <CInput size=\"16\" type=\"text\" placeholder=\"What are you looking for?\" />\n              <CInputGroupAppend>\n                <CButton color=\"info\">Search</CButton>\n              </CInputGroupAppend>\n            </CInputGroup>\n          </CCol>\n        </CRow>\n      </CContainer>\n    </div>\n  )\n}\n\nexport default Page404\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"wrap\":\"groupUsers_wrap__GuI9U\",\"box\":\"groupUsers_box__2uUZq\"};","import {Dispatch} from \"redux\";\r\nimport {handleServerAppError} from \"../utils/error-utils\";\r\n\r\nconst initialState: InitialStateType = {\r\n    status: 'idle',\r\n    error: null,\r\n    isInitialized: false\r\n}\r\n\r\nexport const appReducer = (state: InitialStateType = initialState, action: ActionsType): InitialStateType => {\r\n    switch (action.type) {\r\n        case 'APP/SET-STATUS':\r\n            return {...state, status: action.status}\r\n        case 'APP/SET-ERROR':\r\n            return {...state, error: action.error}\r\n        case 'IS-INIT':\r\n            return {...state, isInitialized: action.isInitialized}\r\n        default:\r\n            return {...state}\r\n    }\r\n}\r\n\r\nexport type RequestStatusType = 'idle' | 'loading' | 'succeeded' | 'failed'\r\nexport type InitialStateType = {\r\n    // происходит ли сейчас взаимодействие с сервером\r\n    status: RequestStatusType\r\n    // если ошибка какая-то глобальная произойдёт - мы запишем текст ошибки сюда\r\n    error: string | null\r\n    isInitialized: boolean\r\n}\r\n\r\nexport const setAppErrorAC = (error: string | null) => ({type: 'APP/SET-ERROR', error} as const)\r\nexport const setAppStatusAC = (status: RequestStatusType) => ({type: 'APP/SET-STATUS', status} as const)\r\nexport const setIsInitializedAC = (isInitialized: boolean) => ({type: 'IS-INIT', isInitialized} as const)\r\nexport type SetAppErrorActionType = ReturnType<typeof setAppErrorAC>\r\nexport type SetAppStatusActionType = ReturnType<typeof setAppStatusAC>\r\nexport type setIsInitializedACType = ReturnType<typeof setIsInitializedAC>\r\n\r\n\r\n// export const initializeAppTC = () => (dispatch: Dispatch) => {\r\n//     authAPI.me()\r\n//         .then(res => {\r\n//         // debugger\r\n//         if (res.data.resultCode === 0) {\r\n//             dispatch(setIsLoggedInAC(true));\r\n//\r\n//          }\r\n//         else {\r\n//             // debugger\r\n//             // // handleServerAppError(err, dispatch);\r\n//         }\r\n//     })\r\n//         .catch((err) => {\r\n//             handleServerAppError(err, dispatch);\r\n//             dispatch(setIsInitializedAC(true))\r\n//             // throw new Error(err.message)\r\n//         })\r\n//     dispatch(setIsInitializedAC(true))\r\n// }\r\n\r\ntype ActionsType =\r\n    | SetAppErrorActionType\r\n    | SetAppStatusActionType\r\n    | setIsInitializedACType\r\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"spaceBetween\":\"user_spaceBetween__1iYEJ\",\"spanWrap\":\"user_spanWrap__6Nb44\",\"wrap\":\"user_wrap__29-_l\",\"box\":\"user_box__Jsi2i\",\"table\":\"user_table__1zvg_\",\"TableHead\":\"user_TableHead__1Hex3\",\"TableRow\":\"user_TableRow__1cN_h\",\"TableBody\":\"user_TableBody__12VlH\",\"large\":\"user_large__31K9m\",\"small\":\"user_small__1Oid5\",\"medium\":\"user_medium__3CVnS\"};","import {Dispatch} from \"redux\";\nimport {GroupsApi, GroupType, TodoslistType} from \"./Api\";\nimport * as uuid from 'uuid';\nimport {TodolistDomainType} from \"./todolists-reducer\";\nimport store, {AppRootStateType} from \"./store\";\n\nexport type setGroupsACType = ReturnType<typeof setGroupsAC>\ntype addGroupsACType = ReturnType<typeof addGroupsAC>\ntype deleteGroupsACType = ReturnType<typeof deleteGroupsAC>\ntype getGroupByIdACType = ReturnType<typeof getGroupByIdAC>\nexport type setTodolistsForGroupACType = ReturnType<typeof setTodolistsForGroupAC>\ntype actionType = setGroupsACType\n    | addGroupsACType\n    | deleteGroupsACType\n    | getGroupByIdACType\n    | setTodolistsForGroupACType\n\nexport type  groupUsersType = {\n    uid: string\n    name?: string\n}\n\ntype initStateType = {\n    groups: GroupType[]\n    activeGroup: GroupType\n    status: boolean\n    userRecord: string\n    message: string\n    todoListForGroup: Array<any>\n    groupTodolist: Array<string>\n}\n\nexport let initState: initStateType = {\n    groups: [],\n    activeGroup: {id: '', data: {group: '', users: [], todoLists: []}},\n    // activeGroup: {} as GroupType,\n    status: false,\n    userRecord: '',\n    message: '',\n    todoListForGroup: [],\n    groupTodolist: []\n}\n\nexport const groupReducer = (state = initState, action: actionType) => {\n    switch (action.type) {\n        case 'GROUP/SET-GROUPS':\n            return {...state, groups: action.payload}\n        case 'GROUP/ADD-GROUP':\n            return {...state, groups: [...state.groups, action.payload]}\n        case 'GROUP/DELETE-GROUP':\n            return {...state, groups: [state.groups.filter(g => g.id !== action.payload)]}\n        case \"GROUP/GET-GROUP-WITH-ID\": {\n            return {\n                ...state,\n                activeGroup: action.payload\n            }\n        }\n        case \"SET-TODOLIST-FOR-GROUPS\":\n            debugger\n            return {\n                ...state,\n                todoListForGroup: action.todolists\n            }\n\n        default:\n            return {...state}\n    }\n}\nexport const setGroupsAC = (payload: any) => ({type: 'GROUP/SET-GROUPS', payload} as const)\nexport const addGroupsAC = (payload: any) => ({type: 'GROUP/ADD-GROUP', payload} as const)\nexport const deleteGroupsAC = (payload: any) => ({type: 'GROUP/DELETE-GROUP', payload} as const)\nexport const getGroupByIdAC = (payload: GroupType) => ({type: 'GROUP/GET-GROUP-WITH-ID', payload} as const)\nexport const setTodolistsForGroupAC = (todolists: Array<TodoslistType>) => ({\n    type: 'SET-TODOLIST-FOR-GROUPS', todolists\n} as const)\n\n//TC\nexport const getGroupsTC = () => (dispatch: Dispatch) => {\n    GroupsApi.getGroups()\n        .then(res => {\n                dispatch(setGroupsAC(res))\n            }\n        )\n}\nexport const getGroupByIdTC = (id: string) => (dispatch: Dispatch, getState: () => AppRootStateType) => {\n\n    GroupsApi.getGroupById(id)\n        .then(res => {\n                // dispatch(getGroupByIdAC(res))\n                dispatch(getGroupByIdAC({data: res, id}))\n                debugger\n                try {\n                    const todoList = getState().todoList\n                    const someTodLists = res.todoLists.map((tlG: any) => {\n                        return todoList.find((todo) => tlG === todo.id)\n                    })\n                    dispatch(setTodolistsForGroupAC(someTodLists))\n                }catch (e) {\n                    console.log(e);\n                }\n            }\n        )\n}\nexport const removeGroupsTC = (id: string) => (dispatch: any) => {\n    GroupsApi.groupRemove(id).then(res => {\n        dispatch(getGroupsTC())\n        console.log(res);\n    })\n}\nexport const addGroupsTC = (group: string) => (dispatch: any) => {\n    let id = uuid.v1()\n    GroupsApi.addGroup(id, group)\n        .then(res => {\n            dispatch(getGroupsTC())\n            console.log(res);\n        })\n}\nexport const removeUserFromGroupTC = (id: string, user: groupUsersType) => (dispatch: any) => {\n    // debugger\n    GroupsApi.removeUserFromGroup(id, user).then(res => {\n        dispatch(getGroupByIdTC(id))\n        console.log(res);\n    })\n\n}\nexport const removeTodolistFromGroupTC = (id: string, todolistId: string) => (dispatch: any) => {\n    GroupsApi.removeTodoFromGroup(id, todolistId).then(res => {\n        dispatch(getGroupByIdTC(id))\n        console.log(res);\n    })\n}\n","import {Dispatch} from 'redux'\r\nimport {setAppErrorAC, SetAppErrorActionType, setAppStatusAC, SetAppStatusActionType} from \"../bll/app-reducer\"\r\nimport {ResponseType} from '../bll/Api'\r\n\r\nexport const handleServerAppError = <D>(data: ResponseType<D>, dispatch: Dispatch<SetAppErrorActionType | SetAppStatusActionType>) => {\r\n    if (data.messages.length) {\r\n        dispatch(setAppErrorAC(data.messages[0]))\r\n    } else {\r\n        dispatch(setAppErrorAC('Some error occurred'))\r\n    }\r\n    dispatch(setAppStatusAC('failed'))\r\n}\r\n\r\nexport const handleServerNetworkError = (error: { message: string }, dispatch: Dispatch<SetAppErrorActionType | SetAppStatusActionType>) => {\r\n    dispatch(setAppErrorAC(error.message ? error.message : 'Some error occurred'))\r\n    dispatch(setAppStatusAC('failed'))\r\n}\r\n","import {Dispatch} from \"redux\";\nimport {FireBaseResponse, firestorUpdateUserType, GroupsApi, GroupType, Users, UserType} from \"./Api\";\nimport firebase from \"firebase\";\nimport {app} from \"../index\";\nimport {getGroupsTC, groupUsersType, setGroupsACType} from \"./groupReduser\";\nimport {setAppStatusAC} from \"./app-reducer\";\nimport {handleServerNetworkError} from \"../utils/error-utils\";\n\ntype setUsersACType = ReturnType<typeof setUsersAC>\ntype authACType = ReturnType<typeof authAC>\ntype setUserAdditionalInformationACType = ReturnType<typeof setUserAdditionalInformationAC>\ntype setUserRecordACType = ReturnType<typeof setUserRecordAC>\ntype loginUserACType = ReturnType<typeof loginUserAC>\ntype actionType = setUsersACType | setUserAdditionalInformationACType\n    | setUserRecordACType | authACType | loginUserACType | setGroupsACType\n\n// type providerDataType = {\n//     0: { uid: string, email: string, providerId: string }\n//     length: number\n//     tokensValidAfterTime: string\n// }\nexport type userType = {\n    disabled: boolean\n    displayName: string\n    email: string\n    emailVerified: boolean\n    metadata: { lastSignInTime: string, creationTime: string }\n    passwordHash: string\n    passwordSalt: string\n    providerData: any\n    tokensValidAfterTime: string\n    uid: string\n    photoURL?: string\n    phoneNumber?: string\n    groupName: string | null\n    groupId: string | null\n    listTasks?: {}\n}\n\ntype initStateType = {\n    groups: GroupType[]\n    users: Array<userType>\n    status: boolean\n    userRecord: string\n    adminUid: string\n    message: string\n    email: string\n    userid: string\n}\n\nlet initState: initStateType = {\n    groups: [],\n    users: [],\n    status: false,\n    userRecord: '',\n    adminUid: 'WuVt9TwRQ0grRFpgAKQlB1nJGAm1',\n    message: '',\n    email: '',\n    userid: '',\n}\n\nexport const userReducer = (state = initState, action: actionType) => {\n    switch (action.type) {\n        case \"USERS/LOGIN_USER\":\n            return {...state, email: action.email, userid: action.userid}\n        case \"USERS/AUTH\":\n            return {...state, status: action.payload}\n        case \"USERS/SET-USER-RECORD\":\n            return {...state, userRecord: action.payload, status: true}\n        case 'GROUP/SET-GROUPS':\n            return {...state, groups: action.payload}\n        case 'USERS/SET-USERS':\n            return {...state, users: action.payload}\n        case \"USERS/SET-USER-INFORMATION\": {\n            return {\n                ...state,\n                users: state.users.map(u => {\n                    const currentUser = action.payload.find((currentUser) => u.uid === currentUser.id)\n                    if (currentUser) {\n                        const group = state.groups.find(group => group.id === currentUser.data.user.id)\n                        return {\n                            ...u, groupName: group?.data.group,groupId:currentUser.data.user.id, listTasks: currentUser.data.user.listTasks\n                        }\n                    } else {\n                        return u\n                    }\n                })\n            }\n        }\n        default:\n            return {...state}\n    }\n}\nexport const authAC = (payload: boolean) => ({type: 'USERS/AUTH', payload} as const)\nexport const setUsersAC = (payload: any) => ({type: 'USERS/SET-USERS', payload} as const)\nexport const setUserRecordAC = (payload: string) => ({type: 'USERS/SET-USER-RECORD', payload} as const)\nexport const setUserAdditionalInformationAC = (payload: Array<FireBaseResponse<UserType>>) => ({\n    type: 'USERS/SET-USER-INFORMATION', payload} as const)\nexport const loginUserAC = (email: string, userid: string) => ({type: 'USERS/LOGIN_USER', email, userid} as const)\n\n//TC\nexport const authTC = () => (dispatch: Dispatch) => {\n    app.auth().onAuthStateChanged(function (user: any) {\n        // console.log('onAuthStateChanged :', user);\n        if (user) {\n            dispatch(authAC(true))\n            dispatch(loginUserAC(user.email, user.uid))\n        } else {\n            dispatch(authAC(false))\n        }\n    })\n}\nexport const removeUserTC = (uid: string) => (dispatch: any) => {\n    Users.userRemove(uid).then(res => {\n        dispatch(setUsersTC())\n        console.log(res);\n    }).catch((err=>{\n            handleServerNetworkError(err, dispatch)\n        })\n    )\n}\nexport const removeGroupFromUserDataTC = (uid: string) => (dispatch: any) => {\n    Users.deleteGroupFromUserData(uid).then(res => {\n        dispatch(setUsersTC())\n        console.log(res);\n    })\n}\nexport const updateUserTC = (uid: string, payload: firestorUpdateUserType) => (dispatch: any) => {\n    dispatch(setAppStatusAC('loading'))\n    Users.updateUser(uid, payload).then(res => {\n        dispatch(setAppStatusAC('succeeded'))\n        dispatch(setUsersTC())\n        console.log(res);\n    }).catch(err=>{\n        console.log(err);\n        handleServerNetworkError(err.message, dispatch)\n        })\n}\nexport const createUserTC = (email: string, password: string, username: string) => (dispatch: any) => {\n    Users.createUser(email, password, username).then(res => {\n        dispatch(setUserRecordAC(res.data))\n        if (res.data.message) {\n            alert(res.data.message)\n        }\n    })\n}\nexport const setUsersTC = () => async (dispatch: Dispatch) => {\n    try {\n        const users = await Users.getAllUsers()\n        const infoUser = await Users.getAllUsersFirestore()\n        dispatch(setUsersAC(users.data))\n        dispatch(setUserAdditionalInformationAC(infoUser))\n    } catch (e) {\n        console.log(e)\n    }\n}\nexport const getAllUsersFirestoreTC = () => (dispatch: Dispatch) => {\n    Users.getAllUsersFirestore().then(res => {\n        // console.log('Users.getAllUsersFirestore' + res);\n        dispatch(setUserAdditionalInformationAC(res))\n    })\n}\nexport const setUserOnGroupTC = (id: string, uid: string, userName: string, user: groupUsersType) =>\n    (dispatch: any) => {\n        GroupsApi.addUserOnGroup(id, user).then(res => {\n            dispatch(getGroupsTC())\n        }).catch((err=>{\n                handleServerNetworkError(err, dispatch)\n            })\n        )\n        Users.addUserData(uid, id, userName).then(res => {\n            // console.log(\"setUserOnGroupTC: \", res);\n            dispatch(getAllUsersFirestoreTC())\n        }).catch((err=>{\n                handleServerNetworkError(err, dispatch)\n            })\n        )\n    }\nexport const loginUserTC = (email: string, password: string) => (dispatch: any) => {\n    app.auth().signInWithEmailAndPassword(email, password)\n        .then((res) => {\n            dispatch(authAC(true))\n            dispatch(setUsersTC())\n            // console.log(res);\n        })\n        .catch(er => {\n            console.log(er);\n        })\n}\nexport const signOutTC = () => (dispatch: Dispatch) => {\n    firebase.auth().signOut().then((res) => {\n        console.log(res);\n    }).catch((error) => {\n        console.log(error);\n    });\n}\n\n\n// export const addItemTC = ( group: string) => (dispatch: Dispatch) => {\n// // export const addGroupsTC = (id: string, group: string) => (dispatch: Dispatch) => {\n//     debugger\n//     // dispatch(setGroupsAC({id,group}))\n//\n//     Users.addGroup(group)\n//         .then(res => {\n//             debugger\n//\n//            dispatch(setGroupsAC(res.data))\n//            // dispatch(setGroupsAC({id,name}))\n//         })\n// }","import {Dispatch} from \"redux\";\nimport {TaskPriorities, Tasks, TaskStatuses, TaskType, todolistsAPI, UpdateTaskModelType, Users} from \"./Api\";\nimport {RemoveTodolistActionType, SetTodolistsActionType} from \"./todolists-reducer\";\nimport {SetAppErrorActionType, setAppStatusAC, SetAppStatusActionType} from \"./app-reducer\";\nimport {handleServerAppError, handleServerNetworkError} from \"../utils/error-utils\";\nimport * as uuid from \"uuid\";\nimport {AppRootStateType} from \"./store\";\nimport { v1 } from \"uuid\";\n\n\nexport type UpdatedTaskType = {\n    description?: string\n    title?: string\n    status?: TaskStatuses\n    priority?: TaskPriorities\n    startDate?: string\n    deadline?: string\n    _id?: string\n    todoListId?: string\n    order?: number\n    addedDate?: string\n}\nexport type TasksStateType = {\n    [key: string]: Array<TaskType>\n}\ntype ActionsType =\n    | ReturnType<typeof removeTaskAC>\n    | ReturnType<typeof addTaskAC>\n    | ReturnType<typeof updateTaskAC>\n    | RemoveTodolistActionType\n    | SetTodolistsActionType\n    | ReturnType<typeof setTasksAC>\ntype ThunkDispatch = Dispatch<ActionsType | SetAppStatusActionType | SetAppErrorActionType>\n\n\nconst initialState: TasksStateType = {}\n\nexport const tasksReducer = (state: TasksStateType = initialState, action: ActionsType): TasksStateType => {\n\n    switch (action.type) {\n        case 'REMOVE-TASK':\n            return {...state, [action.todolistId]: state[action.todolistId].filter(t => t._id !== action.taskId)}\n        case 'ADD-TASK': {\n            return {\n                ...state,\n                [action.task.todoListId]: [action.task, ...state[action.task.todoListId]]\n            }\n        }\n        case 'UPDATE-TASK':\n            return {\n                ...state,\n                [action.todolistId]: state[action.todolistId]\n                    .map(t => t._id === action.taskId ? {...t, ...action.updatedTask} : t)\n            }\n        case 'REMOVE-TODOLIST':\n            const copyState = {...state}\n            delete copyState[action.id]\n            return copyState\n        case 'SET-TODOLISTS': {\n            const copyState = {...state}\n            action.todolists.forEach(tl => {\n                copyState[tl.id] = []\n            })\n            return copyState\n        }\n        case 'SET-TASKS':\n            return {...state, [action.todolistId]: action.tasks}\n        default:\n            return state\n    }\n}\n\n// actions\nexport const removeTaskAC = (taskId: string, todolistId: string) =>\n    ({type: 'REMOVE-TASK', taskId, todolistId} as const)\nexport const addTaskAC = (task: TaskType) =>\n    ({type: 'ADD-TASK', task} as const)\nexport const updateTaskAC = (taskId: string, updatedTask: UpdatedTaskType, todolistId: string) =>\n    ({type: 'UPDATE-TASK', updatedTask, todolistId, taskId} as const)\nexport const setTasksAC = (tasks: Array<TaskType>, todolistId: string) =>\n    ({type: 'SET-TASKS', tasks, todolistId} as const)\n\n// thunks\nexport const fetchTasksTC = (todolistId: string) => (dispatch: Dispatch<ActionsType | SetAppStatusActionType | any>) => {\n    dispatch(setAppStatusAC('loading'))\n    todolistsAPI.getTasks(todolistId)\n        .then((res) => {\n            const tasks = res.data.tasks\n            dispatch(setTasksAC(tasks, todolistId))\n            dispatch(setAppStatusAC('succeeded'))\n        }).catch((error) => {\n            handleServerNetworkError(error, dispatch);\n        })\n}\n// export const removeTaskTC = (taskId: string, todolistId: string, task: TaskType) => (dispatch: Dispatch<ActionsType| SetAppErrorActionType | SetAppStatusActionType >) => {\nexport const removeTaskTC = (taskId: string, todolistId: string) => (dispatch: Dispatch<ActionsType| SetAppErrorActionType | SetAppStatusActionType >) => {\n    dispatch(setAppStatusAC('loading'))\n    // todolistsAPI.deleteTask(todolistId, taskId, task)\n    Tasks.taskRemove(taskId)\n        .then(res => {\n            if (res.status === 200) {\n                dispatch(removeTaskAC(taskId, todolistId))\n                dispatch(setAppStatusAC('succeeded'))\n            } else {\n                // handleServerAppError(, dispatch);\n            }\n        }).catch((error) => {\n            handleServerNetworkError(error, dispatch);\n        })\n}\nexport const addTaskTC = (title: string, todoListId: string) => (dispatch: Dispatch<ActionsType | SetAppErrorActionType | SetAppStatusActionType | any> ) => {\n    dispatch(setAppStatusAC('loading'))\n    let _id = v1();\n    let description = '';\n    let completed = false;\n    let status = 0;\n    let priority = 0;\n    let startDate = new Date().toDateString()\n    let deadline = new Date().toDateString() //required(datetime)\n    let order = 0;// required(integer)\n    let addedDate = new Date().toDateString()\n    const task = {\n        description, title, status, priority, startDate, deadline,\n        todoListId, order, addedDate, completed, _id\n    }\n    todolistsAPI.addTask(todoListId, {\n        description, title, status, priority, startDate, deadline,\n        todoListId, order, addedDate,completed,_id\n    })\n        .then(res => {\n            if (res.status === 200) {\n                dispatch(addTaskAC(task))\n                dispatch(setAppStatusAC('succeeded'))\n            } else {\n                // handleServerAppError(, dispatch);\n            }\n        })\n        .catch((error) => {\n            handleServerNetworkError(error, dispatch)\n        })\n}\nexport const updateTaskTC = (taskId: string, updatedTask: UpdatedTaskType, todolistId: string) =>\n    (dispatch: ThunkDispatch, getState: () => AppRootStateType) => {\n        const state = getState()\n        const task = state.tasks[todolistId].find(t => t._id === taskId)\n        if (!task) {\n            //throw new Error(\"task not found in the state\");\n            console.warn('task not found in the state')\n            return\n        }\n        const updatedTaskModel: TaskType = {\n            description: task.description,\n            title: task.title,\n            status: task.status,\n            priority: task.priority,\n            startDate: task.startDate,\n            deadline: task.deadline,\n            _id: task._id,\n            todoListId: task.todoListId,\n            order: task.order,\n            addedDate: task.addedDate,\n            completed: task.completed,\n            ...updatedTask\n        }\n\n        todolistsAPI.updateTask(todolistId, taskId, updatedTaskModel)\n            .then(res => {\n                if (res.status === 200) {\n                    const action = updateTaskAC(taskId, updatedTask, todolistId)\n                    dispatch(action)\n                } else {\n                    handleServerAppError(res.data, dispatch);\n                }\n            })\n            .catch((error) => {\n                handleServerNetworkError(error, dispatch);\n            })\n    }\n\n\nexport const setUsersAC = (payload: any) => ({type: 'SET-USERS', payload} as const)\nexport const setGroupsAC = (payload: any) => ({type: 'SET-GROUPS', payload} as const)\nexport const addGroupsAC = (payload: any) => ({type: 'ADD-GROUPS', payload} as const)\n//export const setUsersTC = (payload:any) =>({type: 'SET-USERS',payload}as const)\n// export const setTasksTC = () => (dispatch:Dispatch) =>{\n//   const tasks =firebase.database().ref('tasks')\n//   tasks.on('value',(el)=>{\n//     dispatch(setUsers(el.val()))\n//     // let aaa = el.val()\n//     // console.log(aaa);\n//   })\n// }\nexport const setUsersTC = () => (dispatch: Dispatch) => {\n    Users.getAllUsers()\n        .then(res => {\n                dispatch(setUsersAC(res.data.users))\n            }\n        )\n}\nexport const setTasksTC = () => (dispatch: Dispatch) => {\n    Users.getAllUsers()\n        .then(res => {\n                dispatch(setUsersAC(res.data.users))\n            }\n        )\n}\n// export const addGroups = (id: string, name: string) => (dispatch: Dispatch) => {\n//     debugger\n//     Users.addGroup(id, name)\n//         .then(res => {\n//             debugger\n//             dispatch(setGroupsAC(res.data))\n//         })\n// }","export const PATH = {\r\n    LOGIN: \"/login\",\r\n    REGISTRATION: \"/registration\",\r\n    GROUPS: \"/groups\",\r\n    USERS: \"/users\",\r\n    PAGEGROUP: {\r\n        path: \"/groups/:id\",\r\n        getUrl(id: string) {\r\n            return `/groups/${id}`\r\n        }\r\n    },\r\n    ERROR404: \"/404\",\r\n    ERROR500: \"/500\",\r\n    PASS_RECOVERY: \"/password-recovery\",\r\n    PASS_NEW: \"/entering-new-password/:token\",\r\n}","import {AnyAction, Dispatch} from 'redux'\r\nimport {GroupsApi, Tasks, todolistsAPI, TodoslistType} from \"./Api\";\r\nimport {RequestStatusType, setAppStatusAC, SetAppStatusActionType} from \"./app-reducer\";\r\nimport * as uuid from \"uuid\";\r\nimport {\r\n    getGroupByIdTC,\r\n    removeTodolistFromGroupTC,\r\n    setTodolistsForGroupAC,\r\n    setTodolistsForGroupACType\r\n} from \"./groupReduser\";\r\nimport {fetchTasksTC, removeTaskAC} from \"./tasksReduser\";\r\nimport {handleServerNetworkError} from \"../utils/error-utils\";\r\n// types\r\nexport type FilterValuesType = 'all' | 'active' | 'completed';\r\nexport type TodolistType = {\r\n    addedDate: string\r\n    id: string\r\n    order: number\r\n    title: string\r\n}\r\nexport type TodolistDomainType = TodolistType & {\r\n    filter: FilterValuesType\r\n    entityStatus: RequestStatusType\r\n}\r\ntype ThunkDispatch = Dispatch<ActionsType | SetAppStatusActionType | setTodolistsForGroupACType>\r\nconst initialState: Array<TodolistDomainType> = []\r\n\r\nexport const todolistsReducer = (state: Array<TodolistDomainType> = initialState, action: ActionsType): Array<TodolistDomainType> => {\r\n    switch (action.type) {\r\n        case 'REMOVE-TODOLIST':\r\n            return state.filter(tl => tl.id != action.id)\r\n        case 'CHANGE-TODOLIST-TITLE':\r\n            return state.map(tl => tl.id === action.id ? {...tl, title: action.title} : tl)\r\n        case 'CHANGE-TODOLIST-FILTER':\r\n            return state.map(tl => tl.id === action.id ? {...tl, filter: action.filter} : tl)\r\n        case 'CHANGE-TODOLIST-ENTITY-STATUS':\r\n            return state.map(tl => tl.id === action.id ? {...tl, entityStatus: action.status} : tl)\r\n        case 'SET-TODOLISTS': {\r\n            //@ts-ignore\r\n            return action.todolists.map(tl => ({...tl.data, filter: 'all', entityStatus: 'idle'}))\r\n        }\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\n// actions\r\nexport const removeTodolistAC = (id: string) => ({type: 'REMOVE-TODOLIST', id} as const)\r\nexport const changeTodolistTitleAC = (id: string, title: string) => ({\r\n    type: 'CHANGE-TODOLIST-TITLE', id, title\r\n} as const)\r\nexport const changeTodolistFilterAC = (id: string, filter: FilterValuesType) => ({\r\n    type: 'CHANGE-TODOLIST-FILTER', id, filter\r\n} as const)\r\nexport const changeTodolistEntityStatusAC = (id: string, status: RequestStatusType) => ({\r\n    type: 'CHANGE-TODOLIST-ENTITY-STATUS', id, status\r\n} as const)\r\nexport const setTodolistsAC = (todolists: Array<TodoslistType>) => ({type: 'SET-TODOLISTS', todolists} as const)\r\n\r\n\r\n// thunks\r\nexport const fetchTodolistsTC = () => {\r\n    return (dispatch: ThunkDispatch) => {\r\n        dispatch(setAppStatusAC('loading'))\r\n        todolistsAPI.getTodolists()\r\n            .then((res) => {\r\n                debugger\r\n                dispatch(setTodolistsAC(res))\r\n                dispatch(setAppStatusAC('succeeded'))\r\n            })\r\n    }\r\n}\r\nexport const todolistDeleteTaskTC = (todolistId: string) => (dispatch: Dispatch<any>) => {\r\n    todolistsAPI.deleteTask(todolistId)\r\n        .then(res => {\r\n                dispatch(removeTaskAC(todolistId, todolistId))\r\n                console.log(res);\r\n            }\r\n        ).catch((error) => {\r\n        handleServerNetworkError(error, dispatch)\r\n    })\r\n}\r\nexport const todolistDeleteTC = (todolistId: string) => (dispatch: Dispatch<any>) => {\r\n    todolistsAPI.deleteTodolist(todolistId)\r\n        .then((res) => {\r\n            dispatch(removeTodolistAC(todolistId))\r\n            //скажем глобально приложению, что асинхронная операция завершена\r\n            dispatch(setAppStatusAC('succeeded'))\r\n        }).catch((error) => {\r\n        handleServerNetworkError(error, dispatch)\r\n    })\r\n}\r\nexport const removeTodolistTC = (id: string, todolistId: string) => (dispatch: Dispatch<any>) => {\r\n    //изменим глобальный статус приложения, чтобы вверху полоса побежала\r\n    dispatch(setAppStatusAC('loading'))\r\n    //изменим статус конкретного тудулиста, чтобы он мог задизеблить что надо\r\n    dispatch(changeTodolistEntityStatusAC(todolistId, 'loading'))\r\n    debugger\r\n    const promise = [\r\n        dispatch(todolistDeleteTaskTC(todolistId)),\r\n        dispatch(todolistDeleteTC(todolistId)),\r\n        dispatch(removeTodolistFromGroupTC(id, todolistId))]\r\n    Promise.all([promise]).then(() => {\r\n        dispatch(fetchTodolistsTC())\r\n        // dispatch(removeTodolistAC(todolistId));\r\n    })\r\n}\r\nconst createTodolistTC = (todoId: string, title: string) => (dispatch: Dispatch) => {\r\n    let addedDate = new Date().toDateString()\r\n    let order = 0\r\n    todolistsAPI.createTodolist(todoId, title, addedDate, order).then()\r\n}\r\nconst addTodoOnGroupTC = (id: string, todoId: string) => (dispatch: Dispatch) => {\r\n    GroupsApi.addTodoOnGroup(id, todoId).then(res => {\r\n\r\n    })\r\n}\r\nexport const addTodolistTC = (title: string, id: string) => (dispatch: any) => {\r\n    dispatch(setAppStatusAC('loading'))\r\n    let todoId = uuid.v1()\r\n    const promise = [\r\n        dispatch(createTodolistTC(todoId, title)),\r\n        dispatch(addTodoOnGroupTC(id, todoId)),\r\n    ]\r\n    Promise.all([promise]).then(() => {\r\n        dispatch(fetchTodolistsTC())\r\n    }).then(() => {\r\n        dispatch(getGroupByIdTC(id))\r\n        dispatch(setAppStatusAC('succeeded'))\r\n    })\r\n    // todolistsAPI.createTask(todoId).then(res => {\r\n    //     dispatch(fetchTasksTC(todoId))\r\n    //     // console.log(res);\r\n    // })\r\n\r\n}\r\nexport const changeTodolistTitleTC = (id: string, title: string) => (dispatch: Dispatch<ActionsType | any>) => {\r\n    todolistsAPI.updateTodolist(id, title)\r\n        .then((res) => {\r\n            dispatch(changeTodolistTitleAC(id, title))\r\n        }).catch((error) => {\r\n        handleServerNetworkError(error, dispatch)\r\n    })\r\n\r\n}\r\n\r\nexport type RemoveTodolistActionType = ReturnType<typeof removeTodolistAC>;\r\nexport type SetTodolistsActionType = ReturnType<typeof setTodolistsAC>;\r\nexport type changeTodolistTitleACType = ReturnType<typeof changeTodolistTitleAC>;\r\nexport type changeTodolistEntityStatusACType = ReturnType<typeof changeTodolistEntityStatusAC>;\r\nexport type changeTodolistFilterACType = ReturnType<typeof changeTodolistFilterAC> ;\r\n\r\ntype ActionsType = RemoveTodolistActionType\r\n    | changeTodolistTitleACType | changeTodolistEntityStatusACType\r\n    | changeTodolistFilterACType | SetTodolistsActionType\r\n\r\n","import React, {ChangeEvent, useState} from 'react';\r\nimport {TextField} from '@material-ui/core';\r\n\r\ntype EditableSpanPropsType = {\r\n    value: string\r\n    onChange: (newValue: string) => void\r\n}\r\n\r\nexport const EditableSpan = React.memo(function (props: EditableSpanPropsType) {\r\n    // console.log(\"EditableSpan called\");\r\n    let [editMode, setEditMode] = useState(false);\r\n    let [item, setItem] = useState(props.value);\r\n\r\n    const activateEditMode = () => {\r\n        setEditMode(true);\r\n        setItem(props.value);\r\n    }\r\n    const activateViewMode = () => {\r\n        setEditMode(false);\r\n        props.onChange(item);\r\n    }\r\n    const changeItem = (e: ChangeEvent<HTMLInputElement>) => {\r\n        setItem(e.currentTarget.value)\r\n    }\r\n\r\n    return editMode\r\n        ? <TextField value={item} onChange={changeItem} autoFocus onBlur={activateViewMode}/>\r\n        : <span onDoubleClick={activateEditMode}>{props.value}</span>\r\n});\r\n"],"sourceRoot":""}