{"version":3,"sources":["ui/views/groupUsers/groupUsers.module.css","ui/views/user/user.module.css","ui/common/EditableSpan.tsx","ui/views/user/user.tsx","ui/views/groups/group.tsx","ui/views/groups/groups.tsx","ui/views/groupUsers/groupsUsers.tsx"],"names":["module","exports","EditableSpan","React","memo","props","useState","editMode","setEditMode","value","item","setItem","TextField","onChange","e","currentTarget","autoFocus","onBlur","onDoubleClick","User","dispatch","useDispatch","admin","useSelector","state","users","adminUid","curentUser","userid","console","log","setGroupName","name","setName","email","setEmail","useCallback","addUserToGroup","uid","className","cl","userBox","Button","variant","onClick","payload","nickName","updateUserTC","removeUser","date","group","listTasks","Group","user","map","u","box","Groups","useEffect","getGroupsTC","groups","g","id","data","nGroup","setNumGroup","type","addGroupsTC","trim","wrap","GroupsUsers","setUsersTC","action","removeUserTC","tokensValidAfterTime"],"mappings":"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","file":"static/js/5.811d9824.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"wrap\":\"groupUsers_wrap__14uOM\",\"box\":\"groupUsers_box__DfUE8\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"userBox\":\"user_userBox__8ygG-\"};","import React, {ChangeEvent, useState} from 'react';\r\nimport {TextField} from '@material-ui/core';\r\n\r\ntype EditableSpanPropsType = {\r\n    value: string\r\n    onChange: (newValue: string) => void\r\n}\r\n\r\nexport const EditableSpan = React.memo(function (props: EditableSpanPropsType) {\r\n    // console.log(\"EditableSpan called\");\r\n    let [editMode, setEditMode] = useState(false);\r\n    let [item, setItem] = useState(props.value);\r\n\r\n    const activateEditMode = () => {\r\n        setEditMode(true);\r\n        setItem(props.value);\r\n    }\r\n    const activateViewMode = () => {\r\n        setEditMode(false);\r\n        props.onChange(item);\r\n    }\r\n    const changeItem = (e: ChangeEvent<HTMLInputElement>) => {\r\n        setItem(e.currentTarget.value)\r\n    }\r\n\r\n    return editMode\r\n        ? <TextField value={item} onChange={changeItem} autoFocus onBlur={activateViewMode}/>\r\n        : <span onDoubleClick={activateEditMode}>{props.value}</span>\r\n});\r\n","import React, {ChangeEvent, useCallback, useEffect, useState} from 'react';\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {AppRootStateType} from \"../../../bll/store\";\r\nimport {setUserOnGroupAC, setUserOnGroupTC, updateUserTC, userType} from \"../../../bll/userReduser\";\r\nimport cl from './user.module.css'\r\nimport {Button} from \"@material-ui/core\";\r\nimport {EditableSpan} from \"../../common/EditableSpan\";\r\n\r\ntype propsType = {\r\n    uid: string\r\n    name?: string | undefined\r\n    date: string\r\n    email: string\r\n    group?: string | undefined\r\n    listTasks?: {} | undefined\r\n    removeUser: (uid: string) => void\r\n    addUserToGroup: (uid: string) => void\r\n}\r\nconst User = (props: propsType) => {\r\n    const dispatch = useDispatch()\r\n    const admin = useSelector<AppRootStateType, string>(state => state.users.adminUid)\r\n    const curentUser = useSelector<AppRootStateType, string>(state => state.users.userid)\r\n    console.log(admin,' ',curentUser);\r\n    let [groupName, setGroupName] = useState<string>('')\r\n    let [name, setName] = useState<string>(props.name ? props.name : 'not a name')\r\n    let [email, setEmail] = useState<string>(props.email)\r\n    const changeEmail = (email: string) => {\r\n        setEmail(email)\r\n    }\r\n    const changeName = (name: string) => {\r\n        setName(name)\r\n    }\r\n    const removeUser = () => {\r\n        props.removeUser(props.uid)\r\n    }\r\n    // const changePropUser = useCallback((title: string) => {\r\n    //     props.somefunction(props.id, title)\r\n    // }, [props.id, props.somefunction])\r\n    const update = () => {\r\n        let nickName = name\r\n        let payload = {email, nickName}\r\n        dispatch(updateUserTC(props.uid, payload))\r\n    }\r\n    const addToo = useCallback(() => {\r\n       props.addUserToGroup(props.uid)\r\n        setGroupName('')\r\n    },[])\r\n    const onChaneNameGroup = (e: ChangeEvent<HTMLInputElement>) => {\r\n        setGroupName(e.currentTarget.value)\r\n    }\r\n\r\n\r\n    return (\r\n        <div key={props.uid} className={cl.userBox}>\r\n            {/*<p>uid:{props.uid}</p>*/}\r\n\r\n            {admin !== curentUser && <div>\r\n                <p>name:{name ? name : 'no name'}</p>\r\n                <p>email:{props.email}</p>\r\n            </div>}\r\n\r\n            {admin === curentUser &&\r\n            <div>\r\n                <p>email:<EditableSpan onChange={changeEmail} value={email}/></p>\r\n                <p>name:<EditableSpan onChange={changeName} value={name}/></p>\r\n                <Button variant=\"contained\" onClick={update}>update</Button>\r\n                <Button variant=\"contained\" onClick={removeUser}>delete</Button>\r\n                {/*<hr/>*/}\r\n                {/*<input type=\"text\" value={groupName} placeholder={'add groupName'} onChange={onChaneNameGroup}/>*/}\r\n                {/*<button onClick={addToo}>add to group</button>*/}\r\n                {/*<hr/>*/}\r\n            </div>\r\n            }\r\n            <p>date :{props.date}</p>\r\n            <p>group:{props.group ? props.group : 'no group'}</p>\r\n            <p>listTasks:{props.listTasks ? props.listTasks : 'no tasks'}</p>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default User;\r\n\r\n","import React from 'react';\r\nimport {useDispatch} from \"react-redux\";\r\nimport {removeGroupsTC} from \"../../../bll/userReduser\";\r\nimport cl from \"../groupUsers/groupUsers.module.css\";\r\n\r\ntype userType={\r\n    uid: string\r\n    name:string\r\n}\r\ntype propsType = {\r\n    id: string\r\n    name: string\r\n    users: userType[]\r\n    // users: [{ uid: string, name:string }]\r\n}\r\nconst Group = (props: propsType) => {\r\n    const dispatch = useDispatch()\r\n    const update = () => {    }\r\n    const deleteGroup = () => {\r\n        debugger\r\n        dispatch(removeGroupsTC(props.id))\r\n    }\r\n    let user = props.users?.map(u => <div key={u.uid}>\r\n        {/*<p>{u.uid}</p>*/}\r\n        <span >{u?.name}</span></div>)\r\n    return (\r\n        <div className={cl.box}>\r\n            <div><p>names group: {props.name}</p>\r\n                {/*<button onClick={update}>update</button>*/}\r\n                {/*<button onClick={deleteGroup}>delete</button>*/}\r\n            </div>\r\n            {user && <p>list users:{user}</p>}\r\n            <p>content for group: ...</p>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default Group;","import React, {ChangeEvent, useEffect, useState} from 'react';\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {addGroupsTC, getGroupsTC, groupType, setUsersTC} from \"../../../bll/userReduser\";\r\nimport {AppRootStateType} from \"../../../bll/store\";\r\nimport Group from \"./group\";\r\nimport {GroupType} from \"../../../bll/Api\";\r\nimport cl from \"../groupUsers/groupUsers.module.css\";\r\n\r\nconst Groups = () => {\r\n    const dispatch = useDispatch()\r\n    useEffect(() => {\r\n        dispatch(getGroupsTC())\r\n    }, [dispatch])\r\n    const allGroups = useSelector<AppRootStateType, Array<GroupType>>(state => state.users.groups)\r\n    const group = allGroups.map(g => <Group key={g.id} id={g.id} name={g.data.group}\r\n                                            users={g.data?.users}\r\n    />)\r\n    let [nGroup, setNumGroup] = useState<string>('')\r\n    const setNewGroup = (e: ChangeEvent<HTMLInputElement>) => {\r\n        setNumGroup(e.currentTarget.value)\r\n    }\r\n    const createGroup = () => {\r\n        dispatch(addGroupsTC(nGroup.trim()))\r\n        setNumGroup('')\r\n    }\r\n    return (\r\n        <>\r\n            <p>GroupsUsers:\r\n                <input type=\"text\" value={nGroup} onChange={setNewGroup}/>\r\n                <button onClick={createGroup}>create group</button>\r\n            </p>\r\n            <div className={cl.wrap}>{group}</div>\r\n        </>\r\n    );\r\n};\r\n\r\nexport default Groups;","import React, {ChangeEvent, useCallback, useEffect, useState} from 'react';\nimport {useDispatch, useSelector} from \"react-redux\";\nimport {removeUserTC, setUserOnGroupTC, setUsersTC, userType} from \"../../../bll/userReduser\";\nimport {AppRootStateType} from \"../../../bll/store\";\nimport User from \"../user/user\";\nimport Group from \"../groups/group\";\nimport cl from './groupUsers.module.css';\nimport Groups from \"../groups/groups\";\n\nconst GroupsUsers = () => {\n    const dispatch = useDispatch()\n    useEffect(() => {\n        // debugger\n        dispatch(setUsersTC())\n        // const db = admin.database();\n        // const ref = db.ref(\"restricted_access/secret_document\");\n        // ref.once(\"value\", function(snapshot) {\n        //     console.log(snapshot.val());\n        // });\n    }, [dispatch])\n    const removeUser = useCallback(function (uid: string) {\n        const action = removeUserTC(uid);\n        dispatch(action);\n    }, []);\n    const addUserToGroup=(uid:string)=>{\n        // dispatch(setUserOnGroupTC(uid,\" idgoup\"))\n    }\n    const allUsers = useSelector<AppRootStateType, Array<userType>>(state => state.users.users)\n    const user = allUsers.map(u => <User key={u.uid} group={u.group} name={u.name} date={u.tokensValidAfterTime}\n                                         email={u.email} listTasks={u.listTasks} uid={u.uid} removeUser={removeUser}\n                                         addUserToGroup={addUserToGroup}/>)\n\n    return (\n        <div>\n            <h5>all users: </h5>\n            <p>пс. чтоб обновить поля( email и name ) даблклик и апдейт</p>\n            <div className={cl.wrap}>{user}</div>\n            <Groups/>\n        </div>\n    );\n};\n\nexport default GroupsUsers;\n"],"sourceRoot":""}